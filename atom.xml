<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>熟悉路线站点</title>
  
  <subtitle>本人是个小小程序员，之前一直是看大神博客学习，博客一是为了激励自己学习，二是记录自己的学习历程，以方便及时回顾相关知识。主要技术点包括Java后端，Spring框架，数据库，计算机基础知识，以及技术分享。</subtitle>
  <link href="https://duanjiaojiao316.github.io/atom.xml" rel="self"/>
  
  <link href="https://duanjiaojiao316.github.io/"/>
  <updated>2021-05-18T07:38:06.335Z</updated>
  <id>https://duanjiaojiao316.github.io/</id>
  
  <author>
    <name>duanjiaojiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 第三方库国内镜像</title>
    <link href="https://duanjiaojiao316.github.io/2021/05/18/Python-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
    <id>https://duanjiaojiao316.github.io/2021/05/18/Python-%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</id>
    <published>2021-05-18T07:36:54.000Z</published>
    <updated>2021-05-18T07:38:06.335Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;pypi.mirrors.ustc.edu.cn&#x2F;simple&#x2F;</span><br><span class="line"></span><br><span class="line">pip install keras -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple&#x2F; --trusted-host pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class</summary>
      
    
    
    
    
    <category term="Python 命令" scheme="https://duanjiaojiao316.github.io/tags/Python-%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Redis提供不精确的去重技术方案HyperLogLog</title>
    <link href="https://duanjiaojiao316.github.io/2021/05/10/Redis%E6%8F%90%E4%BE%9B%E4%B8%8D%E7%B2%BE%E7%A1%AE%E7%9A%84%E5%8E%BB%E9%87%8D%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88HyperLogLog/"/>
    <id>https://duanjiaojiao316.github.io/2021/05/10/Redis%E6%8F%90%E4%BE%9B%E4%B8%8D%E7%B2%BE%E7%A1%AE%E7%9A%84%E5%8E%BB%E9%87%8D%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88HyperLogLog/</id>
    <published>2021-05-10T14:40:03.000Z</published>
    <updated>2021-05-12T06:09:19.910Z</updated>
    
    
    
    
    <category term="数据库" scheme="https://duanjiaojiao316.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Redis" scheme="https://duanjiaojiao316.github.io/tags/Redis/"/>
    
    <category term="HyperLogLog" scheme="https://duanjiaojiao316.github.io/tags/HyperLogLog/"/>
    
  </entry>
  
  <entry>
    <title>Redis位图</title>
    <link href="https://duanjiaojiao316.github.io/2021/05/06/Redis%E4%BD%8D%E5%9B%BE/"/>
    <id>https://duanjiaojiao316.github.io/2021/05/06/Redis%E4%BD%8D%E5%9B%BE/</id>
    <published>2021-05-06T14:45:00.000Z</published>
    <updated>2021-05-12T03:42:48.759Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<code>Redis</code>的位图，什么是位图呢？位图的最小单位是<code>bit</code>，每个bit的取值只能是0或者1。它不是一个特殊的数据结构，内容为普通的字符串，也就是<code>byte</code>数组。所以位图即可以通过<code>set/get</code>设置或者获取位图的整个内容，也可以使用<code>getbit/setbit</code>把byte数据当成位数组进行操作。</p><p><img src="/2021/05/06/Redis%E4%BD%8D%E5%9B%BE/image-20210507223202960.png" alt="image-20210507223202960"></p><p>重要从以下几个方面介绍</p><p><img src="/2021/05/06/Redis%E4%BD%8D%E5%9B%BE/image-20210506231102310.png" alt="image-20210506231102310"></p><p>什么需求下会使用到<code>Redis</code>中的位图呢？</p><p>在平时开发中遇到存储<code>bool</code>型数据存取的情况下使用位图，可以节省很大的存储空间。</p><p>例如：用户一年356天的签到情况，使用普通的<code>key/value</code>结构使用空间较大。如果使用位图，签到表示1，没签表示0。365天只用46个字节完成记录（365/8=45.625）。</p><h3 id="基础操作"><a class="markdownIt-Anchor" href="#基础操作"></a> 基础操作</h3><p>首先通过python代码获取h的ASCII码是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span>(<span class="built_in">ord</span>(<span class="string">&#x27;h&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;0b1101000&#x27;</span></span><br></pre></td></tr></table></figure><p>通过<code>setbit</code>指令设置<code>s</code>为字符<code>h</code>。（零存整取)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit s 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit s 2 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit s 4 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; get s</span><br><span class="line">&quot;h&quot;</span><br></pre></td></tr></table></figure><p>零存零取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit w 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit w 2 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit w 4 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit w 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit w 2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit w 5</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>整存零取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set w h</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit w 1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit w 2</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit w 5</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure><p>如果位图中存储的是不可打印的字符，get指令获取的是该字符的十六进制形式。</p><h3 id="统计和查找"><a class="markdownIt-Anchor" href="#统计和查找"></a> 统计和查找</h3><p><code>bitcount</code>指令统计指定范围内1的个数</p><p><code>bitpos</code>指令查找指定范围内出现的第一个1或者0</p><p>指定范围使用的<code>[start,end]</code>，<code>start</code>和<code>end</code>是字节索引，只能是8的倍数。</p><p>如果要计算一个月内的签到次数，不能直接计算只能通过<code>getrange</code>获取包含这个月的所有数据再进行统计。</p><h3 id="魔术指令"><a class="markdownIt-Anchor" href="#魔术指令"></a> 魔术指令</h3><p>前文中的<code>setbit</code>和<code>getbit</code>只能操作单个位，如果操作多个就需要使用管道。</p><p><code>redis3.2</code>之后加入<code>bitfield</code>指令，有三个自指令：<code>get,set,incrby</code>，不用管道也可以执行一次进行多个位操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set w hello</span><br><span class="line">bitfield w get u4 0</span><br><span class="line">bitfield w get u3 2</span><br><span class="line">bitfield w get i4 0</span><br><span class="line">bitfield w get i3 2</span><br><span class="line">bitfield w get u4 0 get u3 2 get i4 0 get i3 2</span><br><span class="line"></span><br><span class="line">bitfield w set u8 8 97</span><br><span class="line">get w</span><br></pre></td></tr></table></figure><p><code>incrby</code>，命令可能会溢出，<code>redis</code>默认是折返。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set w hello</span><br><span class="line">bitfield w incrby u4 2 1</span><br></pre></td></tr></table></figure><p><code>bitfield</code>提供了溢出策略子指令<code>overflow</code>，可以选择溢出行为。</p><p>折返 <code>wrap</code></p><p>失败 <code>fail</code> 报错不执行</p><p>饱和截断 <code>sat</code> 保持最大值或者最小值</p><p>注意：<code>overflow</code>指令只影响接下来执行的一条指令，这条命令执行之后策略会变成默认的折返。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文主要介绍&lt;code&gt;Redis&lt;/code&gt;的位图，什么是位图呢？位图的最小单位是&lt;code&gt;bit&lt;/code&gt;，每个bit的取值只能是0或者1。它不是一个特殊的数据结构，内容为普通的字符串，也就是&lt;code&gt;byte&lt;/code&gt;数组。所以位图即可以通过&lt;code&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis分布式锁</title>
    <link href="https://duanjiaojiao316.github.io/2021/04/26/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://duanjiaojiao316.github.io/2021/04/26/redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2021-04-26T13:10:30.000Z</published>
    <updated>2021-05-12T03:42:48.762Z</updated>
    
    <content type="html"><![CDATA[<p>分布式锁，就是在分布式项目中使用的锁，控制分布式系统同步访问共享资源。</p><h3 id="分布式锁需要满足的特性"><a class="markdownIt-Anchor" href="#分布式锁需要满足的特性"></a> 分布式锁需要满足的特性：</h3><p>1、互斥性。任何时刻，对于一条数据，保证只有一台应用可以获取分布式锁。</p><p>2、高可用性。分布式场景下小部分的服务器宕机不会影响正常运行。（提供分布式锁的服务以集群方式部署）</p><p>3、防止锁超时。客户端没有主动释放锁，服务器会在一段时间后自动释放，防止客户端宕机或者网络不可达等因素产生死锁。</p><p>4、独占性。加锁解锁必须是同一台服务器进行。（锁的持有者才能释放锁）</p><h3 id="怎么获取锁"><a class="markdownIt-Anchor" href="#怎么获取锁"></a> 怎么获取锁？</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、SETNX，用法</span><br><span class="line">SETNX key value</span><br><span class="line"><span class="meta">#</span><span class="bash">SETNX是『 SET <span class="keyword">if</span> Not eXists』(如果不存在，则 SET)的简写，设置成功就返回1，否则返回0。</span></span><br></pre></td></tr></table></figure><p>可以看出，当把<strong>key</strong>为<strong>lock</strong>的值设置为&quot;Java&quot;后，再设置成别的值就会失败，看上去很简单，也好像独占了锁，但有个致命的问题，就是<strong>key没有过期时间</strong>，这样一来，除非手动删除key或者获取锁后设置过期时间，不然其他线程永远拿不到锁。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SETNX Key 1</span><br><span class="line">EXPIRE Key Seconds</span><br></pre></td></tr></table></figure><p>但是这个方案把获取锁和设置过期时间分成两步，没有原子性。（有可能获取锁成功，但是设置过期时间失败）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2、SETEX，用法</span><br><span class="line">SETEX key seconds value</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">值 value 关联到 key ，并将 key 的生存时间设为 seconds (以秒为单位)。如果 key 已经存在，SETEX 命令将覆写旧值。</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3、PSETEX，用法</span><br><span class="line">PSETEX key milliseconds value</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这个命令和SETEX命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像SETEX命令那样，以秒为单位。</span></span><br></pre></td></tr></table></figure><p>不过，从<code>Redis 2.6.12</code> 版本开始，SET命令可以通过参数来实现和SETNX、SETEX、PSETEX 三个命令相同的效果。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value NX EX seconds </span><br></pre></td></tr></table></figure><h3 id="怎么释放锁"><a class="markdownIt-Anchor" href="#怎么释放锁"></a> 怎么释放锁？</h3><p>释放锁的命令就简单了，直接删除key就行，但我们前面说了，因为分布式锁必须由锁的持有者自己释放，所以我们必须先确<strong>保当前释放锁的线程是持有者</strong>，没问题了再<strong>删除</strong>，这样一来，就变成两个步骤了，似乎又违背了原子性了，怎么办呢？</p><p>使用<code>lua</code>脚本把两步操作拼装。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>,KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>KEYS[1]是当前key的名称，ARGV[1]可以是当前线程的ID(或者其他不固定的值，能识别所属线程即可)，这样就可以防止持有过期锁的线程，或者其他线程误删现有锁的情况出现。</p><h3 id="实现一个分布式锁"><a class="markdownIt-Anchor" href="#实现一个分布式锁"></a> 实现一个分布式锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.params.SetParams;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDistributedLock</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取响应锁的数据key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String LOCK_KEY = <span class="string">&quot;redis_lock&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分布式锁自动过期时间5ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> expireTime = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁的最大连接时长1s</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeOut = <span class="number">1000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis命令参数，相当于nx和px的命令合集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SetParams params = SetParams.setParams().nx().px(expireTime);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 线程的id，或者其他可识别当前线程且不重复的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否获取到锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        Long start = System.currentTimeMillis();</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">                <span class="comment">// lock 为设置key的结果</span></span><br><span class="line">                String lock = jedis.set(LOCK_KEY, id,params);</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;OK&quot;</span>.equals(lock)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 目前距离获取锁开始的时间间隔</span></span><br><span class="line">                <span class="keyword">long</span> interval = System.currentTimeMillis() - start;</span><br><span class="line">                <span class="keyword">if</span>(interval &gt; timeOut) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 线程的id，或者其他可识别当前线程且不重复的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unlock</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        <span class="comment">// lua脚本字符串</span></span><br><span class="line">        String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] &quot;</span> +</span><br><span class="line">                <span class="string">&quot;then &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return redis.call(&#x27;del&#x27;,KEYS[1]) &quot;</span> +</span><br><span class="line">                <span class="string">&quot;else &quot;</span> +</span><br><span class="line">                <span class="string">&quot;return 0 &quot;</span> +</span><br><span class="line">                <span class="string">&quot;end&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String result = jedis.eval(script, Collections.singletonList(LOCK_KEY), Collections.singletonList(id)).toString();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>.equals(result);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redisDemo.RedisDistributedLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDistributedLockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedisDistributedLock demo = <span class="keyword">new</span> RedisDistributedLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer NUM = <span class="number">101</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                String id = String.valueOf(Thread.currentThread().getId());</span><br><span class="line">                <span class="keyword">boolean</span> isLock = demo.lock(id);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">                        NUM--;</span><br><span class="line">                        System.out.println(NUM);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    demo.unlock(id);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分布式锁的缺陷"><a class="markdownIt-Anchor" href="#分布式锁的缺陷"></a> 分布式锁的缺陷</h3><p>一、客户端长时间阻塞导致锁失效问题</p><p>客户端1得到了锁，因为网络问题或者GC等原因导致长时间阻塞，然后业务程序还没执行完锁就过期了，这时候客户端2也能正常拿到锁，可能会导致线程安全的问题。</p><p>客户端长时间阻塞</p><p>二、<code>redis</code>服务器时钟漂移问题</p><p>如果<code>redis</code>服务器的机器时钟发生了向前跳跃，就会导致这个key过早超时失效，比如说客户端1拿到锁后，key的过期时间是12:02分，但<code>redis</code>服务器本身的时钟比客户端快了2分钟，导致key在12:00的时候就失效了，这时候，如果客户端1还没有释放锁的话，就可能导致多个客户端同时持有同一把锁的问题。</p><p>三、单点实例安全问题</p><p>如果<code>redis</code>是单master模式的，当这台机宕机的时候，那么所有的客户端都获取不到锁了，为了提高可用性，可能就会给这个master加一个slave，但是因为<code>redis</code>的主从同步是异步进行的，可能会出现客户端1设置完锁后，master挂掉，slave提升为master，因为异步复制的特性，客户端1设置的锁丢失了，这时候客户端2设置锁也能够成功，导致客户端1和客户端2同时拥有锁。</p><p>为了解决<code>Redis</code>单点问题，<code>redis</code>的作者提出了**<code>RedLock</code>**算法。</p><h3 id="redlock算法"><a class="markdownIt-Anchor" href="#redlock算法"></a> <code>RedLock</code>算法</h3><p>该算法的实现前提在于<code>Redis</code>必须是多节点部署的，可以有效防止单点故障，具体的实现思路是这样的：</p><p>1、获取当前时间戳（<code>ms</code>）；</p><p>2、先设定key的有效时长（TTL），超出这个时间就会自动释放，然后client（客户端）尝试使用相同的key和value对所有<code>redis</code>实例进行设置，每次链接<code>redis</code>实例时设置一个比TTL短很多的超时时间，这是为了不要过长时间等待已经关闭的<code>redis</code>服务。并且试着获取下一个<code>redis</code>实例。</p><p>比如：TTL（也就是过期时间）为5s，那获取锁的超时时间就可以设置成50ms，所以如果50ms内无法获取锁，就放弃获取这个锁，从而尝试获取下个锁；</p><p>3、client通过获取所有能获取的锁后的当前时间<strong>减去</strong>申请锁进行第一步的时间，还有<code>redis</code>服务器的时钟<strong>漂移误差</strong>，然后这个时间差要小于TTL时间并且成功设置锁的实例数&gt;= <strong>N/2 + 1</strong>（N为<code>Redis</code>实例的数量），也就是获取超过半数以上的<code>redis</code>实例的锁，那么加锁成功</p><p>比如TTL是5s，连接<code>redis</code>获取所有锁用了2s，然后再减去时钟漂移（假设误差是1s左右），那么锁的真正有效时长就只有2s了；</p><p>4、如果客户端由于某些原因获取锁失败，便会开始解锁所有<code>redis</code>实例。</p><h3 id="redlock算法的隐患"><a class="markdownIt-Anchor" href="#redlock算法的隐患"></a> <code>RedLock</code>算法的隐患</h3><p>好了，算法也介绍完了，从设计上看，毫无疑问，<code>RedLock</code>算法的思想主要是为了有效防止<code>Redis</code>单点故障的问题，而且在设计TTL的时候也考虑到了服务器时钟漂移的误差，让分布式锁的安全性提高了不少。</p><p>但事实真的是这样吗？反正我个人的话感觉效果一般般，</p><p>首先第一点，我们可以看到，在<code>RedLock</code>算法中，锁的有效时间会减去连接<code>Redis</code>实例的时长，如果这个过程因为网络问题导致耗时太长的话，那么最终留给锁的有效时长就会大大减少，客户端访问共享资源的时间很短，很可能程序处理的过程中锁就到期了。而且，锁的有效时间还需要减去服务器的时钟漂移，但是应该减多少合适呢，要是这个值设置不好，很容易出现问题。</p><p>然后第二点，这样的算法虽然考虑到用多节点来防止<code>Redis</code>单点故障的问题，但但如果有节点发生崩溃重启的话，还是有可能出现多个客户端同时获取锁的情况。</p><p>假设一共有5个<code>Redis</code>节点：A、B、C、D、E，客户端1和2分别加锁</p><ol><li>客户端1成功锁住了A，B，C，获取锁成功（但D和E没有锁住）。</li><li>节点C的master挂了，然后锁还没同步到slave，slave升级为master后丢失了客户端1加的锁。</li><li>客户端2这个时候获取锁，锁住了C，D，E，获取锁成功。</li></ol><p>这样，客户端1和客户端2就同时拿到了锁，程序安全的隐患依然存在。除此之外，如果这些节点里面某个节点发生了时间漂移的话，也有可能导致锁的安全问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;分布式锁，就是在分布式项目中使用的锁，控制分布式系统同步访问共享资源。&lt;/p&gt;
&lt;h3 id=&quot;分布式锁需要满足的特性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分布式锁需要满足的特性&quot;&gt;&lt;/a&gt; 分布式锁需要满足的特性：&lt;/h3&gt;
&lt;p&gt;1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Redis主从架构数据同步原理</title>
    <link href="https://duanjiaojiao316.github.io/2021/04/25/Redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86/"/>
    <id>https://duanjiaojiao316.github.io/2021/04/25/Redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86/</id>
    <published>2021-04-25T15:11:33.000Z</published>
    <updated>2021-05-11T07:46:58.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis主从架构数据同步原理"><a class="markdownIt-Anchor" href="#redis主从架构数据同步原理"></a> <code>Redis</code>主从架构数据同步原理</h1><h2 id="主从架构如何保证数据一致性"><a class="markdownIt-Anchor" href="#主从架构如何保证数据一致性"></a> 主从架构如何保证数据一致性？</h2><p>读写分离。写操作只在主库，读执行操作主库和从库都可以执行。如果写操作可以在主库和从库进行，为了保持数据一致性就需要在<code>Redis</code>进行加锁，这样会减慢<code>Redis</code>的速度</p><h2 id="如何搭建主从复制架构三种方式"><a class="markdownIt-Anchor" href="#如何搭建主从复制架构三种方式"></a> 如何搭建主从复制架构？（三种方式）</h2><p>1、从服务器的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">replicaof &lt;masterip&gt; &lt;masterport&gt;</span><br></pre></td></tr></table></figure><p>2、启动</p><p><code>redis-server</code>启动命令<code>--replicaof &lt;masterip&gt; &lt;masterport&gt;</code></p><p>3、客户端命令</p><p>启动多个 <code>Redis</code>实例后，直接通过客户端执行命令：<code>replicaof &lt;masterip&gt; &lt;masterport&gt;</code>，则该 <code>Redis</code> 实例成为从节点。</p><h2 id="主从第一次全量复制"><a class="markdownIt-Anchor" href="#主从第一次全量复制"></a> 主从第一次全量复制</h2><p>三个阶段：建立连接、主库同步数据给从库、发送新的写命令给从库。</p><p><img src="/2021/04/25/Redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86/Redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%E8%BF%87%E7%A8%8B%E5%9B%BE.png" alt="Redis主从架构第一次全量复制过程图"></p><h3 id="第一阶段建立连接"><a class="markdownIt-Anchor" href="#第一阶段建立连接"></a> 第一阶段建立连接</h3><p><strong>从库会和主库建立连接，从库执行<code>replicaof</code> 并发送<code>psync</code> 命令并告诉主库即将进行同步，主库确认回复后，主从库间就开始同步了</strong>。</p><p>从节点内部维护了两个字段，<code>masterhost</code> 和 <code>masterport</code>，用于存储主节点的 IP 和 port 信息。</p><p>从库执行 <code>replicaof</code> 并发送 <code>psync</code> 命令，表示要执行数据同步，主库收到命令后根据参数启动复制。命令包含了<strong>主库的 <code>runID</code></strong> 和 <strong>复制进度 <code>offset</code></strong> 两个参数。</p><ul><li><strong><code>runID</code></strong>：每个 <code>Redis</code> 实例启动都会自动生成一个 唯一标识 ID，第一次主从复制，还不知道主库 <code>runID</code>，参数设置为 「?」。</li><li><strong><code>offset</code></strong>：第一次复制设置为 -1，表示第一次复制，记录复制进度偏移量。</li></ul><p>主库收到<code>psync</code>命令后，会用 <strong><code>FULLRESYNC</code> 响应命令带上两个参数：主库 <code>runID</code> 和主库目前的复制进度<code>offset</code>，返回给从库</strong>。从库收到响应后，会记录下这两个参数。</p><p><strong><code>FULLRESYNC</code> 响应表示第一次复制采用的全量复制</strong>，也就是说，主库会把当前所有的数据都复制给从库。</p><h3 id="第二阶段发送同步数据"><a class="markdownIt-Anchor" href="#第二阶段发送同步数据"></a> 第二阶段发送同步数据</h3><p>master 执行 <code>bgsave</code>命令生成 RDB 文件，并将文件发送给从库，同时<strong>主库</strong>为每一个 slave 开辟一块 <strong>replication buffer</strong> 缓冲区记录从生成 RDB 文件开始收到的所有写命令。</p><p>从库收到 RDB 文件后保存到磁盘，并清空当前数据库的数据，再加载 RDB 文件数据到内存中。</p><h4 id="为什么清空从库的数据"><a class="markdownIt-Anchor" href="#为什么清空从库的数据"></a> 为什么清空从库的数据？</h4><p>因为从库在通过 <code>replcaof</code>命令开始和主库同步前可能保存了其他数据，防止主从数据之间的影响。</p><h3 id="第三阶段发送新命令到从库"><a class="markdownIt-Anchor" href="#第三阶段发送新命令到从库"></a> 第三阶段发送新命令到从库</h3><h4 id="replication-buffer-缓冲区存放数据"><a class="markdownIt-Anchor" href="#replication-buffer-缓冲区存放数据"></a> <strong>replication buffer</strong> 缓冲区存放数据</h4><blockquote><p>1）<code>master</code> 执行 <code>bgsave</code>产生 RDB 的期间的写操作；</p><p>2）<code>master</code> 发送<code>rdb</code> 到 <code>slave</code> 网络传输期间的写操作；</p><p>3）<code>slave load rdb</code> 文件把数据恢复到内存的期间的写操作。</p></blockquote><h4 id="replication-buffer-太小会引发的问题"><a class="markdownIt-Anchor" href="#replication-buffer-太小会引发的问题"></a> replication buffer 太小会引发的问题？</h4><p>replication buffer 由 client-output-buffer-limit slave 设置，当这个值太小会导致<strong>主从复制连接断开</strong>。</p><p>1）当 master-slave 复制连接断开，master 会释放连接相关的数据。replication buffer 中的数据也就丢失了，此时主从之间重新开始复制过程。</p><p>2）还有个更严重的问题，<strong>主从复制连接断开，导致主从上出现重新执行 <code>bgsave</code> 和 <code>rdb</code> 重传操作无限循环。</strong></p><p>当主节点数据量较大，或者主从节点之间网络延迟较大时，可能导致该缓冲区的大小超过了限制，此时主节点会断开与从节点之间的连接；</p><p>这种情况可能引起全量复制 -&gt; replication buffer 溢出导致连接中断 -&gt; 重连 -&gt; 全量复制 -&gt; replication buffer 缓冲区溢出导致连接中断……的循环。</p><p>具体详情：<code>[top redis headaches for devops – replication buffer]</code> 因而推荐把 replication buffer 的 hard/soft limit 设置成 512M。</p><h3 id="主从库复制为何不使用-aof-呢相比-rdb-来说丢失的数据更少-原因如下"><a class="markdownIt-Anchor" href="#主从库复制为何不使用-aof-呢相比-rdb-来说丢失的数据更少-原因如下"></a> 主从库复制为何不使用 AOF 呢？相比 RDB 来说，丢失的数据更少。原因如下：</h3><ol><li>RDB 文件是二进制文件，网络传输 RDB 和写入磁盘的 IO 效率都要比 AOF 高。</li><li>从库进行数据恢复的时候，RDB 的恢复效率也要高于 AOF。</li></ol><h2 id="增量复制"><a class="markdownIt-Anchor" href="#增量复制"></a> 增量复制</h2><p>在 <code>Redis 2.8</code> 之前，如果主从库在命令传播时出现了网络闪断，那么，从库就会和主库重新进行一次全量复制，开销非常大。</p><p>从 <code>Redis 2.8</code>开始，网络断了之后，主从库会采用增量复制的方式继续同步。</p><p>增量复制：<strong>用于网络中断等情况后的复制，只将中断期间主节点执行的写命令发送给从节点，与全量复制相比更加高效</strong>。</p><h3 id="repl_backlog_buffer-缓冲区"><a class="markdownIt-Anchor" href="#repl_backlog_buffer-缓冲区"></a> <code>repl_backlog_buffer</code> 缓冲区</h3><p>断开重连增量复制的实现奥秘就是 <code>repl_backlog_buffer</code> 缓冲区，不管在什么时候 master 都会将写指令操作记录在 <code>repl_backlog_buffer</code> 中，因为内存有限，<code>repl_backlog_buffer</code> 是一个定长的环形数组，<strong>如果数组内容满了，就会从头开始覆盖前面的内容</strong>。</p><p>master 使用 <code>master_repl_offset</code>记录自己写到的位置偏移量，slave 则使用<code>slave_repl_offset</code>记录已经读取到的偏移量。</p><p>master 收到写操作，偏移量则会增加。从库持续执行同步的写指令后，在 <code>repl_backlog_buffer</code> 的已复制的偏移量<code>slave_repl_offset</code> 也在不断增加。</p><p>正常情况下，这两个偏移量基本相等。在网络断连阶段，主库可能会收到新的写操作命令，所以 <code>master_repl_offset</code>会大于 <code>slave_repl_offset</code>。</p><p><img src="/2021/04/25/Redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86/%E5%A2%9E%E9%87%8F%E5%A4%8D%E5%88%B6repl_backlog_buffer.png" alt="增量复制repl_backlog_buffer"></p><h3 id="repl_backlog_buffer-太小的话从库还没读取到就被-master-的新写操作覆盖了咋办"><a class="markdownIt-Anchor" href="#repl_backlog_buffer-太小的话从库还没读取到就被-master-的新写操作覆盖了咋办"></a> <code>repl_backlog_buffer</code> 太小的话从库还没读取到就被 Master 的新写操作覆盖了咋办？</h3><p>一旦被覆盖就会执行全量复制。我们可以调整 <code>repl_backlog_size</code> 这个参数用于控制缓冲区大小。计算公式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repl_backlog_buffer = second * write_size_per_second</span><br></pre></td></tr></table></figure><ol><li><strong><code>second</code></strong>：从服务器断开重连主服务器所需的平均时间；</li><li><strong><code>write_size_per_second</code></strong>：master 平均每秒产生的命令数据量大小（写命令和数据大小总和）；</li></ol><p>例如，如果主服务器平均每秒产生 1 MB 的写数据，而从服务器断线之后平均要 5 秒才能重新连接上主服务器，那么复制积压缓冲区的大小就不能低于 5 MB。</p><p>为了安全起见，可以将复制积压缓冲区的大小设为<code>2 * second * write_size_per_second</code>，这样可以保证绝大部分断线情况都能用部分重同步来处理。</p><h3 id="基于长连接的命令传播"><a class="markdownIt-Anchor" href="#基于长连接的命令传播"></a> 基于长连接的命令传播</h3><p>当主从库完成了全量复制，它们之间就会一直维护一个网络连接，主库会通过这个连接将后续陆续收到的命令操作再同步给从库，这个过程也称为基于长连接的命令传播，使用长连接的目的就是避免频繁建立连接导致的开销。</p><p>在命令传播阶段，除了发送写命令，主从节点还维持着心跳机制：<strong>PING 和 REPLCONF ACK。</strong></p><p><strong>主-&gt;从：PING</strong></p><p>每隔指定的时间，<strong>主节点会向从节点发送 PING 命令</strong>，这个 PING 命令的作用，主要是为了让从节点进行超时判断。</p><p><strong>从-&gt;主：REPLCONF ACK</strong></p><p>在命令传播阶段，从服务器默认会以每秒一次的频率，向主服务器发送命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLCONF ACK &lt;replication_offset&gt;</span><br></pre></td></tr></table></figure><p>其中 replication_offset 是从服务器当前的复制偏移量。发送 REPLCONF ACK 命令对于主从服务器有三个作用：</p><ol><li>检测主从服务器的网络连接状态。</li><li>辅助实现 min-slaves 选项。</li><li>检测命令丢失, 从节点发送了自身的 slave_replication_offset，主节点会用自己的 master_replication_offset 对比，如果从节点数据缺失，主节点会从 <code>repl_backlog_buffer</code>缓冲区中找到并推送缺失的数据。<strong>注意，offset 和 <code>repl_backlog_buffer</code> 缓冲区，不仅可以用于部分复制，也可以用于处理命令丢失等情形；区别在于前者是在断线重连后进行的，而后者是在主从节点没有断线的情况下进行的。</strong></li></ol><p><img src="/2021/04/25/Redis%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E5%8E%9F%E7%90%86/Redis%E9%95%BF%E8%BF%9E%E6%8E%A5%E8%BF%87%E7%A8%8B.png" alt="Redis长连接过程"></p><ol><li><p>从节点根据当前状态，发送 <code>psync</code>命令给 master：</p></li><li><ul><li>如果从节点从未执行过 <code>replicaof</code> ，则从节点发送 <code>psync ? -1</code>，向主节点发送全量复制请求；</li><li>如果从节点之前执行过 <code>replicaof</code> 则发送 <code>psync &lt;runID&gt; &lt;offset&gt;</code>,<code>runID</code>是上次复制保存的主节点 <code>runID</code>，offset 是上次复制截至时从节点保存的复制偏移量。</li></ul></li><li><p>主节点根据接受到的<code>psync</code>命令和当前服务器状态，决定执行全量复制还是部分复制：</p></li><li><ul><li><code>runID</code> 与从节点发送的<code>runID</code> 相同，且从节点发送的 <code>slave_repl_offset</code>之后的数据在 <code>repl_backlog_buffer</code>缓冲区中都存在，则回复 <code>CONTINUE</code>，表示将进行部分复制，从节点等待主节点发送其缺少的数据即可；</li><li><code>runID</code> 与从节点发送的<code>runID</code>不同，或者从节点发送的 <code>slave_repl_offset</code> 之后的数据已不在主节点的 <code>repl_backlog_buffer</code>缓冲区中 (在队列中被挤出了)，则回复从节点 <code>FULLRESYNC &lt;runid&gt; &lt;offset&gt;</code>，表示要进行全量复制，其中<code>runID</code> 表示主节点当前的 <code>runID</code>，offset 表示主节点当前的 offset，从节点保存这两个值，以备使用。</li></ul></li></ol><p>一个从库如果和主库断连时间过长，造成它在主库 <code>repl_backlog_buffer</code>的 <code>slave_repl_offset</code> 位置上的数据已经被覆盖掉了，此时从库和主库间将进行全量复制。</p><h2 id="replication-buffer-和-repl_backlog"><a class="markdownIt-Anchor" href="#replication-buffer-和-repl_backlog"></a> <code>replication buffer</code> 和 <code>repl_backlog</code></h2><ol><li>replication buffer 对应于每个 slave，通过 <code>config set client-output-buffer-limit slave</code>设置。</li><li><code>repl_backlog_buffer</code>是一个环形缓冲区，整个 master 进程中只会存在一个，所有的 slave 公用。<code>repl_backlog</code> 的大小通过 <code>repl-backlog-size</code>参数设置，默认大小是 1M，其大小可以根据每秒产生的命令、（master 执行 <code>rdb bgsave</code>） +（ <code>master</code> 发送 <code>rdb</code> 到 slave） + （<code>slave load rdb</code>文件）时间之和来估算积压缓冲区的大小，<code>repl-backlog-size</code> 值不小于这两者的乘积。</li></ol><p>总的来说，<code>replication buffer</code> 是主从库在进行全量复制时，主库上用于和从库连接的客户端的 buffer，而 r<code>epl_backlog_buffer</code> 是为了支持从库增量复制，主库上用于持续保存写操作的一块专用 buffer。</p><p><code>repl_backlog_buffer</code>是一块专用 buffer，在 <code>Redis</code> 服务器启动后，开始一直接收写操作命令，这是所有从库共享的。主库和从库会各自记录自己的复制进度，所以，不同的从库在进行恢复时，会把自己的复制进度（<code>slave_repl_offset</code>）发给主库，主库就可以和它独立同步。</p><p>![replication buffer和repl_backlog](Redis主从架构数据同步原理/replication buffer和repl_backlog.png)</p><h2 id="主从架构应用问题"><a class="markdownIt-Anchor" href="#主从架构应用问题"></a> 主从架构应用问题</h2><h3 id="主从复制的场景下从节点会删除过期数据么"><a class="markdownIt-Anchor" href="#主从复制的场景下从节点会删除过期数据么"></a> 主从复制的场景下，从节点会删除过期数据么？</h3><p>为了主从节点的数据一致性，从节点不会主动删除数据。我们知道 <code>Redis</code> 有两种删除策略：</p><ol><li>惰性删除：当客户端查询对应的数据时，<code>Redis</code> 判断该数据是否过期，过期则删除。</li><li>定期删除：<code>Redis</code> 通过定时任务删除过期数据。</li></ol><h3 id="客户端通过从节点读取数据会不会读取到过期数据"><a class="markdownIt-Anchor" href="#客户端通过从节点读取数据会不会读取到过期数据"></a> 客户端通过从节点读取数据会不会读取到过期数据？</h3><p><code>Redis 3.2</code>开始，通过从节点读取数据时，先判断数据是否已过期。如果过期则不返回客户端，并且删除数据。</p><h3 id="单机内存大小限制"><a class="markdownIt-Anchor" href="#单机内存大小限制"></a> 单机内存大小限制</h3><p>如果<code>Redis</code> 单机内存达到 10GB，一个从节点的同步时间在几分钟的级别；如果从节点较多，恢复的速度会更慢。如果系统的读负载很高，而这段时间从节点无法提供服务，会对系统造成很大的压力。</p><p>如果数据量过大，全量复制阶段主节点 fork + 保存 RDB 文件耗时过大，从节点长时间接收不到数据触发超时，主从节点的数据同步同样可能陷入<strong>全量复制-&gt;超时导致复制中断-&gt;重连-&gt;全量复制-&gt;超时导致复制中断</strong>……的循环。</p><p>此外，主节点单机内存除了绝对量不能太大，其占用主机内存的比例也不应过大：最好只使用 50% - 65% 的内存，留下 30%-45% 的内存用于执行<code>bgsave</code> 命令和创建复制缓冲区等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;redis主从架构数据同步原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#redis主从架构数据同步原理&quot;&gt;&lt;/a&gt; &lt;code&gt;Redis&lt;/code&gt;主从架构数据同步原理&lt;/h1&gt;
&lt;h2 id=&quot;主从架构如何保证数据一致性&quot;&gt;</summary>
      
    
    
    
    <category term="数据库" scheme="https://duanjiaojiao316.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://duanjiaojiao316.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>有关回文的编程题总结</title>
    <link href="https://duanjiaojiao316.github.io/2021/03/11/%E6%9C%89%E5%85%B3%E5%9B%9E%E6%96%87%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://duanjiaojiao316.github.io/2021/03/11/%E6%9C%89%E5%85%B3%E5%9B%9E%E6%96%87%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-11T13:09:05.000Z</published>
    <updated>2021-04-20T07:44:33.823Z</updated>
    
    <content type="html"><![CDATA[<h3 id="有关回文的编程题总结"><a class="markdownIt-Anchor" href="#有关回文的编程题总结"></a> 有关回文的编程题总结</h3><h4 id="题目一给定一个字符串-s找到-s-中最长的回文子串-你可以假设-s-的最大长度为-1000"><a class="markdownIt-Anchor" href="#题目一给定一个字符串-s找到-s-中最长的回文子串-你可以假设-s-的最大长度为-1000"></a> 题目一：给定一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。你可以假设 <code>s</code> 的最大长度为 1000。</h4><h5 id="解法一中心扩展法"><a class="markdownIt-Anchor" href="#解法一中心扩展法"></a> 解法一：中心扩展法</h5><p>使用中心扩展法：由于回文字符串有可能是偶数个字符，也有可能是奇数个字符，所以回文子串的中心有可能是一个字符也有可能是字符中间位置。所以需要遍历字符串s的左右中心点，判断是否为回文子串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = left;</span><br><span class="line"><span class="keyword">int</span> r = right;</span><br><span class="line">        <span class="comment">//由中心向两边延伸，两端字符相同继续延伸，不相同则返回回文子串的长度。</span></span><br><span class="line"><span class="keyword">while</span>(l &gt;= <span class="number">0</span> &amp;&amp; r &lt; s.length() &amp;&amp; s.charAt(l)==s.charAt(r))&#123;</span><br><span class="line">l--;</span><br><span class="line">r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r-l-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.length() &lt; <span class="number">1</span> || s == <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class="line"><span class="keyword">int</span> len1 = expandAroundCenter(s, i, i) ;<span class="comment">//回文子串中心为i位置的字符</span></span><br><span class="line"><span class="keyword">int</span> len2 = expandAroundCenter(s, i, i+<span class="number">1</span>);<span class="comment">//回文中心在i位置字符和i+1位置字符之间</span></span><br><span class="line"><span class="keyword">int</span> len = Math.max(len1, len2);<span class="comment">//求出两种中心状态下最长的字符串长度</span></span><br><span class="line"><span class="keyword">if</span>(len &gt; end-start)&#123;</span><br><span class="line">                <span class="comment">//求出回文子串的首位部分</span></span><br><span class="line">start = i - (len-<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">end = i + len/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.substring(start,end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner input = <span class="keyword">new</span> Scanner (System.in);</span><br><span class="line">String s = input.nextLine();</span><br><span class="line">System.out.println(longestPalindrome(s));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="解法二暴力算法"><a class="markdownIt-Anchor" href="#解法二暴力算法"></a> 解法二：暴力算法</h5><p>暴力算法</p><p>暴力法将选出所有子字符串可能的开始和结束位置，并检验它是不是回文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                String temp1 = s.substring(i,j);</span><br><span class="line">                String temp2 = reverse(temp1);</span><br><span class="line">                <span class="keyword">if</span>(temp1.equals(temp2) &amp;&amp; result.length()&lt;temp1.length())&#123;</span><br><span class="line">                    result = temp1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用StringBuilder或者StringBuffer的reverse方法实现String的反转</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> s反转后的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">reverse</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(s).reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解法三动态规划"><a class="markdownIt-Anchor" href="#解法三动态规划"></a> 解法三：动态规划</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> [][] p = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()];</span><br><span class="line">        String maxPalindrome = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>; start &lt; s.length(); start++) &#123;</span><br><span class="line">                <span class="keyword">int</span> end = start + i;</span><br><span class="line">                <span class="keyword">if</span> (end &gt;= s.length())&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//i==0和i==1是初始化单个回文字符串和两个字符的回文字符串</span></span><br><span class="line">                p[start][end] = (i == <span class="number">0</span> || i == <span class="number">1</span> || p[start + <span class="number">1</span>][end - <span class="number">1</span>]) &amp;&amp; s.charAt(start) == s.charAt(end);</span><br><span class="line">                <span class="keyword">if</span> (p[start][end] &amp;&amp; i &gt; maxPalindrome.length()) &#123;</span><br><span class="line">                    maxPalindrome = s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxPalindrome;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题目二判断一个整数是否是回文数-回文数是指正序从左向右和倒序从右向左读都是一样的整数"><a class="markdownIt-Anchor" href="#题目二判断一个整数是否是回文数-回文数是指正序从左向右和倒序从右向左读都是一样的整数"></a> 题目二：判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</h4><p>要考虑负数，个位数是0的数字直接就不是回文数字</p><p>我们获取数字的一半，反转后半部分的一半，如果和前半部分相似就确定为回文数字</p><p>关于奇数位的数字，通过最后<code>partlyNumber/10==x;</code>除以10将中间的位数去掉，因为中间的数字一定等于其本身，不影响其是不是回文数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>||(x!=<span class="number">0</span>&amp;&amp; x%<span class="number">10</span>==<span class="number">0</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> partlyNumber = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x &gt; partlyNumber)&#123;</span><br><span class="line">                partlyNumber = partlyNumber*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">                x/= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> partlyNumber==x||partlyNumber/<span class="number">10</span>==x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;有关回文的编程题总结&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#有关回文的编程题总结&quot;&gt;&lt;/a&gt; 有关回文的编程题总结&lt;/h3&gt;
&lt;h4 id=&quot;题目一给定一个字符串-s找到-s-中最长的回文子串-你可以假设-s-的最大长度为-10</summary>
      
    
    
    
    <category term="基础算法" scheme="https://duanjiaojiao316.github.io/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="回文" scheme="https://duanjiaojiao316.github.io/tags/%E5%9B%9E%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>关于YARN——基础知识</title>
    <link href="https://duanjiaojiao316.github.io/2021/03/09/%E5%85%B3%E4%BA%8EYARN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://duanjiaojiao316.github.io/2021/03/09/%E5%85%B3%E4%BA%8EYARN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2021-03-09T13:56:09.000Z</published>
    <updated>2021-05-11T07:46:36.145Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是yarn"><a class="markdownIt-Anchor" href="#1-什么是yarn"></a> 1、什么是YARN</h3><p>YARN是Hadoop的集群资源管理系统，在Hadoop 2被引入，为了盖上MapReduce的实现。YARN提供请求和使用资源的API，这些API向用户隐藏了资源管理的细节。一些分布式计算框架MapReduce、spark运行在YARN和存储层HDFS/HBase上。</p><p>集群层次框架：</p><table><thead><tr><th>Upper Application</th><th>Pig/Hive/Crunch</th></tr></thead><tbody><tr><td>Application</td><td><code>MapReduce</code>/<code>Spark</code>/<code>Tez</code> /…</td></tr><tr><td>Compute</td><td>YARN</td></tr><tr><td>Storage</td><td>HDFS and HBase</td></tr></tbody></table><p>YARN通过两类长期运行的守护进程提供自己的服务</p><blockquote><p>资源管理器：管理集群上资源使用</p><p>节点管理器：运行在集群的所有节点上，启动和监控容器</p></blockquote><p>container 容器：执行job进程，容器有资源限制(内存，CPU等)，具体容器取决于YARN配置</p><h3 id="2-yarn的运行机制"><a class="markdownIt-Anchor" href="#2-yarn的运行机制"></a> 2、YARN的运行机制：</h3><img src="/2021/03/09/%E5%85%B3%E4%BA%8EYARN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/201806211939097.jpg" alt="img" style="zoom:67%;"><ol><li><p>首先客户端请求RM，运行一个application master</p></li><li><p>RM找到可以在容器中启动application master的NM，在NM启动容器，运行application master</p></li><li><p>容器通过心跳机制向RM请求运行资源(内存和CPU)</p></li><li><p>application master运行起来之后需要做什么依赖于客户端传递的应用</p></li></ol><p>a. 简单地运算后直接返回结果给客户端</p><p>b. 请求更多容器进行分布式计算</p><h4 id="yarn通信手段"><a class="markdownIt-Anchor" href="#yarn通信手段"></a> YARN通信手段：</h4><p>YARN不提供任何手段用于应用各部分(客户端/application master/进程)通信，使用**具体应用的远程通信机制(如Hadoop的RPC层)**来向客户端返回状态和结果</p><h4 id="yarn资源请求的灵活性"><a class="markdownIt-Anchor" href="#yarn资源请求的灵活性"></a> YARN资源请求的灵活性：</h4><ol><li><p>指定每个容器的计算机资源数量(内存和CPU)</p></li><li><p>容器的本地限制要求，可以申请指定节点，机架或集群中任意位置(包含集群外)的容器</p></li><li><p>可以在运行中的任意时刻请求资源，可以一开始请求所有资源(Spark)；也可以动态申请，随着应用程序的运行而动态地请求(MapReduce先请求Map任务资源，后请求Reduce任务资源）</p></li></ol><h4 id="应用生命期-三种模型"><a class="markdownIt-Anchor" href="#应用生命期-三种模型"></a> 应用生命期-三种模型</h4><p>这里的应用指的是application master，用来处理job的YARN的应用进程</p><ol><li><p>一个用户作业对应一个application master（MapReduce）</p></li><li><p>作业的每个工作流或者每个用户对话对应一个application master</p></li></ol><p>效率高，容器可以在作业之间重用，可能缓存中间数据，Spark使用这种模型</p><ol start="3"><li>多个用户共享一个长期运行的应用</li></ol><p>这种application master作为协调者身份运行，一个always on的application master，则无需启动新的application master，低开销，低响应延迟</p><h3 id="3-yarn的调度"><a class="markdownIt-Anchor" href="#3-yarn的调度"></a> 3、YARN的调度</h3><p>YARN调度器根据既定策略为应用分配资源，由于调度难题没有所谓”最好“的策略，YARN提供多种调度器和可配置策略。</p><h4 id="yarn三种调度器"><a class="markdownIt-Anchor" href="#yarn三种调度器"></a> YARN三种调度器</h4><p>1）FIFO调度器（FIFO Scheduler）：应用放置在一个队列中，按照作业提交的顺序运行</p><p>2）容量调度器（Capacity Scheduler）：独立的专门队列保证小作业也可以提交后就启动，队列容量是专门保留的，以整个集群的利用率为代价，与FIFO比，大作业执行的时间要长</p><p>3）公平调度器（Fair Scheduler）：不需要预留一定的资源，调度器会在所有的运行的作业之间动态平衡资源，第一个（大）作业启动时，他是唯一运行的作业所以获得集群中的所有资源，当第二个作业启动时，它被分配到集群的一半资源，每个作业都能公平共享资源。</p><p>第二个作业从启动到获得资源会有一定的时间滞后，它必须等第一个大作业使用的容器用完并释放资源，小作业结束并且不再使用资源之后，大作业将回去再次使用全部的资源。最终的效果：既得到了较高的集群利用率，又能保证小作业及时完成</p><img src="/2021/03/09/%E5%85%B3%E4%BA%8EYARN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20180621201207617" alt="img" style="zoom: 80%;"><hr><h4 id="容量调度器配置"><a class="markdownIt-Anchor" href="#容量调度器配置"></a> 容量调度器配置</h4><p>容量调度器允许多个组织共享一个Hadoop集群，每个组织可以分配到全部集群资源的一部分。每个组织有一个专门的队列，每个队列被配置使用集群的一定资源。队列也可以按照层次进一步划分，这样每个组织内部的不同用户能共享该组织队列的全部资源，在一个队列中采取FIFO调度策略。</p><p>如果队列中有多个作业，队列资源不够，此时如果其他队列有空闲的资源，容量调度器会把空闲的资源分配给队列中的作业，会超出队列容量。这种成为弹性队列。</p><p>正常操作时不会出现抢占队列资源，如果队列资源不够用，需要等其他队列释放容器资源。</p><p>为队列设置自最大容量限制，这样队列就不会过多的侵占其他队列的容量，这种方法以牺牲弹性队列为代价防止过多侵占。</p><p>假设一个队列层次</p><p><img src="/2021/03/09/%E5%85%B3%E4%BA%8EYARN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210310213545443.png" alt="image-20210310213545443"></p><p>root队列下，prod和dev队列分别占40%和60%的容量。配置文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.queues<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>prod,dev<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.dev.queues<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>eng,science<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.prod.capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>40<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.dev.capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>60<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.dev.maximum-capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>75<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.dev.eng.capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>50<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.capacity.root.dev.science.capacity<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>50<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>dev</code>队列最大容量设置为75%，其实<code>prod</code>队列是空闲的，dev队列也不会占用全部的集群资源。<code>prod</code>队列使用的资源占比总能达到25%。由于没有对<code>eng</code>和<code>science</code>队列的最大容量进行限制，其中一个队列中的作业可能会占用<code>dev</code>队列中的所有资源（相当于全部集群资源的75%），而<code>prod</code>队列可以占用集群的全部资源。</p><p>通过<code>mapreduce.job.queuename</code>属性设置应用的队列，不指定应用将放在名为<code>“default”</code>的默认队列中。</p><p>在容量调度器，队列的名字是队列层次的最后一部分，完整队列层次名不会被识别。</p><p><code>prod</code>和<code>dev</code>是合法的队列名，<code>root.dev.eng</code>作为队列名无效。</p><hr><h4 id="公平调度器配置"><a class="markdownIt-Anchor" href="#公平调度器配置"></a> 公平调度器配置</h4><p>假如有A和B两个用户，分别拥有队列<code>queueA</code>和队列<code>queueB</code>，A启动一个作业，B此时没有需求，A会分到队列的全部资源，当A还在运行，B启动第一个作业，将占用一半资源，此时如果B启动第二个作业，其他的作业都还在运行，第二个作业将和B共享资源，获取队列B的一半资源。</p><p><img src="/2021/03/09/%E5%85%B3%E4%BA%8EYARN%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/image-20210310221541899.png" alt="image-20210310221541899"></p><h5 id="1-启动公平调度器"><a class="markdownIt-Anchor" href="#1-启动公平调度器"></a> 1、启动公平调度器</h5><p>公平调度器的使用由属性<code>yarn.resourcemanager.scheduler.class</code> 的设置所决定。默认是使用 Capacity Scheduler (尽管在一些Hadoop分布式项目， 如CDH中是默认使用 <code>Fair Scheduler</code>)，如果要使用 <code>Fair Scheduler</code>，需要修改<code>yarn-site.xml</code> 文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">         org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FairScheduler</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-队列配置"><a class="markdownIt-Anchor" href="#2-队列配置"></a> 2、队列配置</h5><p>通过一个名为<code>fair-scheduler.xml</code>的分配文件对 <code>Fair Scheduler</code> 进行配置， 该文件位于类路径下。(可以通过设置属性<code>yarn.scheduler.fair.allocation.file</code>来修改文件名) 。当没有该分配文件时，<code>Fair Scheduler</code>的工作策略同先前所描述的一样：每个应用放置在一个以用户名命名的队列中，队列是在用户提交第一个应用时动态创建的。</p><p>通过分配文件可以为每个队列进行配置。这样可以对 Fair Scheduler 支持的层次队列进行配置。 例如，可以像为<code>Capacity Scheduler</code>所做的那样，使用分配文件定义 prod 和 dev。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">allocations</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defaultQueueSchedulingPolicy</span>&gt;</span>fair<span class="tag">&lt;/<span class="name">defaultQueueSchedulingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">queue</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">weight</span>&gt;</span>40<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">schedulingPolicy</span>&gt;</span>fifo<span class="tag">&lt;/<span class="name">schedulingPolicy</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">queue</span> <span class="attr">name</span>=<span class="string">&quot;dev&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">weight</span>&gt;</span>60<span class="tag">&lt;/<span class="name">weight</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">queue</span> <span class="attr">name</span>=<span class="string">&quot;eng&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">queue</span> <span class="attr">name</span>=<span class="string">&quot;science&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">queue</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">queuePlacementPolicy</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;specified&quot;</span> <span class="attr">create</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;primaryGroup&quot;</span> <span class="attr">create</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span> <span class="attr">queue</span>=<span class="string">&quot;dev.eng&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">queuePlacementPolicy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">allocations</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、队列放置</p><ol><li><p>使用基于规则的系统确定job队列放置，匹配对应的用户队列直到使用default队列</p></li><li><p>直接就使用default，所有job公平分配</p></li></ol><p>第一条规则， specified， 表示把应用放进所指明的队列中， 如果没有指明，或如果所指明的队列不存在，则规则不匹配，继续尝试下一条规则。</p><p>primary Group规则会试着把应用放在以用户的主Unix组名命名的队列中，如果没有这样的队列， 则继续尝试下一条规则而不是创建队列。</p><p>Defahult规则是 一条兜底规则， 当前述规则都不匹配时， 将启用该条规则， 把应用放进 <code>dev.eng</code> 队列中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-什么是yarn&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-什么是yarn&quot;&gt;&lt;/a&gt; 1、什么是YARN&lt;/h3&gt;
&lt;p&gt;YARN是Hadoop的集群资源管理系统，在Hadoop 2被引入，为了盖上MapReduce的实现。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>VAEs变分自编码器</title>
    <link href="https://duanjiaojiao316.github.io/2021/03/09/VAEs%E5%8F%98%E5%88%86%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8/"/>
    <id>https://duanjiaojiao316.github.io/2021/03/09/VAEs%E5%8F%98%E5%88%86%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8/</id>
    <published>2021-03-09T02:30:11.000Z</published>
    <updated>2021-04-20T07:44:33.812Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic2.zhimg.com/v2-64258f442ae9b2b0e37616183886828d_r.jpg" alt="preview"></p><h3 id="ae自编码器"><a class="markdownIt-Anchor" href="#ae自编码器"></a> AE自编码器</h3><p>首先了解自编码器AE。Auto Encoder是一种自监督的神经网络，它学习如何将输入编码为更低的维数，然后再次解码和重构数据以尽可能有效地接近输入。</p><blockquote><p>Autoencoder由3个部分组成:</p><ul><li>编码器，将输入数据编码为较低维表示的层。</li><li>压缩层，包含编码/压缩表示的最低维数的层。也被称为瓶颈。</li><li>译码器，学会解码或重新构造编码表示到数据的层接近输入数据。</li></ul></blockquote><p>为了学习最好的编码和解码，自编码器的目标是使重构误差最小化，重构误差基本上是重构数据和输入数据之间的差值。<strong>L2(平方)重构损失</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>R</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>L</mi><mi>o</mi><mi>s</mi><mi>s</mi><mo>=</mo><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>I</mi><mi>n</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo>−</mo><mi>R</mi><mi>e</mi><mi>c</mi><mi>o</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi><mi>u</mi><mi>c</mi><mi>t</mi><mi>e</mi><mi>d</mi><mi>O</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi><mi mathvariant="normal">∣</mi><msup><mi mathvariant="normal">∣</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">Recontructed Loss = ||Input-Reconstructed Output||^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8641079999999999em;"></span><span class="strut bottom" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mord mathit">e</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">u</span><span class="mord mathit">c</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">d</span><span class="mord mathit">L</span><span class="mord mathit">o</span><span class="mord mathit">s</span><span class="mord mathit">s</span><span class="mrel">=</span><span class="mord mathrm">∣</span><span class="mord mathrm">∣</span><span class="mord mathit" style="margin-right:0.07847em;">I</span><span class="mord mathit">n</span><span class="mord mathit">p</span><span class="mord mathit">u</span><span class="mord mathit">t</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mord mathit">e</span><span class="mord mathit">c</span><span class="mord mathit">o</span><span class="mord mathit">n</span><span class="mord mathit">s</span><span class="mord mathit">t</span><span class="mord mathit" style="margin-right:0.02778em;">r</span><span class="mord mathit">u</span><span class="mord mathit">c</span><span class="mord mathit">t</span><span class="mord mathit">e</span><span class="mord mathit">d</span><span class="mord mathit" style="margin-right:0.02778em;">O</span><span class="mord mathit">u</span><span class="mord mathit">t</span><span class="mord mathit">p</span><span class="mord mathit">u</span><span class="mord mathit">t</span><span class="mord mathrm">∣</span><span class="mord"><span class="mord mathrm">∣</span><span class="vlist"><span style="top:-0.413em;margin-right:0.05em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span></span></p><blockquote><p>自动编码器功能:</p><ul><li><strong>去噪</strong>:为了使自动编码器学会去噪图像，我们使用一个损坏或有噪声的图像作为输入，然后修改重建损失，使重建输出与原始干净的图像之间的差异最小，而不是损坏的输入。编码器的目标是只编码有用的特征，因此，随机噪声应在重建过程中丢失。</li><li><strong>降维</strong>:通过使用输出层比输入层有更少维数的“不完全”自动编码器，自动编码器能够在更低维数的情况下非线性地表示数据，这与有限的线性变换的PCA(主成分分析)方法形成对比。</li></ul></blockquote><p>使用Autoencoder生成新数据背后的想法是通过修改编码的数据(潜在向量)，我们应该能够得到不同于输入的数据。为了简化这一点，让我们想象一下这样的场景:您试图将一些图像编码为2d编码，如下所示。</p><p><img src="/2021/03/09/VAEs%E5%8F%98%E5%88%86%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8/2D%E6%BD%9C%E5%9C%A8%E7%A9%BA%E9%97%B41" alt="image-20210309105235878"></p><p>为了生成一个新的图像，我们可以简单地从上面的潜在空间中采样一个点。例如，如果我们对狗和鸟之间的一个点进行采样，我们可能能够得到一张鸟和狗杂交的图像，或者一种新的动物。</p><p><img src="/2021/03/09/VAEs%E5%8F%98%E5%88%86%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8/v2-66cb235bbd149441f701083e3a9986ff_1440w.jpg" alt="img"></p><p>然而，编码器生成的向量(编码)往往是不规则的、无组织的或不可解释的，因为它的目的只是重构尽可能相似的输入，而本身没有任何约束。因此，它不关心如何编码数据，只要它能完美地重构输入。</p><p>不规则潜在空间的随机点可能会产生无意义的结果</p><p>由于自动编码器模型可以自由地编码潜在向量，潜在空间可能会有很多区域，其中的空白区域会产生随机/不可解释的输出，如图中的空白区域所示。相反，我们希望具有有意义输出的潜在空间区域是连续的，而不是像下图那样是分开的，这样可以方便地在不同属性之间进行插值。</p><p><img src="/2021/03/09/VAEs%E5%8F%98%E5%88%86%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8/v2-7cd26d053699aac122dfa2898f8bcec6_r.jpg" alt="preview"></p><p>要获得具有良好性质的潜在空间，必须正则化返回的分布。因此，可变自动编码器试图通过添加调节器来解决这一问题，避免过拟合，并确保潜在空间具有良好的连续性特征，使生成过程成为可能。</p><h3 id="vaes变分自编码器"><a class="markdownIt-Anchor" href="#vaes变分自编码器"></a> VAEs变分自编码器</h3><p>可变自动编码器以概率方式(分布)编码输入的潜在属性，而不是像普通的自动编码器那样以确定性方式(单值)编码。</p><p><img src="/2021/03/09/VAEs%E5%8F%98%E5%88%86%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8/v2-7a53a2c8c8c42f077be8d0d4e6239a86_r.jpg" alt="preview"></p><p>想象一下上面的例子，自动编码器将图像编码为表示照片中的微笑的潜在属性(注意，在真实的训练中，我们不知道每个属性实际表示什么)。普通的自动编码器将为潜属性提供一个值，但变分自动编码器将潜属性存储为属性的概率分布，如上面的右图所示。</p><p><img src="/2021/03/09/VAEs%E5%8F%98%E5%88%86%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8/v2-943ab88dd545a90326fbe9a93947c743_r.jpg" alt="preview"></p><p>现在，由于我们有了每个属性的概率分布，我们可以简单地从分布中<strong>抽取任何值</strong>来生成一个新的输出。</p><p>我知道VAE将潜在变量存储为概率分布时我首先想到的问题是如何存储一个分布。我们假设潜在分布总是高斯分布。高斯分布可以很容易地用两个值来描述，即均值和方差或标准差(您可以从方差计算出标准差)。</p><h5 id="数学基础"><a class="markdownIt-Anchor" href="#数学基础"></a> 数学基础</h5><h6 id="熵entropy"><a class="markdownIt-Anchor" href="#熵entropy"></a> 熵Entropy</h6><p>假设p(x)是一个分布函数，满足在x上的积分为1，那么p(x)的熵定义为H(p(x))，简写H§。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo>(</mo><mi>p</mi><mo>)</mo><mo>=</mo><mo>∫</mo><mi>p</mi><mo>(</mo><mi>x</mi><mo>)</mo><mi>l</mi><mi>o</mi><mi>g</mi><mfrac><mrow><mn>1</mn></mrow><mrow><mi>p</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">H(p) = \int p(x)log\frac{1}{p(x)}dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.36em;"></span><span class="strut bottom" style="height:2.2960000000000003em;vertical-align:-0.936em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathit">p</span><span class="mclose">)</span><span class="mrel">=</span><span class="op-symbol large-op mop" style="margin-right:0.44445em;top:-0.0011249999999999316em;">∫</span><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mord mathit" style="margin-right:0.01968em;">l</span><span class="mord mathit">o</span><span class="mord mathit" style="margin-right:0.03588em;">g</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span></span></span></span><span style="top:-0.2300000000000001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mord mathit">d</span><span class="mord mathit">x</span></span></span></span></span></p><p>分布函数越分散熵越大，分布函数越集中熵越小。</p><h6 id="交叉熵cross-entropy"><a class="markdownIt-Anchor" href="#交叉熵cross-entropy"></a> 交叉熵Cross-Entropy</h6><p>假设两个分布函数p(x)和q(x)，那么交叉熵定义为H(p,q)。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo>(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo>)</mo><mo>=</mo><mo>∫</mo><mi>p</mi><mo>(</mo><mi>x</mi><mo>)</mo><mfrac><mrow><mn>1</mn></mrow><mrow><mi>q</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow></mfrac><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">H(p,q) = \int p(x)\frac{1}{q(x)}dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.36em;"></span><span class="strut bottom" style="height:2.2960000000000003em;vertical-align:-0.936em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathit">p</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mrel">=</span><span class="op-symbol large-op mop" style="margin-right:0.44445em;top:-0.0011249999999999316em;">∫</span><span class="mord mathit">p</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span><span class="mord reset-textstyle displaystyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.686em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle cramped"><span class="mord textstyle cramped"><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathit">x</span><span class="mclose">)</span></span></span></span><span style="top:-0.2300000000000001em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.677em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped"><span class="mord textstyle uncramped"><span class="mord mathrm">1</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span><span class="mord mathit">d</span><span class="mord mathit">x</span></span></span></span></span></p><p>交叉熵的小大评价了两个分布函数的相似与否。交叉熵小分布相似，交叉熵大分布不相似。</p><h6 id="kl散度"><a class="markdownIt-Anchor" href="#kl散度"></a> KL散度</h6><p>假设p(x)和q(x)是两个分布函数，KL散度的小大评价了两个分布函数的相似与否，并且考虑了p(x)分布的信息量</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mi>L</mi><mo>(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo>)</mo><mo>=</mo><mi>H</mi><mo>(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo>)</mo><mo>−</mo><mi>H</mi><mo>(</mo><mi>p</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">KL(p,q) = H(p,q)-H(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base displaystyle textstyle uncramped"><span class="mord mathit" style="margin-right:0.07153em;">K</span><span class="mord mathit">L</span><span class="mopen">(</span><span class="mord mathit">p</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mrel">=</span><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathit">p</span><span class="mpunct">,</span><span class="mord mathit" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mbin">−</span><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathit">p</span><span class="mclose">)</span></span></span></span></span></p><p>VAEs的损失函数：</p>L(x,\widehat{x}) + KL(q,p)<h5 id="为什么同时使用重构损失和kl散度"><a class="markdownIt-Anchor" href="#为什么同时使用重构损失和kl散度"></a> 为什么同时使用重构损失和kl散度?</h5><p>在讨论了kl散度之后，为什么我们仍然在整体损失函数中使用重构损失呢?为了理解损失函数背后的原理，以及重构损失和KL散度对潜在空间的影响。让我们看看下面的图表。</p><p><img src="/2021/03/09/VAEs%E5%8F%98%E5%88%86%E8%87%AA%E7%BC%96%E7%A0%81%E5%99%A8/v2-c90ebf4c414481551b39faa4e5cccb71_r.jpg" alt="preview"></p><p>只使用重构损失时潜在空间内部将有空隙，不真正代表任何有意义的数据。因此，可变自动编码器使用分布而不是最小的差异与kl -散度。但是，如果我们只专注于用我们的kl -散度损失项模拟先验分布，我们将会将每个单位描述为单位正态分布，而不能描述原始数据。</p><p>因此，通过使用两者的组合，我们将获得一个平衡，即拥有一个接近先验分布但仍然描述输入的某些特征的潜在表示。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-64258f442ae9b2b0e37616183886828d_r.jpg&quot; alt=&quot;preview&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;ae自编码器&quot;&gt;&lt;a class=&quot;markdownIt-Ancho</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>初始Kafka</title>
    <link href="https://duanjiaojiao316.github.io/2021/01/08/%E5%88%9D%E5%A7%8BKafka/"/>
    <id>https://duanjiaojiao316.github.io/2021/01/08/%E5%88%9D%E5%A7%8BKafka/</id>
    <published>2021-01-08T13:56:47.000Z</published>
    <updated>2021-04-20T07:44:33.821Z</updated>
    
    <content type="html"><![CDATA[<p>1、Kafka的定义</p><p>首先了解Kafka是什么，在哪些地方扮演着什么角色？</p><p><code>kafka</code>是一个多分区多副本基于<code>ZooKeeper</code>协调的发布/订阅模式分布式消息系统，具有高吞吐量，可持久化，可水平扩展，支持流数据处理特性，<code>kafka</code>主要用于：消息系统，存储系统，流式处理平台。</p><p>Kafka与其他的消息中间件类似，具备系统解耦、冗余存储、流量削峰、缓冲、异步通信、扩展性等功能，同时还实现了消息顺序性保障以及消息回溯功能。</p><p>Kafka在存储系统，将消息持久化到磁盘，相比于其他的内存存储的系统降低数据丢失的风险，主要得益于Kafka的持久化功能多副本机制。</p><p>在流式处理平台，为流式处理框架提供可靠的数据来源，提供流式处理类库。</p><p>2、Kafka的体系架构</p><p>Kafka主要由三个部分：生产者<code>Producer</code>、消费者<code>Consumer</code>、服务代理节点<code>Broker</code>。</p><p>生产者创建消息，将消息发送到Kafka；消费者从Kafka拉取消息，接收消息；broker是Kafka的服务节点，如果Kafka中只有一个broker，也可以看做Kafka服务器。多个broker组成Kafka集群。</p><p>Kafka中以主题为单元进行存储，一个主题可以划分为多个分区，一个分区只能属于一个主题，分区在存储层面可以看做Log日志文件，把消息附加到分区中会分配到一个offset偏移量，Kafka通过偏移量保证消息的顺序性。注意offset不跨越分区。所以Kafka中保证分区内消息有序而不是主题有序。</p><p><img src="/2021/01/08/%E5%88%9D%E5%A7%8BKafka/Kafka%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt></p><p>从图中可以看出分区副本，Kafka引入分区的多副本机制，可以提高容错能力，但是同一时刻不同副本之间的消息并非完全相同，副本之间是一主多从的关系，leader负责读写请求，follower副本只负责和leader消息同步。不同副本处于不同的broker，如果leader出现故障，可以从follower中重新选举新的leader。</p><p>在分区中所有的副本统称为AR，与leader保持一定程度同步的副本组成ISR，一定程度表示可以忍受的容错范围，这个指标可以通过参数指定，与leader具有过多之后的副本组成OSR。所以<code>AR=ISR+OSR</code></p><p>同时leader负责维护和跟踪ISR中所有副本的滞后状态，如果follower滞后较多，leader会将他从ISR中剔除，如果OSR中副本没有较多的滞后，会把它转移到ISR中。如果leader发生故障，只会从ISR中选举leader，OSR中的follower没有机会选举为新的leader。</p><p>为了进一步了解ISR和OSR，需要了解HW和LEO。</p><p>HW（ High Watermark）高水位。</p><p>LEO（Log End Offset）当前日志下一条消息的offset。</p><p><img src="/2021/01/08/%E5%88%9D%E5%A7%8BKafka/image-20210112221809096.png" alt="image-20210112221809096"></p><p>LEO是分区中最后一条消息offset的值+1，ISR集合中最小的LEO为HW，消费者只能消费HW之前的消息。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1、Kafka的定义&lt;/p&gt;
&lt;p&gt;首先了解Kafka是什么，在哪些地方扮演着什么角色？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kafka&lt;/code&gt;是一个多分区多副本基于&lt;code&gt;ZooKeeper&lt;/code&gt;协调的发布/订阅模式分布式消息系统，具有高吞吐量，可持久化，可水平扩</summary>
      
    
    
    
    <category term="后端" scheme="https://duanjiaojiao316.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="大数据" scheme="https://duanjiaojiao316.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Kafka" scheme="https://duanjiaojiao316.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>BFS算法框架-解开密码锁的最少次数</title>
    <link href="https://duanjiaojiao316.github.io/2020/12/15/BFS%E7%AE%97%E6%B3%95%E6%A1%86%E6%9E%B6-%E8%A7%A3%E5%BC%80%E5%AF%86%E7%A0%81%E9%94%81%E7%9A%84%E6%9C%80%E5%B0%91%E6%AC%A1%E6%95%B0/"/>
    <id>https://duanjiaojiao316.github.io/2020/12/15/BFS%E7%AE%97%E6%B3%95%E6%A1%86%E6%9E%B6-%E8%A7%A3%E5%BC%80%E5%AF%86%E7%A0%81%E9%94%81%E7%9A%84%E6%9C%80%E5%B0%91%E6%AC%A1%E6%95%B0/</id>
    <published>2020-12-15T12:25:17.000Z</published>
    <updated>2021-05-11T07:46:58.340Z</updated>
    
    <content type="html"><![CDATA[<p>遍历所有的密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 密码锁向上拨动</span></span><br><span class="line"><span class="function">String <span class="title">plusOne</span><span class="params">(String secret, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] ch = secret.toCharArray();</span><br><span class="line">    <span class="keyword">if</span>(ch[j] == <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">        ch[j] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ch[j] += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String(ch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 密码锁向上拨动</span></span><br><span class="line"><span class="function">String <span class="title">downOne</span><span class="params">(String secret, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] ch = secret.toCharArray();</span><br><span class="line">    <span class="keyword">if</span>(ch[j] == <span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">        ch[j] = <span class="string">&#x27;9&#x27;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ch[j] -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String(ch)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印出所有的密码组合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(String target)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 队列</span></span><br><span class="line">    Queue[String] queue = <span class="keyword">new</span> Linkedlist&lt;&gt;();</span><br><span class="line">    queue.offer(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> size = queue.size;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">           String cur = queue.poll();</span><br><span class="line">            <span class="comment">// 这里判断是否达到终点</span></span><br><span class="line">            System.out.println(cur);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                String up = plusOne(cur, j);</span><br><span class="line">                String down = downOne(cur, j);</span><br><span class="line">                q.offer(up);</span><br><span class="line">                q.offer(down);</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里可以进行步长计算</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码由于没有终止条件，<code>0000</code>拨动成<code>0001</code>，同时<code>0001</code>也可以拨动成<code>0000</code></p><p>加入死亡密码和终止密码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(String target, String[] deadends)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 死亡密码</span></span><br><span class="line">    Set[String] deadSecrets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(String d: deadends) &#123;</span><br><span class="line">        deadSecrets.add(d);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Set[String] visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">// 队列</span></span><br><span class="line">    Queue[String] queue = <span class="keyword">new</span> Linkedlist&lt;&gt;();</span><br><span class="line">    <span class="comment">// 初始化步长</span></span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">    queue.offer(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    visited.add(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.empty())&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> size = queue.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            String cur = queue.poll();</span><br><span class="line">            <span class="comment">// 判断是否是死亡密码</span></span><br><span class="line">            <span class="keyword">if</span> (deadends.contains(cur)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="comment">// 这里判断是否达到终点</span></span><br><span class="line">            <span class="keyword">if</span> (cur.equal(target)) &#123;</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(cur);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                String up = plusOne(cur, j);</span><br><span class="line">                <span class="keyword">if</span> (!visited.contains(up))&#123;</span><br><span class="line">                    q.offer(up);</span><br><span class="line">                    visited.add(up);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                String down = downOne(cur, j);</span><br><span class="line">                <span class="keyword">if</span> (!visited.contains(up))&#123;</span><br><span class="line">                    q.offer(down);</span><br><span class="line">                    visited.add(down);</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        step ++;</span><br><span class="line">        <span class="comment">// 这里可以进行步长计算</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果遍历都没有查找到目标，证明没有办法到目标密码</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传统的 BFS 框架就是从起点开始向四周扩散，遇到终点时停止；而双向 BFS 则是从起点和终点同时开始扩散，当两边有交集的时候停止。</p><p>不过，双向 BFS 也有局限，因为你必须知道终点在哪里。比如二叉树最小高度的问题，一开始根本就不知道终点在哪里，也就无法使用双向 BFS；但是密码锁的问题，可以使用双向 BFS 算法来提高效率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(String target,String[] deadends)</span> </span>&#123;</span><br><span class="line">     <span class="comment">// 死亡密码</span></span><br><span class="line">    Set[String] deadSecrets = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span>(String d: deadends) &#123;</span><br><span class="line">        deadSecrets.add(d);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Set[String] visited = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">// 队列</span></span><br><span class="line">    Set[String] queue1 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    Set[String] queue2 = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">// 初始化步长</span></span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">    queue1.add(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    queue2.add(target);</span><br><span class="line">    visited.add(<span class="string">&quot;0000&quot;</span>);</span><br><span class="line">    visited.add(target);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue1.empty() &amp;&amp; !queue2.empty()) &#123;</span><br><span class="line">        <span class="comment">// 哈希集合在遍历的过程中不能修改，用 temp 存储扩散结果</span></span><br><span class="line">        Set&lt;String&gt; temp = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 将 q1 中的所有节点向周围扩散 */</span></span><br><span class="line">        <span class="keyword">for</span> (String cur : q1) &#123;</span><br><span class="line">            <span class="comment">/* 判断是否到达终点 */</span></span><br><span class="line">            <span class="keyword">if</span> (deadSecrets.contains(cur))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (q2.contains(cur))</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            visited.add(cur);</span><br><span class="line">            <span class="comment">/* 将一个节点的未遍历相邻节点加入集合 */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                String up = plusOne(cur, j);</span><br><span class="line">                <span class="keyword">if</span> (!visited.contains(up))</span><br><span class="line">                    temp.add(up);</span><br><span class="line">                String down = downOne(cur, j);</span><br><span class="line">                <span class="keyword">if</span> (!visited.contains(down))</span><br><span class="line">                    temp.add(down);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 增加步长</span></span><br><span class="line">        step ++;</span><br><span class="line">        <span class="comment">// 这里交换queue1和queue2 下一个循环就会扩展queue2相邻的密码</span></span><br><span class="line">        queue1 = queue2;</span><br><span class="line">        queue2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;遍历所有的密码&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;</summary>
      
    
    
    
    <category term="算法" scheme="https://duanjiaojiao316.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="BFS（广度优先搜索）" scheme="https://duanjiaojiao316.github.io/tags/BFS%EF%BC%88%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>算法套路框架</title>
    <link href="https://duanjiaojiao316.github.io/2020/12/14/%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%A1%86%E6%9E%B6/"/>
    <id>https://duanjiaojiao316.github.io/2020/12/14/%E7%AE%97%E6%B3%95%E5%A5%97%E8%B7%AF%E6%A1%86%E6%9E%B6/</id>
    <published>2020-12-14T08:23:00.000Z</published>
    <updated>2021-04-20T07:44:33.823Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算从起点 start 到终点 target 的最近距离</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node start, Node target)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Node&gt; q; <span class="comment">// 核心数据结构 队列</span></span><br><span class="line">    Set&lt;Node&gt; visited; <span class="comment">// 避免走回头路 已访问过点加入 visited</span></span><br><span class="line"></span><br><span class="line">    q.offer(start); <span class="comment">// 将起点加入队列</span></span><br><span class="line">    visited.add(start);</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>; <span class="comment">// 记录扩散的步数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q <span class="keyword">not</span> empty) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = q.size();</span><br><span class="line">        <span class="comment">/* 将当前队列中的所有节点向四周扩散 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            Node cur = q.poll();</span><br><span class="line">            <span class="comment">/* 划重点：这里判断是否到达终点 */</span></span><br><span class="line">            <span class="keyword">if</span> (cur is target)</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            <span class="comment">/* 将 cur 的相邻节点加入队列 */</span></span><br><span class="line">            <span class="comment">// cur.adj() 表示与但钱节点相邻的节点</span></span><br><span class="line">            <span class="keyword">for</span> (Node x : cur.adj()) </span><br><span class="line">                <span class="keyword">if</span> (x <span class="keyword">not</span> in visited) &#123;</span><br><span class="line">                    q.offer(x);</span><br><span class="line">                    visited.add(x);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 划重点：更新步数在这里 */</span></span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="算法" scheme="https://duanjiaojiao316.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法 BFS（广度优先搜索）" scheme="https://duanjiaojiao316.github.io/tags/%E7%AE%97%E6%B3%95-BFS%EF%BC%88%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>高性能MySQL</title>
    <link href="https://duanjiaojiao316.github.io/2020/11/29/%E9%AB%98%E6%80%A7%E8%83%BDMySQL/"/>
    <id>https://duanjiaojiao316.github.io/2020/11/29/%E9%AB%98%E6%80%A7%E8%83%BDMySQL/</id>
    <published>2020-11-29T14:31:44.000Z</published>
    <updated>2021-04-20T07:44:33.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="高性能mysql"><a class="markdownIt-Anchor" href="#高性能mysql"></a> 高性能MySQL</h1><h2 id="高性能索引"><a class="markdownIt-Anchor" href="#高性能索引"></a> 高性能索引</h2><p>使用ORM对象关系映射工具也需要关注索引，关于ORM工具，不论多复杂都不能完成完美的查询优化。</p><h3 id="b-tree索引"><a class="markdownIt-Anchor" href="#b-tree索引"></a> B-Tree索引</h3><p>所有的值按顺序存储，每个叶子页到根的距离相同，避免了全表扫描搜索。从索引的根节点开始进行搜索，根节点的槽存放指向子节点的指针，存储引擎根据这些指针向下层查询。通过子节点的值和要查询数据的值进行比较找到合适的指针指向下一层子节点。这些指针定义了子节点的值的上限和下限。叶子节点的指针指向的是被索引的数据，不是其他节点页。</p><p>B-Tree对索引列是顺序组织存储的，适合查找范围数据。</p><p>在定义B-Tree索引时，索引列多于一个，索引列的顺序与<code>key(lastname,firstname,dob)</code>中的顺序无关，依据的顺序是<code>CREATE TABLE</code>语句中定义索引时列的顺序。</p><h4 id="查询类型"><a class="markdownIt-Anchor" href="#查询类型"></a> 查询类型</h4><ul><li>全值匹配：查询姓名为xxx xxx，出生日期为yyyy-mm-dd的人</li><li>匹配最左前缀： 查询姓为xxx的人</li><li>匹配列前缀： 查询姓以J开头的人</li><li>匹配范围值： 查询姓在某两个值之间的人</li><li>精确匹配某一列并范围匹配某一列</li><li>只访问索引的查询，无须访问数据行</li></ul><h4 id="查询限制"><a class="markdownIt-Anchor" href="#查询限制"></a> 查询限制</h4><ul><li>如果不是最左列开始查询，则无法使用索引</li><li>不能跳过索引的列</li><li>如果某一列是范围查询右边的所有列无法使用索引优化查找</li></ul><h3 id="哈希索引"><a class="markdownIt-Anchor" href="#哈希索引"></a> 哈希索引</h3><p>精确匹配所有索引列的查询才有效，存储引擎会根据所有的所有列计算一个哈希值。只有Memory显式支持哈希索引，并且是非唯一索引，如果哈希值相同，会以链表的形式存放多个数据记录在同一个哈希条目中。</p><h4 id="查询限制-2"><a class="markdownIt-Anchor" href="#查询限制-2"></a> 查询限制</h4><ul><li>只包含哈希值和指针，不能避免读取数据行</li><li>不是按照顺序存储的，无法实现排序</li><li>不支持用于部分索引列的匹配查找，哈希值是通过所有索引列计算哈希值的</li><li>只支持等值比较查找 = ,IN(),&lt;&gt;,&lt;=&gt;</li><li>访问哈希索引的数据非常快，除非出现哈希冲突，存储引擎必须遍历所有的行指针</li><li>出现哈希冲突较多，索引维护的代价会很高</li></ul><h4 id="inoodb的自适应哈希索引"><a class="markdownIt-Anchor" href="#inoodb的自适应哈希索引"></a> InooDB的自适应哈希索引</h4><p>在B-Tree的基础上添加哈希索引。用户无法操纵，但是可以选择开启和关闭。</p><h4 id="使用什么计算哈希值"><a class="markdownIt-Anchor" href="#使用什么计算哈希值"></a> 使用什么计算哈希值</h4><ul><li>CRC32，</li><li>SHA1()，MD5()作为哈希函数产生的哈希值很长</li><li>自定义哈希函数</li><li>或者使用SHA1()，MD5()作为哈希函数结果的一部分来作为哈希值（性能低，实现简单）</li><li>FNV64函数以插件方式使用，哈希值是64位的，冲突比CRC32少很多</li></ul><h3 id="空间数据索引r-tree"><a class="markdownIt-Anchor" href="#空间数据索引r-tree"></a> 空间数据索引（R-Tree）</h3><p>从所有维度索引数据，可以使用任何维度来组合查询。</p><p>MySQL的GIS支持不完善很少使用</p><p>PostgreSQL的PostGIS比较好</p><h3 id="全文索引"><a class="markdownIt-Anchor" href="#全文索引"></a> 全文索引</h3><p>查找文本的关键词，类似搜索引擎的工作。</p><h2 id="sql优化"><a class="markdownIt-Anchor" href="#sql优化"></a> SQL优化</h2><p><strong>负向查询不能使用索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>应该修改为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name from user where id in (2,5,6);</span><br></pre></td></tr></table></figure><p><strong>前导模糊查询不能使用索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">&#x27;%zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><p>非前导则可以:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">&#x27;zhangsan%&#x27;</span></span><br></pre></td></tr></table></figure><p>建议可以考虑使用 <code>Lucene</code> 等全文索引工具来代替频繁的模糊查询。</p><p><strong>数据区分不明显的不建议创建索引</strong></p><p>如 user 表中的性别字段，可以明显区分的才建议创建索引，如身份证等字段。</p><p><strong>字段的默认值不要为</strong> null</p><p>这样会带来和预期不一致的查询结果。</p><p><strong>在字段上进行计算不能命中索引</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> FROM_UNIXTIME(create_time) &lt; <span class="keyword">CURDATE</span>();</span><br></pre></td></tr></table></figure><p>应该修改为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> create_time &lt; FROM_UNIXTIME(<span class="keyword">CURDATE</span>());</span><br></pre></td></tr></table></figure><p><strong>最左前缀问题</strong></p><p>如果给 user 表中的 username pwd 字段创建了复合索引那么使用以下SQL 都是可以命中索引:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">&#x27;zhangsan&#x27;</span> <span class="keyword">and</span> pwd =<span class="string">&#x27;axsedf1sd&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> pwd =<span class="string">&#x27;axsedf1sd&#x27;</span> <span class="keyword">and</span> username=<span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">&#x27;zhangsan&#x27;</span></span><br></pre></td></tr></table></figure><p>但是使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> pwd =<span class="string">&#x27;axsedf1sd&#x27;</span></span><br></pre></td></tr></table></figure><p>是不能命中索引的。</p><p><strong>如果明确知道只有一条记录返回</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> username=<span class="string">&#x27;zhangsan&#x27;</span> <span class="keyword">limit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以提高效率，可以让数据库停止游标移动。</p><p><strong>不要让数据库帮我们做强制类型转换</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> telno=<span class="number">18722222222</span></span><br></pre></td></tr></table></figure><p>这样虽然可以查出数据，但是会导致全表扫描。需要修改为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> telno=<span class="string">&#x27;18722222222&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>如果需要进行 join 的字段两表的字段类型要相同</strong></p><p>不然也不会命中索引</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;高性能mysql&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#高性能mysql&quot;&gt;&lt;/a&gt; 高性能MySQL&lt;/h1&gt;
&lt;h2 id=&quot;高性能索引&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#高性能索引&quot;</summary>
      
    
    
    
    <category term="数据库" scheme="https://duanjiaojiao316.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络基础知识</title>
    <link href="https://duanjiaojiao316.github.io/2020/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>https://duanjiaojiao316.github.io/2020/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-03-09T13:56:09.000Z</published>
    <updated>2021-04-20T07:44:33.824Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机网络"><a class="markdownIt-Anchor" href="#计算机网络"></a> 计算机网络</h1><h2 id="网络层"><a class="markdownIt-Anchor" href="#网络层"></a> 网络层</h2><h3 id="icmp网际控制报文协议"><a class="markdownIt-Anchor" href="#icmp网际控制报文协议"></a> ICMP网际控制报文协议</h3><p>ICMP报文是IP层数据报文的数据，加上IP头部组成IP报文。</p><h4 id="种类"><a class="markdownIt-Anchor" href="#种类"></a> 种类</h4><h5 id="icmp差错报告报文"><a class="markdownIt-Anchor" href="#icmp差错报告报文"></a> ICMP差错报告报文</h5><ol><li>终点不可达：当路由器或者主机不能交付数据报时，就向源点发送终点不可达报文。</li><li>时间超过：当路由器收到生存时间为0的数据报时，丢失数据报，向源点发送时间超过报文。当终点在预定时间段内不能收到数据报的全部内容，就会丢弃已收到的数据报，向源点发送时间超过报文。</li><li>参数问题：当路由器或者主机在收到数据报时发现首部的有些字段的值不正确时，丢弃该数据报，就会向源点发送参数问题报文。</li><li>改变路由（重定向）：路由器把改变路由报文发送给主机，让主机直到下次发送数据报更好的路由路径。</li></ol><h5 id="icmp询问报文"><a class="markdownIt-Anchor" href="#icmp询问报文"></a> ICMP询问报文</h5><ol><li>回送请求和回答：主机或者路由器向一个特定的目的主机发送访问，收到此报文的主机必须给源主机或者路由器发送ICMP回送回答报文。这种询问报文用于测试目的站点是否可达。</li><li>时间戳请求和回答：请求某台主机或者路由器回答当前的时间和日期。可用于时钟同步和时间测量。</li></ol><p><strong>PING</strong>是ICMP的一个重要的应用，测试两台主机的连通性。</p><h3 id="路由选择协议"><a class="markdownIt-Anchor" href="#路由选择协议"></a> 路由选择协议</h3><h4 id="内部网关协议rip"><a class="markdownIt-Anchor" href="#内部网关协议rip"></a> 内部网关协议RIP</h4><p>一种分布式的基于距离向量的路由选择协议，路由表维护从自己到其他目的网络的距离（距离向量，跳数）。RIP允许一条路径最多只能包含15个路由器，距离为16时不可达，RIP只适用于小型互联网。</p><p>RIP不能在两个网络之间同时使用多条路径，RIP选择具有最少路由器的路径，哪怕存在一个具有较多路由器但是高速的</p><p>RIP协议特点：</p><ol><li>仅与相邻的路由交换信息</li><li>交换信息为全部的路由表</li><li>按固定时间间隔交换路由信息</li></ol><p>实现简单，开销小，好消息传的快，坏消息传的慢。</p><p>算法：</p><p>相邻路由器发来的RIP报文，对所有项目进行修改，把下一跳的路由都改成相邻路由器，距离都加1。</p><p>修改后的报文项目与将要更新的路由表进行对比：</p><ol><li>原来的路由表中没有该目的网络，就加入该项目。</li><li>若下一跳的路由器是相邻路由器，则更新下一跳距离。</li><li>如果存在目标网络，但是下一跳路由不同，选择其中较小的。</li></ol><p>如果三分钟后没有收到相邻路由表的更新信息，那么这个路由不可达，设置距离为16。</p><h4 id="内部网关协议pspf"><a class="markdownIt-Anchor" href="#内部网关协议pspf"></a> 内部网关协议PSPF</h4><p>使用迪杰斯特拉算法（Dijkstra）——最短路径优先</p><p>协议不收厂商控制——开发</p><p>分布式链路状态协议</p><p>OSPF特点：</p><ol><li>向本自治系统的所有路由器发送信息——洪泛法，而RIP只向相邻的路由器发送信息。</li><li>发送信息是该路由与相邻路由的所有路由器的链路状态。链路状态是与哪些路由相邻以及该链路的度量（费用、距离、时延、带宽）。</li><li>只有链路状态发生变化路由器采用洪泛法发送此信息。</li></ol><p>在OSPF中，没有路由器都知道全网的链路状态。</p><p>为了使OSPF用于更大的网络，将自治系统再划分为区域，划分区域，将洪泛法交换链路信息的范围局限于一个区域，减少整个网络的通信量。</p><h4 id="外部网关协议bgp"><a class="markdownIt-Anchor" href="#外部网关协议bgp"></a> 外部网关协议BGP</h4><p>配置BGP每一个自治系统都需要一个BGP发言人，为边界路由器发言人之间通过共享网络连接在一起。通过TCP发送，交换网络可达性信息。</p><h2 id="传输层"><a class="markdownIt-Anchor" href="#传输层"></a> 传输层</h2><p>IP层通信的两端是两台主机，运输层通信的两端是主机之间的进程。</p><h3 id="运输层的复用与分用"><a class="markdownIt-Anchor" href="#运输层的复用与分用"></a> 运输层的复用与分用</h3><p>复用是指发送方不同的应用程序都可以使用同一个运输层协议传送数据。</p><p>分用是指接收方的传输层剥去报文的首部后能够把这些数据正确交付到目的应用进程。</p><h3 id="协议端口号"><a class="markdownIt-Anchor" href="#协议端口号"></a> 协议端口号</h3><p>TCP/IP的运输层用16位端口号标记一个端口。端口号只具有本地意义。</p><p>服务器端使用的</p><p>熟知端口号（系统端口号）0-1023</p><table><thead><tr><th>应用程序</th><th>FTP</th><th>TELNET</th><th>SMTP</th><th>DNS</th><th>TFTP</th><th>HTTP</th><th>SNMP</th><th>SNMP(trap)</th><th>HTTPS</th></tr></thead><tbody><tr><td>熟知端口号</td><td>21</td><td>23</td><td>25</td><td>53</td><td>69</td><td>80</td><td>161</td><td>162</td><td>443</td></tr></tbody></table><p>登记端口号1024-49151</p><p>客户端使用的端口号49152-65535</p><h3 id="用户数据报协议udp"><a class="markdownIt-Anchor" href="#用户数据报协议udp"></a> 用户数据报协议UDP</h3><h4 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h4><ol><li><p>无连接</p></li><li><p>尽最大努力交付</p></li><li><p>面向报文</p><p>发送方的UDP对应用层交下来的报文添加首部后就下交付IP层。对应用层下交下来的报文不合并不拆分。一次发送一个报文。</p></li><li><p>没有拥塞控制</p></li><li><p>首部开销小</p></li><li><p>支持一对一一对多多对一多对多的交互通信</p></li></ol><p>由于UDP之间的通信要用到端口号，但是无连接的因此不需要使用套接字来建立连接。相比TCP就需要在两个套接字之间建立连接。</p><h4 id="计算检验和"><a class="markdownIt-Anchor" href="#计算检验和"></a> 计算检验和</h4><p>方法与IP检验相似，但是IP数据报的检验和只检验IP数据报的首部，UDP检验和把首部和数据部分一起检验。</p><h5 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤：</h5><ol><li>先把全零放入检验和字段</li><li>把伪首部和用户数据报看成许多16位的字串联用户数据报的数据不是偶数字节（也就是不是16位）不是则要填入全零。</li><li>二进制反码求和</li><li>求和结果写入检验和字段</li><li>UDP数据报发送。接收方二进制反码求这16位的和。结果为1无差错。</li></ol><h3 id="传输控制协议tcp"><a class="markdownIt-Anchor" href="#传输控制协议tcp"></a> 传输控制协议TCP</h3><ol><li>面向连接的传输层协议</li><li>每条连接只能连接两个端点</li><li>可靠交付</li><li>全双工通信</li><li>面向字节流</li></ol><h4 id="停止等待协议arq"><a class="markdownIt-Anchor" href="#停止等待协议arq"></a> 停止等待协议ARQ</h4><p>每发送一个分组就会停止发送，等待对方的确认，在收到确认之后在发送下一个分组。发送方在一段时间后没有收到确认就会重传前面发送过的分组，超时重传。所以发送方都会暂时保存已发送分组的副本，只有在收到确认之后才会清楚副本。</p><p>发送方和接收方发送分组都需要进行编号。</p><p>确认丢失，接收方发送的确认分组丢失，发送方重传，接收方重复收到分组：</p><ol><li>丢弃这个分组，不向上层交付</li><li>向发送方重新发送确认分组</li></ol><p>确认迟到，接收方发送的确认迟到，发送方收到重复的确认，发送方丢弃确认，不做任何处理。</p><h4 id="连续的arq协议"><a class="markdownIt-Anchor" href="#连续的arq协议"></a> 连续的ARQ协议</h4><p>发送方维持发送窗口，发送方每发送一个分组，窗口就会向前移动一个分组的位置，接收方采用<strong>累计确认</strong>的方法，不必对接收的每个分组逐个发送确认，而是对按照次序到达的最后一个分组的发送确认。表明这个分组之前的所有分组全部到达。</p><h5 id="累积确认的优点缺点"><a class="markdownIt-Anchor" href="#累积确认的优点缺点"></a> 累积确认的优点缺点：</h5><ul><li>容易实现，确认丢失也不必重传</li><li>不能向发送方反应接收方已经正确收到的所有分组的信息</li></ul><p>TCP报文首部</p><ul><li><p>**ACK **当ACK=1确认号字段才有效。</p></li><li><p><strong>SYN</strong> 当SYN=1 ACK=0这是一个连接请求报文段，若对方同意建立连接，在响应的报文段SYN=1 ACK =1。</p><p>所以当SYN=1表明这是一个连接请求或者链接接受报文。</p></li><li><p><strong>FIN</strong> 当FIN=1表明此报文段的发送方的数据发送完毕，并请求释放运输连接。</p></li><li><p><strong>窗口</strong> 发送本报文段的一方的接收窗口。窗口值为了告诉发送方目前接收方允许发送的数据量。</p></li></ul><h1 id="计算机网络dns系统"><a class="markdownIt-Anchor" href="#计算机网络dns系统"></a> 计算机网络——DNS系统</h1><h2 id="dns起源"><a class="markdownIt-Anchor" href="#dns起源"></a> DNS起源</h2><p>由于要访问网络上的计算机，就需要直到其IP地址，但是IP地址是一段没有规律的数组，很难记忆，一旦一个计算机改变其IP地址就需要告知所有人。</p><p>为了方便记忆人们为计算机起名字，建立计算机名字到地址的一个映射关系。我们访问计算机的名字，剩下的名字到地址的转换过程则由计算机自动完成。</p><p>早期，名字到地址的转换过程十分简单。每台计算机保存一个<font color="red">hosts文件</font>，里面列出所有计算机名字和对应的IP地址，然后定期从一个维护此文件的站点更新里面的记录。当我们访问某个计算机名字时，先在hosts文件找到对应的IP，然后就可以建立连接。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgLnPFibxYxSFFpXPWNocZ4VpHEHOz2Is88QML1xsSibsqJZ65mMIVia0e5Oh7ETnfCBq4AsXAG7mDV7A/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>早期的ARPANET就是这样做的，但是随着网络规模的扩大，这种方法渐渐吃不消了。主要有以下三个原因：</p><ol><li>hosts文件变得非常大；</li><li>主机名字会冲突；</li><li>集中的维护站点会不堪重负（需要给几百万机器提供hosts文件，想想就可怕）。</li></ol><p>为了解决上面的问题，1983年Paul Mockapetris提出了域名系统（ <code>DNS</code>, Domain Name System)，这是一种<code>层次的、基于域</code>的命名方案，并且用<code>一个分布式数据库系统加以实现</code>。当我们需要访问一个域名（其实就是前面说的计算机的名字）时，应用程序会向DNS服务器发起一个DNS请求，DNS服务器返回该域名对应的IP地址。通过下面三种手段解决了上面的问题：</p><ol><li>用户计算机上并没有存储所有的名字到IP的映射，这样避免了hosts文件过于庞大（现在各操作系统中hosts文件默认都是空的）。</li><li>规定了域名的命名规则，保证主机名字不会重复。</li><li>DNS服务器不再是单一的一台机器，而是一个层次的、合理组织的服务器集群。</li></ol><p>这样访问一个域名的过程可以简化为下图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgLnPFibxYxSFFpXPWNocZ4VpicVDHaxIWrbX8wUzBicJiaPj79yuicia6GibXZkVjZur3hrr4yXpZOCwm7iag/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h2 id="dns协议"><a class="markdownIt-Anchor" href="#dns协议"></a> DNS协议</h2><p>那么如何具体实现这个所谓的域名系统呢，要知道管理一个超大型并且不断变化的域名到IP的映射集合可不是一个简单的事，况且还要去应付成千上万的DNS查询请求。人们最终想出了一套不错的协议，规定如何来实现这个系统，下面我们一起来看看吧。</p><p>首先我们需要制定一套命名规则，防止域名出现重复。DNS关于域名的规则和我们生活中的快递系统类似，使用层次的地址结构。快递系统中要给某人邮寄物品，地址可能是这样：中国、广东省、广州市、番禺区、中山西路12号 XXX。<a href="http://xn--groups-9m7iglp62a34emtmkj7bdkdcsd935fu0bp52ezq4ciqj.google.com">而一个域名看起来则是这样的groups.google.com</a>（为什么不是com.google.groups？我猜可能和老外写地址的习惯有关）。</p><p>对于Internet来说，域名层次结构的顶级（相当于国际快递地址中的国家部分）由ICANN（互联网名称与数字地址分配机构）负责管理。目前，已经有超过250个顶级域名，每个顶级域名可以进一步划为一些子域（二级域名），这些子域可被再次划分（三级域名），依此类推。所有这些域名可以组织成一棵树，如下图所示:</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgLnPFibxYxSFFpXPWNocZ4VptBzxaVXc4VVlzqeF2icyVsHCUsGD9QxQibibbptqZ6cu6mbrY49MYicI4g/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>DNS设计之初是用来建立域名到IP地址的映射，理论上对于每一个域名我们只需要在域名服务器上保存一条记录即可。这里的记录一般叫作域名资源记录，它是一个五元组，可以用以下格式表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Domain_name Time_to_live Class Type Value</span><br></pre></td></tr></table></figure><p>其中：</p><p><strong>Domain_name</strong>：指出这条记录适用于哪个域名；</p><p><strong>Time_to_live</strong>：用来表明记录的生存周期，也就是说最多可以缓存该记录多长时间（后面会讲到缓存机制）；</p><p><strong>Class</strong>：一般总是IN；</p><p><strong>Type</strong>：记录的类型；</p><p><strong>Value</strong>：记录的值，如果是A记录，则value是一个IPv4地址。</p><p>我们看到域名资源记录有一个Type字段，用来表明记录的类型。这是为什么呢？因为对于一个域名来说，通常并非只记录其IP地址，还可能需要一些其他种类的记录，一些常见的记录类型如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgLnPFibxYxSFFpXPWNocZ4VpTgWrR6ichJ8qG6icfr1JfuLmK1usPwVtPal2HgPjyFokgVxiahmlCJDZg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>我们知道<strong>不能只用一台域名服务器来响应所有的DNS查询</strong>，因为没有一台机器能够给全球的用户提供查询服务，计算能力、存储、带宽都不允许。只能合理组织一个<strong>域名服务器集群</strong>，使他们协同工作，共同提供域名解析服务。接下来首先要面对的一个问题是如何合理地将所有的域名资源记录存储到不同的域名服务器上。</p><p>前面说过域名的名字空间可以组织为一棵树，这里我们可以<strong>进一步将其划分为不重叠的区域（DNS zone）</strong>，针对上图的域名空间，一种可能的域名划分如下图：</p><p><strong><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgLnPFibxYxSFFpXPWNocZ4VpVZlgJy21z0p8ic1h0ib0ghibLCgssiagbkJrVPXhX8Uh2ffLthIoPbENtg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></strong></p><p>然后将每个区域与多个域名服务器（其中一个是master，其他slave服务器则用来提供数据备份、加快解析速度、保证服务可用性）关联起来，称这些域名服务器为该区域的<code>权威域名服务器(Authoritative Name Servers )</code>，它保存两类域名资源记录：</p><p><strong>1</strong>：该区域内所有域名的域名资源记录。</p><p><strong>2</strong>：父区域和子区域的域名服务器对应的域名资源记录（主要是NS记录）。</p><p>这样，所有的域名资源记录都保存在多个域名服务器中，并且所有的域名服务器也组成了一个层次的索引结构，便于我们后面进行域名解析。下面以一个简化的域名空间为例子，说明域名资源记录是如何保存在域名服务器中的，如下图:</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgLnPFibxYxSFFpXPWNocZ4VpHIlicNgbcTNzhqWqSfW7TiaGPyeficXMmpD1WR8nvPHmf3wDZmO9iaUd6w/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>图中域名空间划分为A, B, C, D, E, F, G七个DNS区域，每个DNS区域都有多个权威域名服务器，这些域名服务器里面保存了许多域名解析记录。对于上图的NDS区域E来说，它的权威域名服务器里面保存的记录如图中表格所示。</p><p>仔细观察上图你可能会发现区域A、B并没有父区域，他们之间并没有一条路径连在一起。这将导致一个很麻烦的问题，那就是区域A的权威域名服务器可能根本不知道区域B的存在。认识到这一点后，你可能会想出一个很自然的解决方案，就是在A中记录B域名服务器的地址，同时在B中记录A的，这样它们两个就联系起来了。但是考虑到我们有超过250个顶级域名，这样做并不是很恰当。</p><p>而我们使用的域名系统则采用了一种更加聪明的方法，那就是引入<strong>根域名服务器</strong>，**它保存了所有顶级区域的权威域名服务器记录。**现在通过根域名服务器，我们可以找到所有的顶级区域的权威域名服务器，然后就可以往下一级一级找下去了。下图为全球根域名服务器的分布图，可以在这里找到。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgLnPFibxYxSFFpXPWNocZ4VpHicpOALwQoVyxUUiaO3dKvyVMUkLyibqpCrDZFWhMejIFnAzOIZicQFKAg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>现在为止，我们的权威域名服务器和根域名服务器其实组成了一个树，<strong>树根为根域名服务器，下面每个节点都是一个区域的权威域名服务器</strong>，对于图a中各个DNS区域的权威域名服务器，它们组成了下面这棵树（实际中，一个权威域名服务器可能保存有多个DNS区域的记录，因此权威域名服务器之间的联系并不构成一棵树。这部分的详细内容可以参考RFC 1034: 4. NAME SERVERS。下面为了容易理解，将其简化为一棵树）：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgLnPFibxYxSFFpXPWNocZ4Vpcyj1JKZzKEceQAOYNkXtfxaEWXvX7mEXC9GOBQS3cdoib7mC1fMB1wg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>​<code>域名服务器树</code></p><h2 id="域名解析"><a class="markdownIt-Anchor" href="#域名解析"></a> 域名解析</h2><p>我们已经有了一个域名服务器集群，该集群合理地保存了域名空间和域名资源记录的对应关系。现在我们要做的就是发送一个DNS请求给域名服务器，然后坐等它返回正确的域名资源记录，这个过程叫作域名解析。</p><p>严格来说，域名解析的过程最早要追溯到建立网络连接。因为每当连接上网络之后，计算机会自动获得一个默认的DNS服务器，当然你也可以用自己信任的DNS服务器，比如8.8.8.8（DNS服务器也有信任不信任之分，是的，实践篇会讲到），我们把这个域名服务器也叫作<code>本地域名服务器</code>。接下来当我们需要知道一个域名对应的资源记录时，会向本地域名服务器发起请求，如果该域名恰好在本地域名服务器所辖属的域名区域（DNS zone）内，那么可以直接返回记录。</p><p>如果在本地域名服务器没有发现该域名的资源记录，就需要在整个域名空间搜索该域名。而整个域名空间的资源记录存储在一个分层的、树状联系的一系列域名服务器上，所以本地域名服务器首先要从根域名服务器开始往下搜索。这里有一个问题就是<strong>本地域名服务器如何找到根域名服务器在哪里呢？<strong>其实</strong>域名服务器启动的时候，就会加载一个配置文件，里面保存了根域名服务器的NS记录</strong>（要知道根域名服务器地址一般非常稳定，不会轻易改变，并且数量很少，所以这个配置文件会很小）。找到根域名服务器之后，就可以一级一级地往下查找啦。</p><p>仍然以我们的图a为例，<a href="http://xn--Emath-nn1h99jz2clwfnxmu2b522clvdfxzxw4be6e7sgrt5i3a4523c.sysu.edu.cn">现在假设区域E内的某个用户想访问math.sysu.edu.cn</a>，那么请求的过程如下：</p><p><img src="/2020/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/gif;base64,iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVQImWNgYGBgAAAABQABh6FO1AAAAABJRU5ErkJggg==" alt="img"> <img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgLnPFibxYxSFFpXPWNocZ4Vpn3mJIEtPMTG0nBvuSguCdhnxoWCr3pFQFNqocdHSSsTRkD2Gp8PTaA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>​域名解析过程</p><p>用语言简单描述如下：</p><p><strong>1</strong>：用户：喂，<strong>本地域名服务器</strong>，告诉我math.sysu.edu.cn的地址；</p><p><strong>2</strong>：本地域名服务器：哎呀，我不知道啊，不在我的辖区，容我去问问老大哥吧。<strong>root老大</strong>，能告诉我math.sysu.edu.cn的地址吗；</p><p><strong>3</strong>：根域名服务器：忙着呢，你去问B（.cn）；</p><p><strong>4</strong>：本地域名服务器：喂，B，告诉我math.sysu.edu.cn的地址；</p><p><strong>5</strong>：B：你去问D（.edu.cn）；</p><p><strong>6</strong>：本地域名服务器：喂，D，告诉我math.sysu.edu.cn的地址；</p><p><strong>7</strong>：D：你去问F（<a href="http://sysu.edu.cn">sysu.edu.cn</a>）；</p><p><strong>8</strong>：本地域名服务器：喂，F，告诉我math.sysu.edu.cn的地址；</p><p><strong>9</strong>：F：容老衲看看，哎呀，找到了，是X.X.X.X；</p><p><strong>10</strong>：本地域名服务器：踏破铁鞋终于找到啦，喂用户，出来啊，我找到了，是X.X.X.X</p><h2 id="缓存机制"><a class="markdownIt-Anchor" href="#缓存机制"></a> 缓存机制</h2><p>现在整个域名系统已经可以为我们提供域名解析服务了，当我们输入域名，计算机发送DNS请求，然后DNS服务器返回给我们解析的结果，一切看起来很完美。然而是不是可以更完美呢？</p><p>回顾一下平时浏览网站的情况，我们会发现两个比较有意思的结论：</p><p><strong>1</strong>：80%的时间我们都在看那些20%的网站，这就是大名鼎鼎的<strong>80/20 Rule</strong>；</p><p><strong>2</strong>：我们会在一个网站的不同网页之间跳转，也就是不断地访问同一个域名，类似程序访问的局部性原理。</p><p>这两条结论很容易让我们联想到缓存机制。如果我们<strong>将已经访问过的那些域名的解析结果缓存在自己的计算机上，那么下次访问的时候可以直接读取结果，不用再次重复DNS查询过程，给自己和域名服务器都节省了麻烦。</strong></p><p>当然，这样做的一个前提是要缓存的解析结果不会频繁更改，也就是说我十分钟后解析一个域名的结果和现在解析的结果是一样的。对大多数域名来说，这都是一个不争的事实。但是难免有一些“善变”的域名，他们可能会频繁更改自己的解析结果。为了使缓存机制适应这两类情况，我们在域名资源记录里面添加一个<code>Time_ti_live</code>字段，表明这条记录最多可以缓存多久。对于那些“稳如泰山”的域名，给一个比较大的值，而那些“朝三暮四”的域名，则可以给定一个小的值。</p><p>我们既然可以在本机利用缓存，那么可不可以在域名服务器上也利用缓存机制呢，答案当然是可以的。因为对于域名服务器来说，上面的两条有意思的结论仍然有效。所以，域名服务器可以将那些访问过的域名资源记录缓存，用户再次发起请求时，可以直接返回缓存结果，不用去迭代或者递归解析。</p><h2 id="域名注册-绑定"><a class="markdownIt-Anchor" href="#域名注册-绑定"></a> 域名注册、绑定</h2><p>首先明确一点，每个人都可以去注册域名。大多数时候我们希望去注册一个顶级域名（<a href="http://xn--selfboot-jo1ot97l.cn">比如selfboot.cn</a>, google.com等），那些二级域名毕竟不够好记（比如github托管博客的域名：<a href="http://username.github.io">username.github.io</a>）。有的顶级域名（比如.tk域名）提供免费的一年域名试用，不过绝大多时候还是要为自己的域名付费的（一般是按年付费，也不是很贵）。</p><p>要想去注册域名，首先得找到域名注册商，国内的比较著名的有DNSpod等，国外的有godaddy等。相信注册过域名的人都知道绝大多数我们能想到的自己喜欢的域名都已名花有主了，只剩那些不是那么惹人关注的域名供我们选择。所以，注册域名时，发现自己每想到一个域名都显示被人注册后，那太正常不过了，说明你的品味比较正常。</p><p>这里一点个人建议，选中一个域名后不要轻易去改了，因为换域名成本挺高的（我猜现在就算给淘宝一千万，它也不会换另成一个域名吧）。所以，最好不要去用免费的域名，因为指不定啥时候就不让你用了。你应该相信这么一个观点：天下没有免费的午餐。拓展一下就是，掏钱买服务，心里踏实。</p><p>接下来你可能会希望将自己的站点或者博客挂在自己选中的域名下，这其实很简单，只需要找到一个提供域名解析的服务商，然后填写相应的域名解析记录。大多时候，你注册域名的服务商都会免费提供域名解析服务。</p><p>现实中，大部分人可能会拥有个人博客，以前我们都是依赖一个博客平台（如CSDN），或者是买一台VPS托管自己的博客。不过自从Github推出了Blog服务，好多程序员都转而将博客托管在上面。Github Blog支持绑定个人域名，并提供了详细的绑定文档：Adding a CNAME file to your repository。假设你的博客已经可以通过 <a href="http://username.github.io">username.github.io</a> 访问，接下来只需要用 CNAME 告诉Github你的博客绑定了哪个域名（<a href="http://xn--selfboot-jo1o872hd8my34g.cn">比如说是selfboot.cn</a>），然后在域名解析商那里添加解析记录即可，下图是我个人博客在DNSpod的解析记录：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJPROpenqRIUKib5HAwDLjJBLzkicZPubuUOj0dd0tns6R6MicqT3eVuPmR5Niabcm4AXDc8iaiaHwYJlCw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>现在当我们访问 <a href="http://selfboot.cn">selfboot.cn</a> 时，DNSpod就会将请求解析到 Github 提供的 IP 地址上。之后 Github 上面的博客托管服务器在所有用户的 CNAME 记录中，找到本次请求的域名对应的博客项目地址，比如说是 <a href="http://xuelangZF.github.io">xuelangZF.github.io</a>，然后返回博客内容。</p><h2 id="域名解析-2"><a class="markdownIt-Anchor" href="#域名解析-2"></a> 域名解析</h2><p>我们都知道一个域名的解析过程中，可能会有多台域名服务器给我们帮助，那么我们怎么能看到这些背后的功臣呢？先介绍两个常用的关于DNS的命令。</p><p>dig(Domain Information Groper), 是 UNIX/BSD 系统自带的 DNS 诊断工具，使用十分灵活、方便。</p><p>查询 <a href="http://selfboot.cn">selfboot.cn</a> 的A记录，并返回简短的结果：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJPROpenqRIUKib5HAwDLjJBSeTk5PNx8WicrJOjrSaSa7CfX9XM9Q6W8yJOlEAyXp2pH6PA1l5xdDA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>用 dig 还可以查询某一 ip 对应的域名，如下：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJPROpenqRIUKib5HAwDLjJBrxDkwqLUn825ZOxbaL7oGeibw3aSoibPJcqQib1fiaETibE9sctxo7ibFb6Q/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p><a href="http://xn--pages-kk2i182gw52aiv1coba340b.github.com">这里返回的是pages.github.com</a>，因为当你访问博客地址 <a href="http://selfboot.cn">selfboot.cn</a> 时，其实是Github的pages 服务器（域名是：<a href="http://pages.github.com">pages.github.com</a>）在后台返回该博客内容的（根据 CNAME 确定返回哪个博客）。</p><p>nslookup 也是一个 DNS 诊断工具，几乎所有平台都自带该工具，使用也很简答，可以用 man 查询手册。</p><h2 id="解析路径查询"><a class="markdownIt-Anchor" href="#解析路径查询"></a> 解析路径查询</h2><p>接下来用 dig 命令查看从根域名到指定域名中间可能经过的所有域名服务器，使用 <code>+trace</code> 选项即可。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJPROpenqRIUKib5HAwDLjJBfdEC6SnbVVeibUeS9B2Bs3BrwNfdBl8I11cJWlIMeP8TunDfRWLul2Q/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>可以看到最开始是13台顶级域名服务器的NS记录（中间省去一些记录减少行数，方便观察更清楚），接下来是顶级域名 cn. 的权威域名服务器（省略一些输出），然后是 <a href="http://selfboot.cn">selfboot.cn</a> 的 NS 记录，即 DNSpod 的两条 NS 记录，最后从 <a href="http://f1g1ns2.dnspod.net">f1g1ns2.dnspod.net</a> 找到 <a href="http://selfboot.cn">selfboot.cn</a> 的 A 记录。</p><p>seveas 提供了一个可视化的路径查询工具：dnsgraph，可以在线绘制跟域名到指定域名的所有可能路径。</p><p>当然，实际查询过程中，大多时候我们在本地缓存或者本地域名服务器缓存就能直接找到需要的域名记录，不需要每次都向根域名服务器发起请求，然后重复迭代或者递归查询过程。</p><h2 id="dns缺陷"><a class="markdownIt-Anchor" href="#dns缺陷"></a> DNS缺陷</h2><p>域名系统设计的很理想很美好，然而仍有一些小的瑕疵，可能会给我们带来些许困扰，首先，有些域名对注册人没有限制，而另外一些域名则对谁可以得到一个域名空间中名字有限制。比如pro域名是分配给合适的专业人员，但问题是谁才是专业的呢？显然医生、工程师是专业人员，但理发师、管道工呢？</p><p>此外，域名也可以被倒卖。黄牛们会批量注册大量域名（据说com域名下几乎每一个普通词都被人尝试注册了域名），然后转身就以高价转卖给那些对该域名感兴趣的人，这就是所谓的域名抢注。所以，现在你想注册一个符合自己网站特点的域名是很难的。</p><p>这个问题其实还不算严重，更要命的是下面两个问题。</p><h2 id="dns劫持"><a class="markdownIt-Anchor" href="#dns劫持"></a> DNS劫持</h2><p>我们知道一个域名服务器对其区域内的用户解析请求负责，但是并没有一个机制去监督它有没有真地负责。也就是说域名服务器的权力并没有被关在笼子里，所以它既可以认真地“为人民服务”，也可以<strong>指鹿为马</strong>。于是有些流氓的域名服务器故意更改一些域名的解析结果，将用户引向一个错误的目标地址。这就叫作 DNS 劫持，主要用来阻止用户访问某些特定的网站，或者是将用户引导到广告页面。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJPROpenqRIUKib5HAwDLjJBYLG7qoNRpIdRQcayHV2ibpv4IAMSuraPBqRxhUxNcDJajayGqpHHqGg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>下面验证下我所用的域名服务器有没有干这种坏事，只需要一条简单的命令即可：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJPROpenqRIUKib5HAwDLjJBEqlLue0icpEXrKmPmsUXXDyjNHxm4lA0gDoibyMqIeu6LTTft40H3rAw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>我的DNS服务器地址为10.8.4.4，他告诉我google.com的地址是120.196.0.5，我才不信呢。于是用<code>whois 120.196.0.5</code>一看，果真不是Google的地址。针对DNS劫持，我们可以简单地更换域名服务器，比较靠谱的一个是Google提供的8.8.8.8。下面用 8.8.8.8 来解析一下 <a href="http://www.google.com">www.google.com</a> 就能看到正确的地址了。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJPROpenqRIUKib5HAwDLjJBxGKPmQdhRx0h6CyUCsQibWmgnwnC4bPpMaoIUW5lSZXaqdKTVzibctfQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h2 id="dns欺骗"><a class="markdownIt-Anchor" href="#dns欺骗"></a> DNS欺骗</h2><p>DNS 劫持通过简单的切换域名服务器就可以绕过，不过一旦你遇上了 <code>DNS 欺骗</code>，就无法简单地绕过了。下面我们用不同的域名服务器来查看 fb 的 IP 地址，结果都返回了同一个地址，看起来好像是真的一样，不过也仅仅是看起来而已。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJPROpenqRIUKib5HAwDLjJBejyTncDB8aDnNAlvLFcsrJ4ZBHCfeo5tjiaPPC5A0TplOLibZSNtWXSQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>这个地址并不是 fb 的服务器地址（可以在 ViewDNS 查询所有域名<strong>真实的</strong>域名资源记录，ViewDNS是个很好玩的网站，里面有许多有意思的工具）。其实我Google了一下这个地址，竟然发现了一篇不错的译文，看来这个地址早在 2011 年就有了特殊的含义（英文原文是相关阅读第一个）。</p><p>DNS 欺骗简单来说就是用一个假的 DNS 应答来欺骗用户计算机，让其相信这个假的地址，并且抛弃真正的 DNS 应答。在一台主机发出 DNS 请求后，它就开始等待应答，如果此时有一个看起来正确（拥有和DNS请求一样的序列号）的应答包，它就会信以为真，并且丢弃稍晚一点到达的应答。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJPROpenqRIUKib5HAwDLjJBqUnibZh6kgXJiaEcKOwJaZ2LrdBO05UeTRqqDqKzXOHAngkzQmnTtkmQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>实施 DNS 欺骗的关键在于伪造一个有特定序列号的应答包，并且让其抢先一步到达发起请求的主机。这对于个人来说还有点难度，但是对于拥有骨干网节点的组织来说，实在是易如反掌，所以这么多网站都已沦陷。不过使用网上流传的那些 hosts文件，就可以在本机缓存许多网站的ip地址，进而可以和部分网站通信。但是通过hosts文件并不能完全 Cross the Great FireWall，因为人家还有很多其他手段。</p><h2 id="反向dns"><a class="markdownIt-Anchor" href="#反向dns"></a> 反向DNS</h2><p>反向DNS是已经知道IP的前提下，查询域名。反向DNS也是采用分层查询方式，对于一个IP地址(比如106.10.170.118)，依次查询<strong>in-addr.arpa节点</strong>(如果是IPv6，则为<strong>ip6.arpa节点</strong>)，106节点，10节点，170节点，并在该节点获得106.10.170.118对应的域名。</p><h1 id="计算机网络ssl协议"><a class="markdownIt-Anchor" href="#计算机网络ssl协议"></a> 计算机网络——SSL协议</h1><h2 id="非对称加密"><a class="markdownIt-Anchor" href="#非对称加密"></a> 非对称加密</h2><p>对称加密的原理相对比较直观，而非对称加密听起来就有些神奇。经过非对称加密产生的密文，就算知道加密的方法，也无法获知原文。实现了非对称加密的经典算法是RSA算法。它来自于数论与计算机计数的奇妙结合。我们从下面的情境中体验一下RSA算法的妙处。</p><p>我是潜伏在龙凤大酒楼的卧底。想让下面信息以加密的方式发到总部：A CHEF HIDE A BED，厨子藏起来了一张床！这是如此的重要，需要立即通知总部。千万重要的是，不能让反革命的厨子知道。</p><p>第一步是转码，也就是将英文转换成某个对应的数字。这个对应很容易建立，比如：</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJTpvIEVicXyj8jy3XK8wsqCk8vQjoWPZ1R75VbPJ7KcMe4iaRHLXNib5dbm07NIK2JrwqzmVpkDlXlw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>将上面的信息转码，获得下面的数字序列：</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJTpvIEVicXyj8jy3XK8wsqCUnicCS1121Z913HedWLJzmT8N8XpuGx4tkS119NgfUlmmwI8vbWBWGA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>这串数字完全没有什么秘密可言。厨子发现了这串数字之后，很容易根据数字顺序，对应字母表猜出来。</p><p>为了和狡猾的厨子斗智斗勇，我们需要对这串数字进一步加密。使用总部发给我们的锁，两个数字：3和10。我们分为两步处理。第一步是求乘方。第一个数字是3，也就是说，总部指示我们，求上面数字串的3次方：</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJTpvIEVicXyj8jy3XK8wsqC1LwXpf6niaERCXUqpX7OKNxr2xzkcH7icDzQ5jHGV87N4q8JjfcIhdrg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>将这串数字发回总部。中途被厨子偷看到，但一时不能了解其中的意思。如果还是像刚才一样对应字母表的话，信息是：AGBEFBIDEAHED，这串字母完全不包含正常的单词。</p><p>信息到了总部。总部开始用神奇的钥匙来解读。这个钥匙是3。在这个简单的粒子里，钥匙不小心和之前锁中的一个数字相同。但这只是巧合。复杂的情况下很容易让锁和钥匙不同。解锁过程也是两步。第一步求钥匙次的乘方，即3次方。第二步求它们除以10（锁之一）的余数。</p><p><img src="http://mmbiz.qpic.cn/mmbiz_png/FWANMMXDrgJTpvIEVicXyj8jy3XK8wsqCbcDl1zXNNzdTEHWl32sypjAwFeEmkyctlo97cLDgr8ZRbOqgsqkAwg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>这正是我们发送的信息。对应字母表，总部可以立即知道原来的信息。就此，我们简单的体验了RSA算法的使用过程。鉴于这里篇幅有限，这里不再详细解释RSA算法的原理。</p><h2 id="ssl协议"><a class="markdownIt-Anchor" href="#ssl协议"></a> SSL协议</h2><p>可以看到，非对称加密从安全性上要强过对称加密。但天下没有免费的午餐。非对称加密的运算成本同样也比较高。为了兼顾效率和安全，SSL协议同时使用了非对称和对称加密。它用对称加密算法来加密信息本身。但对于安全性比较脆弱的对称加密密钥，则采用非对称加密的方式来传输。</p><p>SSL协议分为客户端和服务器端。通信的核心步骤很简单：</p><p>（1）双方利用明文通信的方式确立使用的加密算法。</p><p>（2）利用非对称算法通信，交换一个密钥。</p><p>（3）该密钥用于对称加密算法，加密接下来的通信正文。</p><p>可以看到，SSL协议的关键是用一个非常安全的方式来交换一个对称密钥。交换的过程会比上面的描述更加复杂一些。</p><p>（1）客户发起请求时，除了说明自己支持的非对称加密算法，还会附加一个客户端随机数(client random)。</p><p>（2）服务器回复请求时，会确定非对称加密算法和哈希函数，并附上公钥。此外，服务器端还会在此次通信中附加一个服务器端随机数(server random)。</p><p>（3）客户端会产生第三个随机数(Premaster secret)，然后利用服务器确定的非对称加密算法和公钥来加密这个随机数，再发送给服务器端。</p><p>（4）客户端用自己的私钥解密第三个随机数。</p><p>（5）这样，客户端和服务器端都知道了三个随机数。双方各自用商量好的哈希函数从三个随机数获得对称加密的密钥。</p><p>即使明文通信的时候，某些信息被窃听，但第三步的非对称加密通信部分可以保证窃听者无法完整的获得三个随机数。这样，窃听者还是不知道对称加密的密钥是什么。这样，对称加密的密钥就在一个安全的环境中获得了。为了进一步安全，服务器的公钥会包含在一个数字证书中发送给客户。这样，客户还可以通过数字证书来验证服务器的身份，以免服务器本身出现问题。</p><p>今年来使用越来越广泛的HTTPS协议就是在SSL/TLS协议的基础上进行通信。HTTP协议在通信过程中要经过多重路由，很容易被窃听。经过SSL协议加密的信息就算被窃听，也只能被通信目的地的人解读，从而保证了信息的安全。所以，如果所访问的网站没有使用HTTPS协议，那么在输入银行账号和密码之类的敏感信息时，就要三思而后行了。</p><h2 id="一-ssl协议的握手过程"><a class="markdownIt-Anchor" href="#一-ssl协议的握手过程"></a> 一、SSL协议的握手过程</h2><p>开始加密通信之前，客户端和服务器首先必须建立连接和交换参数，这个过程叫做握手（handshake）。</p><p>握手阶段分成五步。</p><blockquote><p>第一步，爱丽丝给出协议版本号、一个客户端生成的随机数（Client random），以及客户端支持的加密方法。</p><p>第二步，鲍勃确认双方使用的加密方法，并给出数字证书、以及一个服务器生成的随机数（Server random）。</p><p>第三步，爱丽丝确认数字证书有效，然后生成一个新的随机数（Premaster secret），并使用数字证书中的公钥，加密这个随机数，发给鲍勃。</p><p>第四步，鲍勃使用自己的私钥，获取爱丽丝发来的随机数（即Premaster secret）。</p><p>第五步，爱丽丝和鲍勃根据约定的加密方法，使用前面的三个随机数，生成&quot;对话密钥&quot;（session key），用来加密接下来的整个对话过程。</p></blockquote><p><img src="/2020/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/D:%5C%E9%9D%A2%E8%AF%95%5CSSL%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E5%9B%BE%5Cbg2014092003.png" alt="bg2014092003"></p><h2 id="二-私钥的作用"><a class="markdownIt-Anchor" href="#二-私钥的作用"></a> 二、私钥的作用</h2><p>握手阶段有三点需要注意。</p><blockquote><p>（1）生成对话密钥一共需要三个随机数。</p><p>（2）握手之后的对话使用&quot;对话密钥&quot;加密（对称加密），服务器的公钥和私钥只用于加密和解密&quot;对话密钥&quot;（非对称加密），无其他作用。</p><p>（3）服务器公钥放在服务器的数字证书之中。</p></blockquote><p>从上面第二点可知，整个对话过程中（握手阶段和其后的对话），服务器的公钥和私钥只需要用到一次。这就是CloudFlare能够提供Keyless服务的根本原因。</p><p>某些客户（比如银行）想要使用外部CDN，加快自家网站的访问速度，但是出于安全考虑，不能把私钥交给CDN服务商。这时，完全可以把私钥留在自家服务器，只用来解密对话密钥，其他步骤都让CDN服务商去完成。</p><p><img src="/2020/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/D:%5C%E9%9D%A2%E8%AF%95%5CSSL%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E5%9B%BE%5Cbg2014092005.png" alt="bg2014092005"></p><p>上图中，银行的服务器只参与第四步，后面的对话都不再会用到私钥了。</p><h2 id="三-dh算法的握手阶段"><a class="markdownIt-Anchor" href="#三-dh算法的握手阶段"></a> 三、DH算法的握手阶段</h2><p>整个握手阶段都不加密（也没法加密），都是明文的。因此，如果有人窃听通信，他可以知道双方选择的加密方法，以及三个随机数中的两个。整个通话的安全，只取决于第三个随机数（Premaster secret）能不能被破解。</p><p>虽然理论上，只要服务器的公钥足够长（比如2048位），那么Premaster secret可以保证不被破解。但是为了足够安全，我们可以考虑把握手阶段的算法从默认的<a href="http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html">RSA算法</a>，改为 <a href="http://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2%EF%BC%8D%E8%B5%AB%E5%B0%94%E6%9B%BC%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2">Diffie-Hellman算法</a>（简称DH算法）。</p><p>采用DH算法后，Premaster secret不需要传递，双方只要交换各自的参数，就可以算出这个随机数。</p><p><img src="/2020/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/D:%5C%E9%9D%A2%E8%AF%95%5CSSL%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E5%9B%BE%5Cbg2014092007.png" alt="bg2014092007"></p><p>上图中，第三步和第四步由传递Premaster secret变成了传递DH算法所需的参数，然后双方各自算出Premaster secret。这样就提高了安全性。</p><h2 id="四-session的恢复"><a class="markdownIt-Anchor" href="#四-session的恢复"></a> 四、session的恢复</h2><p>握手阶段用来建立SSL连接。如果出于某种原因，对话中断，就需要重新握手。</p><p>这时有两种方法可以恢复原来的session：一种叫做session ID，另一种叫做session ticket。</p><p>session ID的思想很简单，就是每一次对话都有一个编号（session ID）。如果对话中断，下次重连的时候，只要客户端给出这个编号，且服务器有这个编号的记录，双方就可以重新使用已有的&quot;对话密钥&quot;，而不必重新生成一把。</p><p><img src="/2020/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/D:%5C%E9%9D%A2%E8%AF%95%5CSSL%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E5%9B%BE%5Cbg2014092009.png" alt="bg2014092009"></p><p>上图中，客户端给出session ID，服务器确认该编号存在，双方就不再进行握手阶段剩余的步骤，而直接用已有的对话密钥进行加密通信。</p><p>session ID是目前所有浏览器都支持的方法，但是它的缺点在于session ID往往只保留在一台服务器上。所以，如果客户端的请求发到另一台服务器，就无法恢复对话。session ticket就是为了解决这个问题而诞生的，目前只有Firefox和Chrome浏览器支持。</p><p><img src="/2020/03/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/D:%5C%E9%9D%A2%E8%AF%95%5CSSL%E5%8D%8F%E8%AE%AE%E5%8E%9F%E7%90%86%E5%9B%BE%5Cbg2014092011.png" alt="bg2014092011"></p><p>上图中，客户端不再发送session ID，而是发送一个服务器在上一次对话中发送过来的session ticket。这个session ticket是加密的，只有服务器才能解密，其中包括本次对话的主要信息，比如对话密钥和加密方法。当服务器收到session ticket以后，解密后就不必重新生成对话密钥了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机网络&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机网络&quot;&gt;&lt;/a&gt; 计算机网络&lt;/h1&gt;
&lt;h2 id=&quot;网络层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#网络层&quot;&gt;&lt;/a&gt; 网络层&lt;/h2</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://duanjiaojiao316.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql命令</title>
    <link href="https://duanjiaojiao316.github.io/2020/02/23/mysql%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/"/>
    <id>https://duanjiaojiao316.github.io/2020/02/23/mysql%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-23T12:57:04.000Z</published>
    <updated>2021-04-20T07:44:33.815Z</updated>
    
    <content type="html"><![CDATA[<p>Windows服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 启动服务</span><br><span class="line">net start mysql</span><br><span class="line">-- 创建Windows服务(注意等号与值之间有空格)</span><br><span class="line">sc create mysql binPath&#x3D; mysql_bin_path</span><br></pre></td></tr></table></figure><p>连接与断开服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 地址 -P 端口 -u 用户名 -p 密码</span><br><span class="line"></span><br><span class="line">SHOW PROCESSLIST -- 显示那些线程正在运行</span><br><span class="line">SHOW VARIABLES -- 显示系统变量信息</span><br></pre></td></tr></table></figure><p>数据库操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 查看当前数据库</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">-- 显示当前时间、用户名、数据库版本</span><br><span class="line">SELECT now(),user(),version();</span><br><span class="line">-- 创建库</span><br><span class="line">CREATE DATABASE[IF NOT EXISTS] 数据库名 数据库选项</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa</summary>
      
    
    
    
    <category term="数据库" scheme="https://duanjiaojiao316.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="mysql命令" scheme="https://duanjiaojiao316.github.io/tags/mysql%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Spring 框架两大核心机制（IoC、AOP）</title>
    <link href="https://duanjiaojiao316.github.io/2020/02/23/Spring%20%E6%A1%86%E6%9E%B6%E4%B8%A4%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6%EF%BC%88IoC%E3%80%81AOP%EF%BC%89/"/>
    <id>https://duanjiaojiao316.github.io/2020/02/23/Spring%20%E6%A1%86%E6%9E%B6%E4%B8%A4%E5%A4%A7%E6%A0%B8%E5%BF%83%E6%9C%BA%E5%88%B6%EF%BC%88IoC%E3%80%81AOP%EF%BC%89/</id>
    <published>2020-02-23T12:57:04.000Z</published>
    <updated>2021-04-20T07:44:33.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring-框架两大核心机制ioc-aop"><a class="markdownIt-Anchor" href="#spring-框架两大核心机制ioc-aop"></a> Spring 框架两大核心机制（IoC、AOP）</h1><h2 id="ioc控制反转-di依赖注入"><a class="markdownIt-Anchor" href="#ioc控制反转-di依赖注入"></a> IoC（控制反转）/ DI（依赖注入）</h2><h2 id="aop面向切面编程"><a class="markdownIt-Anchor" href="#aop面向切面编程"></a> AOP（面向切面编程）</h2><p>Spring 是一个企业级开发框架，是软件设计层面的框架，优势在于可以将应用程序进行分层，开发者可以自主选择组件。</p><p>MVC：Struts2、Spring MVC</p><p>ORMapping：Hibernate、MyBatis、Spring Data</p><h3 id="ioc"><a class="markdownIt-Anchor" href="#ioc"></a> IoC</h3><h4 id="创建-maven-工程pomxml-添加依赖"><a class="markdownIt-Anchor" href="#创建-maven-工程pomxml-添加依赖"></a> 创建 Maven 工程，pom.xml 添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.southwind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aispringioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建实体类-student"><a class="markdownIt-Anchor" href="#创建实体类-student"></a> 创建实体类 Student</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="传统的开发方式手动-new-student"><a class="markdownIt-Anchor" href="#传统的开发方式手动-new-student"></a> 传统的开发方式，手动 new Student</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setId(<span class="number">1L</span>);</span><br><span class="line">student.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">student.setAge(<span class="number">22</span>);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><h4 id="通过-ioc-创建对象在配置文件中添加需要管理的对象xml-格式的配置文件文件名可以自定义"><a class="markdownIt-Anchor" href="#通过-ioc-创建对象在配置文件中添加需要管理的对象xml-格式的配置文件文件名可以自定义"></a> 通过 IoC 创建对象，在配置文件中添加需要管理的对象，XML 格式的配置文件，文件名可以自定义。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="配置文件"><a class="markdownIt-Anchor" href="#配置文件"></a> 配置文件</h5><ul><li><p>通过配置 <code>bean</code> 标签来完成对象的管理。</p><ul><li><p><code>id</code>：对象名。</p></li><li><p><code>class</code>：对象的模版类（所有交给 IoC 容器来管理的类必须有无参构造函数，因为 Spring 底层是通过反射机制来创建对象，调用的是无参构造）</p></li></ul></li><li><p>对象的成员变量通过 <code>property</code> 标签完成赋值。</p><ul><li><code>name</code>：成员变量名。</li><li><code>value</code>：成员变量值（基本数据类型，String 可以直接赋值，如果是其他引用类型，不能通过 value 赋值）</li><li><code>ref</code>：将 IoC 中的另外一个 bean 赋给当前的成员变量（DI）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="从-ioc-中获取对象通过-id-获取"><a class="markdownIt-Anchor" href="#从-ioc-中获取对象通过-id-获取"></a> 从 IoC 中获取对象，通过 id 获取。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载配置文件</span></span><br><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">Student student = (Student) applicationContext.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">System.out.println(student</span><br></pre></td></tr></table></figure><h3 id="ioc-底层原理"><a class="markdownIt-Anchor" href="#ioc-底层原理"></a> IoC 底层原理</h3><ul><li>读取配置文件，解析 XML。</li><li>通过反射机制实例化配置文件中所配置所有的 bean。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.dom4j.Document;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.DocumentException;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.Element;</span><br><span class="line"><span class="keyword">import</span> org.dom4j.io.SAXReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathXmlApplicationContext</span> <span class="keyword">implements</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; ioc = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathXmlApplicationContext</span><span class="params">(String path)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SAXReader reader = <span class="keyword">new</span> SAXReader();</span><br><span class="line">            Document document = reader.read(<span class="string">&quot;./src/main/resources/&quot;</span>+path);</span><br><span class="line">            Element root = document.getRootElement();</span><br><span class="line">            Iterator&lt;Element&gt; iterator = root.elementIterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                Element element = iterator.next();</span><br><span class="line">                String id = element.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">                String className = element.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">                <span class="comment">//通过反射机制创建对象</span></span><br><span class="line">                Class clazz = Class.forName(className);</span><br><span class="line">                <span class="comment">//获取无参构造函数，创建目标对象</span></span><br><span class="line">                Constructor constructor = clazz.getConstructor();</span><br><span class="line">                Object object = constructor.newInstance();</span><br><span class="line">                <span class="comment">//给目标对象赋值</span></span><br><span class="line">                Iterator&lt;Element&gt; beanIter = element.elementIterator();</span><br><span class="line">                <span class="keyword">while</span>(beanIter.hasNext())&#123;</span><br><span class="line">                    Element property = beanIter.next();</span><br><span class="line">                    String name = property.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                    String valueStr = property.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                    String ref = property.attributeValue(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span>(ref == <span class="keyword">null</span>)&#123;</span><br><span class="line">                        String methodName = <span class="string">&quot;set&quot;</span>+name.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase()+name.substring(<span class="number">1</span>);</span><br><span class="line">                        Field field = clazz.getDeclaredField(name);</span><br><span class="line">                        Method method = clazz.getDeclaredMethod(methodName,field.getType());</span><br><span class="line">                        <span class="comment">//根据成员变量的数据类型将 value 进行转换</span></span><br><span class="line">                        Object value = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;long&quot;</span>)&#123;</span><br><span class="line">                            value = Long.parseLong(valueStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;java.lang.String&quot;</span>)&#123;</span><br><span class="line">                            value = valueStr;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(field.getType().getName() == <span class="string">&quot;int&quot;</span>)&#123;</span><br><span class="line">                            value = Integer.parseInt(valueStr);</span><br><span class="line">                        &#125;</span><br><span class="line">                        method.invoke(object,value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ioc.put(id,object);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DocumentException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ioc.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过运行时类获取-bean"><a class="markdownIt-Anchor" href="#通过运行时类获取-bean"></a> 通过运行时类获取 bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;spring.xml&quot;</span>);</span><br><span class="line">Student student = (Student) applicationContext.getBean(Student.class);</span><br><span class="line">System.out.println(student);</span><br></pre></td></tr></table></figure><p>这种方式存在一个问题，配置文件中一个数据类型的对象只能有一个实例，否则会抛出异常，因为没有唯一的 bean。</p><h3 id="通过有参构造创建-bean"><a class="markdownIt-Anchor" href="#通过有参构造创建-bean"></a> 通过有参构造创建 bean</h3><ul><li>在实体类中创建对应的有参构造函数。</li><li>配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小明&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;3&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="给-bean-注入集合"><a class="markdownIt-Anchor" href="#给-bean-注入集合"></a> 给 bean 注入集合</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;33&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addresses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;高新区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="scope-作用域"><a class="markdownIt-Anchor" href="#scope-作用域"></a> scope 作用域</h3><p>Spring 管理的 bean 是根据 scope 来生成的，表示 bean 的作用域，共4种，默认值是 singleton。</p><ul><li>singleton：单例，表示通过 IoC 容器获取的 bean 是唯一的。</li><li>prototype：原型，表示通过 IoC 容器获取的 bean 是不同的。</li><li>request：请求，表示在一次 HTTP 请求内有效。</li><li>session：回话，表示在一个用户会话内有效。</li></ul><p>request 和 session 只适用于 Web 项目，大多数情况下，使用单例和原型较多。</p><p>prototype 模式当业务代码获取 IoC 容器中的 bean 时，Spring 才去调用无参构造创建对应的 bean。</p><p>singleton 模式无论业务代码是否获取 IoC 容器中的 bean，Spring 在加载 spring.xml 时就会创建 bean。</p><h3 id="spring-的继承"><a class="markdownIt-Anchor" href="#spring-的继承"></a> Spring 的继承</h3><p>与 Java 的继承不同，Java 是类层面的继承，子类可以继承父类的内部结构信息；Spring 是对象层面的继承，子对象可以继承父对象的属性值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addresses&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;address2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;高新区&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;student2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring 的继承关注点在于具体的对象，而不在于类，即不同的两个类的实例化对象可以完成继承，<strong>前提是子对象必须包含父对象的所有属性，同时可以在此基础上添加其他的属性。</strong></p><h3 id="spring-的依赖"><a class="markdownIt-Anchor" href="#spring-的依赖"></a> Spring 的依赖</h3><p>与继承类似，依赖也是描述 bean 和 bean 之间的一种关系，配置依赖之后，被依赖的 bean 一定先创建，再创建依赖的 bean，A 依赖于 B，先创建 B，再创建 A。通过依赖关系调整bean创建的先后顺序。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span> <span class="attr">depends-on</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.User&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-的-p-命名空间"><a class="markdownIt-Anchor" href="#spring-的-p-命名空间"></a> Spring 的 p 命名空间</h3><p>p 命名空间是对 IoC / DI 的简化操作，使用 p 命名空间可以更加方便的完成 bean 的配置以及 bean 之间的依赖注入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Student&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;张三&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;22&quot;</span> <span class="attr">p:address-ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Address&quot;</span> <span class="attr">p:id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;科技路&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="spring-的工厂方法"><a class="markdownIt-Anchor" href="#spring-的工厂方法"></a> Spring 的工厂方法</h3><p>IoC 通过工厂模式创建 bean 的方式有两种：</p><ul><li>静态工厂方法</li><li>实例工厂方法</li></ul><blockquote><p>静态工厂方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Long, Car&gt; carMap;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        carMap = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        carMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1L</span>,<span class="string">&quot;宝马&quot;</span>));</span><br><span class="line">        carMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2L</span>,<span class="string">&quot;奔驰&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置静态工厂创建 Car --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.factory.StaticCarFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>实例工厂方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.entity.Car;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Long, Car&gt; carMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstanceCarFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        carMap = <span class="keyword">new</span> HashMap&lt;Long, Car&gt;();</span><br><span class="line">        carMap.put(<span class="number">1L</span>,<span class="keyword">new</span> Car(<span class="number">1L</span>,<span class="string">&quot;宝马&quot;</span>));</span><br><span class="line">        carMap.put(<span class="number">2L</span>,<span class="keyword">new</span> Car(<span class="number">2L</span>,<span class="string">&quot;奔驰&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(<span class="keyword">long</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> carMap.get(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置实例工厂 bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;carFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.factory.InstanceCarFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 赔偿实例工厂创建 Car --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car2&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;carFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getCar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ioc-自动装载autowire"><a class="markdownIt-Anchor" href="#ioc-自动装载autowire"></a> IoC 自动装载（Autowire）</h3><p>IoC 负责创建对象，DI 负责完成对象的依赖注入，通过配置 property 标签的 ref 属性来完成，同时 Spring 提供了另外一种更加简便的依赖注入方式：自动装载，不需要手动配置 property，IoC 容器会自动选择 bean 完成注入。</p><p>自动装载有两种方式：</p><ul><li>byName：通过属性名自动装载</li><li>byType：通过属性的数据类型自动装载</li></ul><blockquote><p>byName</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cars&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;宝马&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>byType</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;奔驰&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;person&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.southwind.entity.Person&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>byType 需要注意，如果同时存在两个及以上的符合条件的 bean 时，自动装载会抛出异常。</p><h3 id="aop"><a class="markdownIt-Anchor" href="#aop"></a> AOP</h3><p>AOP：Aspect Oriented Programming 面向切面编程。</p><p>AOP 的优点：</p><ul><li>降低模块之间的耦合度。</li><li>使系统更容易扩展。</li><li>更好的代码复用。</li><li>非业务代码更加集中，不分散，便于统一管理。</li><li>业务代码更加简洁存粹，不参杂其他代码的影响。</li></ul><p>AOP 是对面向对象编程的一个补充，在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面编程。将不同方法的同一个位置抽象成一个切面对象，对该切面对象进行编程就是 AOP。</p><h3 id="如何使用"><a class="markdownIt-Anchor" href="#如何使用"></a> 如何使用？</h3><ul><li>创建 Maven 工程，pom.xml 添加</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.11.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>创建一个计算器接口 Cal，定义4个方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建接口的实现类 CalImpl。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.utils.Cal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalImpl</span> <span class="keyword">implements</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1+num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;add方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1-num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;sub方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mul方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1*num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;mul方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;div方法的参数是[&quot;</span>+num1+<span class="string">&quot;,&quot;</span>+num2+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> result = num1/num2;</span><br><span class="line">        System.out.println(<span class="string">&quot;div方法的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码中，日志信息和业务逻辑的耦合性很高，不利于系统的维护，使用 AOP 可以进行优化，如何来实现 AOP？使用动态代理的方式来实现。</p><h4 id="动态代理"><a class="markdownIt-Anchor" href="#动态代理"></a> 动态代理</h4><p>给业务代码找一个代理，打印日志信息的工作交个代理来做，这样的话业务代码就只需要关注自身的业务即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">//接收委托对象</span></span><br><span class="line">    <span class="keyword">private</span> Object object = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.object = object;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(),object.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(method.getName()+<span class="string">&quot;方法的参数是：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">        Object result = method.invoke(<span class="keyword">this</span>.object,args);</span><br><span class="line">        System.out.println(method.getName()+<span class="string">&quot;的结果是&quot;</span>+result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是通过动态代理实现 AOP 的过程，比较复杂，不好理解，Spring 框架对 AOP 进行了封装，使用 Spring 框架可以用面向对象的思想来实现 AOP。</p><h4 id="spring框架封装动态代理"><a class="markdownIt-Anchor" href="#spring框架封装动态代理"></a> Spring框架封装动态代理</h4><p>Spring 框架中不需要创建 InvocationHandler，只需要创建一个切面对象，将所有的非业务代码在切面对象中完成即可，Spring 框架底层会自动根据切面类以及目标类生成一个代理对象。</p><p>LoggerAspect</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        <span class="comment">//获取参数</span></span><br><span class="line">        String args = Arrays.toString(joinPoint.getArgs());</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法的参数是：&quot;</span>+ args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;,returning = &quot;result&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(JoinPoint joinPoint,Object result)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法的结果是&quot;</span>+result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public int com.southwind.utils.impl.CalImpl.*(..))&quot;,throwing = &quot;exception&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">(JoinPoint joinPoint,Exception exception)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        String name = joinPoint.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法抛出异常：&quot;</span>+exception);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoggerAspect 类定义处添加的两个注解：</p><ul><li><code>@Aspect</code>：表示该类是切面类。</li><li><code>@Component</code>：将该类的对象注入到 IoC 容器。</li></ul><p>具体方法处添加的注解：</p><p><code>@Before</code>：表示方法执行的具体位置和时机。</p><p>CalImpl 也需要添加 <code>@Component</code>，交给 IoC 容器来管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.southwind.utils.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.southwind.utils.Cal;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalImpl</span> <span class="keyword">implements</span> <span class="title">Cal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1+num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1-num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1*num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num1/num2;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>spring.xml 中配置 AOP。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.southwind&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 是Aspect注解生效，为目标类自动生成代理对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>context:component-scan</code> 将 <code>com.southwind</code> 包中的所有类进行扫描，如果该类同时添加了 <code>@Component</code>，则将该类扫描到 IoC 容器中，即 IoC 管理它的对象。</p><p><code>aop:aspectj-autoproxy</code> 让 Spring 框架结合切面类和目标类自动生成动态代理对象。</p><ul><li>切面：横切关注点被模块化的抽象对象。</li><li>通知：切面对象完成的工作。</li><li>目标：被通知的对象，即被横切的对象。</li><li>代理：切面、通知、目标混合之后的对象。</li><li>连接点：通知要插入业务代码的具体位置。</li><li>切点：AOP 通过切点定位到连接点。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spring-框架两大核心机制ioc-aop&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#spring-框架两大核心机制ioc-aop&quot;&gt;&lt;/a&gt; Spring 框架两大核心机制（IoC、AOP）&lt;/h1&gt;
&lt;h2 id=&quot;ioc控制</summary>
      
    
    
    
    <category term="后端" scheme="https://duanjiaojiao316.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Spring" scheme="https://duanjiaojiao316.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>阅读redis设计与实现笔记</title>
    <link href="https://duanjiaojiao316.github.io/2020/02/23/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/"/>
    <id>https://duanjiaojiao316.github.io/2020/02/23/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-02-23T12:57:04.000Z</published>
    <updated>2021-05-11T07:46:36.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis设计与实现笔记"><a class="markdownIt-Anchor" href="#redis设计与实现笔记"></a> redis设计与实现笔记</h1><h2 id="第一部分-数据结构与对象"><a class="markdownIt-Anchor" href="#第一部分-数据结构与对象"></a> 第一部分 数据结构与对象</h2><h3 id="1简单动态字符串"><a class="markdownIt-Anchor" href="#1简单动态字符串"></a> 1.简单动态字符串</h3><h3 id="2链表"><a class="markdownIt-Anchor" href="#2链表"></a> 2.链表</h3><h3 id="3字典"><a class="markdownIt-Anchor" href="#3字典"></a> 3.字典</h3><h3 id="4跳跃表"><a class="markdownIt-Anchor" href="#4跳跃表"></a> 4.跳跃表</h3><h3 id="5整数集合"><a class="markdownIt-Anchor" href="#5整数集合"></a> 5.整数集合</h3><h3 id="6压缩列表"><a class="markdownIt-Anchor" href="#6压缩列表"></a> 6.压缩列表</h3><h3 id="7对象"><a class="markdownIt-Anchor" href="#7对象"></a> 7.对象</h3><h2 id="第二部分-单机数据库的实现"><a class="markdownIt-Anchor" href="#第二部分-单机数据库的实现"></a> 第二部分 单机数据库的实现</h2><h3 id="9数据库"><a class="markdownIt-Anchor" href="#9数据库"></a> 9.数据库</h3><h3 id="10rdb持久化"><a class="markdownIt-Anchor" href="#10rdb持久化"></a> 10.RDB持久化</h3><h3 id="11aof持久化"><a class="markdownIt-Anchor" href="#11aof持久化"></a> 11.AOF持久化</h3><h3 id="12事件"><a class="markdownIt-Anchor" href="#12事件"></a> 12.事件</h3><h3 id="13客户端"><a class="markdownIt-Anchor" href="#13客户端"></a> 13.客户端</h3><h3 id="14服务器端"><a class="markdownIt-Anchor" href="#14服务器端"></a> 14.服务器端</h3><h2 id="第三部分-多机数据库的实现"><a class="markdownIt-Anchor" href="#第三部分-多机数据库的实现"></a> 第三部分 多机数据库的实现</h2><h3 id="15复制"><a class="markdownIt-Anchor" href="#15复制"></a> 15.复制</h3><h3 id="16sential"><a class="markdownIt-Anchor" href="#16sential"></a> 16.Sential</h3><h3 id="17集群"><a class="markdownIt-Anchor" href="#17集群"></a> 17.集群</h3><h2 id="第四部分-独立功能的实现"><a class="markdownIt-Anchor" href="#第四部分-独立功能的实现"></a> 第四部分 独立功能的实现</h2><h3 id="18发布与订阅"><a class="markdownIt-Anchor" href="#18发布与订阅"></a> 18.发布与订阅</h3><h3 id="19事务"><a class="markdownIt-Anchor" href="#19事务"></a> 19.事务</h3><p>一个事务包含了多个命令，服务器在执行事务期间，不会改去执行其它客户端的命令请求。</p><p>事务中的多个命令被一次性发送给服务器，而不是一条一条发送，这种方式被称为流水线，它可以减少客户端与服务器之间的网络通信次数从而提升性能。</p><p><code>Redis</code> 最简单的事务实现方式是使用 MULTI 和 EXEC 命令将事务操作包围起来。</p><h4 id="为什么redis不支持回滚"><a class="markdownIt-Anchor" href="#为什么redis不支持回滚"></a> <strong>为什么<code>Redis</code>不支持回滚</strong></h4><p><code>Redis</code>命令在事务中可能会执行失败，但是<code>Redis</code>事务不会回滚，而是继续会执行余下的命令。如果您有一个关系型数据库的知识，这对您来说可能会感到奇怪，因为关系型数据在这种情况下都是会回滚的。</p><p><code>Redis</code>这样做，主要是因为:只有当发生语法错误(这个问题在命令队列时无法检测到)了，<code>Redis</code>命令才会执行失败, 或对keys赋予了一个类型错误的数据：这意味着这些都是程序性错误，这类错误在开发的过程中就能够发现并解决掉，几乎不会出现在生产环境。由于不需要回滚，这使得<code>Redis</code>内部更加简单，而且运行速度更快。</p><h3 id="20lua脚本"><a class="markdownIt-Anchor" href="#20lua脚本"></a> 20.lua脚本</h3><h3 id="21排序"><a class="markdownIt-Anchor" href="#21排序"></a> 21.排序</h3><h3 id="22二进制数组"><a class="markdownIt-Anchor" href="#22二进制数组"></a> 22.二进制数组</h3><ul><li><code>SETBIT</code>为二进制数组指定偏移上的二进制位设置值</li><li><code>GETBIT</code>获取二进制数组中指定偏移的二进制位的值</li><li><code>BITCOUNT</code>计算二进制数组中以1为值的二进制位有多少个</li><li><code>BITOP</code>可以对多个二进制数组进行按位与、按位或、按位异或、取反等操作。</li></ul><p>字符串对象表示位数组，因为字符串对象使用SDS数据结构是二进制安全的，可以直接使用SDS数据结构来保存维数组。</p><p>SDS数据结构中buf数组中的顺序和平时书写顺序相反。</p><h3 id="23慢查询日志"><a class="markdownIt-Anchor" href="#23慢查询日志"></a> 23.慢查询日志</h3><p>记录执行时间超过给定时长的命令请求，用户通过慢日志查询的日志来监视和优化查询速度。</p><ul><li><code>slowlog-log-slower-than</code> 指定执行时间超过多少微妙的命令请求会被记录在日志之中。设置为0，所有的请求都会记录在日志中。</li><li><code>slowlog-log-max-len</code>指定服务器最多可以保存多少命令请求。如果设置为5，服务器最多只能存储5个命令请求，以先进先出的方式保存，如果指令数量已经是<code>slowlog-log-max-len</code>，删除最旧的命令请求添加新的命令请求。</li></ul><p><code>SLOWLOG GET</code>命令查看服务器存储的慢查询日志。</p><p><img src="/2020/02/23/redis%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E7%AC%94%E8%AE%B0/D:%5C%E9%9D%A2%E8%AF%95%5Cspringbootimages%5Cimage-20191124211640527.png" alt="image-20191124211640527"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">slowlogEntry</span>&#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> id;<span class="comment">//唯一标识符</span></span><br><span class="line">    <span class="keyword">time_t</span> time;<span class="comment">//命令执行时的时间，Unix时间戳</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> duration;<span class="comment">//执行命令消耗的时间</span></span><br><span class="line">    robj **argv;<span class="comment">//命令与命令参数</span></span><br><span class="line">    <span class="keyword">int</span> argc;<span class="comment">//命令与命令参数的个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SLOWLOG_RESET</code>清除慢查询日志中的所有日志。</p><p>添加新的日志</p><ol><li>检查是否超过<code>slowlog-log-slower-than</code> ，如果查过创建一个新的日志添加在<code>slowlog</code>链表的表头。</li><li>判断链表的长度是否查过<code>slowlog-log-max-len</code>，如果查过就从链表的表尾删除一个。</li></ol><h3 id="24监视器"><a class="markdownIt-Anchor" href="#24监视器"></a> 24.监视器</h3><p>通过MONITOR 命令客户端将自己变为一个监视器，实时接收打印服务器端处理命令请求的信息。当一个客户端向服务器发送一个请求，服务器除了处理命令请求还会将所有的信息发送给所有的监视器。</p><p><code>list *monitor</code> 记录打开REDIS_MONITOR标志的客户端，也就是将自己变成监视器的客户端。</p><p>服务器端调用<code>replicationFeedMonitors</code>该函数来实现发送信息给所有监视器。</p><h2 id="第五部分-面试题"><a class="markdownIt-Anchor" href="#第五部分-面试题"></a> 第五部分 面试题</h2><h3 id="1redis-具体有-6-种内存淘汰策略"><a class="markdownIt-Anchor" href="#1redis-具体有-6-种内存淘汰策略"></a> 1.<code>Redis</code> 具体有 6 种内存淘汰策略：</h3><h4 id="内存淘汰策略"><a class="markdownIt-Anchor" href="#内存淘汰策略"></a> 内存淘汰策略</h4><table><thead><tr><th>策略</th><th>描述</th></tr></thead><tbody><tr><td><code>volatile-lru</code></td><td>从已设置过期时间的数据集中挑选<strong>最近最少使用</strong>的数据淘汰</td></tr><tr><td><code>volatile-ttl</code></td><td>从已设置过期时间的数据集中挑选<strong>更早过期</strong>的数据淘汰</td></tr><tr><td><code>volatile-random</code></td><td>从已设置过期时间的数据集中<strong>任意选择</strong>数据淘汰</td></tr><tr><td><code>allkeys-lru</code></td><td>从所有数据集中挑选<strong>最近最少使用</strong>的数据淘汰</td></tr><tr><td><code>allkeys-random</code></td><td>从所有数据集中<strong>任意选择</strong>数据进行淘汰</td></tr><tr><td><code>noeviction</code></td><td>当内存不足以容纳新写入数据时，<strong>新写入操作会报错</strong></td></tr></tbody></table><h4 id="redis-过期策略"><a class="markdownIt-Anchor" href="#redis-过期策略"></a> redis 过期策略</h4><p>redis 过期策略是：<strong>定期删除+惰性删除</strong>。</p><p>所谓<strong>定期删除</strong>，指的是 redis 默认是每隔 100ms 就随机抽取一些设置了过期时间的 key，检查其是否过期，如果过期就删除。</p><p>假设 redis 里放了 10w 个 key，都设置了过期时间，你每隔几百毫秒，就检查 10w 个 key，那 redis 基本上就死了，cpu 负载会很高的，消耗在你的检查过期 key 上了。注意，这里可不是每隔 100ms 就遍历所有的设置过期时间的 key，那样就是一场性能上的<strong>灾难</strong>。实际上 redis 是每隔 100ms <strong>随机抽取</strong>一些 key 来检查和删除的。</p><p>但是问题是，定期删除可能会导致很多过期 key 到了时间并没有被删除掉，那咋整呢？所以就是惰性删除了。这就是说，在你<strong>获取某个 key 的时候，redis 会检查一下 ，这个 key 如果设置了过期时间那么是否过期了？如果过期了此时就会删除，不会给你返回任何东西。</strong></p><blockquote><p>获取 key 的时候，如果此时 key 已经过期，就删除，不会返回任何东西。</p></blockquote><p>但是实际上这还是有问题的，如果定期删除<strong>漏掉了很多过期 key</strong>，然后你也没及时去查，也就没走惰性删除，此时会怎么样？如果大量过期 key 堆积在内存里，导致 redis 内存块耗尽了，咋整？</p><p>答案是：<strong>走内存淘汰机制</strong>。</p><h3 id="2项目中缓存是如何使用的"><a class="markdownIt-Anchor" href="#2项目中缓存是如何使用的"></a> 2.项目中缓存是如何使用的？</h3><p>这个，需要结合自己项目的业务来。</p><h4 id="为什么要用缓存"><a class="markdownIt-Anchor" href="#为什么要用缓存"></a> 为什么要用缓存？</h4><p>用缓存，主要有两个用途：<strong>高性能</strong>、<strong>高并发</strong>。</p><h5 id="高性能"><a class="markdownIt-Anchor" href="#高性能"></a> 高性能</h5><p>假设这么个场景，你有个操作，一个请求过来，吭哧吭哧你各种乱七八糟操作 mysql，半天查出来一个结果，耗时 600ms。但是这个结果可能接下来几个小时都不会变了，或者变了也可以不用立即反馈给用户。那么此时咋办？</p><p>缓存啊，折腾 600ms 查出来的结果，扔缓存里，一个 key 对应一个 value，下次再有人查，别走 mysql 折腾 600ms 了，直接从缓存里，通过一个 key 查出来一个 value，2ms 搞定。性能提升 300 倍。</p><p>就是说对于一些需要复杂操作耗时查出来的结果，且确定后面不怎么变化，但是有很多读请求，那么直接将查询出来的结果放在缓存中，后面直接读缓存就好。</p><h5 id="高并发"><a class="markdownIt-Anchor" href="#高并发"></a> 高并发</h5><p>mysql 这么重的数据库，压根儿设计不是让你玩儿高并发的，虽然也可以玩儿，但是天然支持不好。mysql 单机支撑到 <code>2000QPS</code> 也开始容易报警了。</p><p>所以要是你有个系统，高峰期一秒钟过来的请求有 1万，那一个 mysql 单机绝对会死掉。你这个时候就只能上缓存，把很多数据放缓存，别放 mysql。缓存功能简单，说白了就是 <code>key-value</code> 式操作，单机支撑的并发量轻松一秒几万十几万，支撑高并发 so easy。单机承载并发量是 mysql 单机的几十倍。</p><blockquote><p>缓存是走内存的，内存天然就支撑高并发。</p></blockquote><h3 id="3如何保证缓存与数据库的双写一致性"><a class="markdownIt-Anchor" href="#3如何保证缓存与数据库的双写一致性"></a> 3.如何保证缓存与数据库的双写一致性？</h3><p>一般来说，如果允许缓存和数据库偶尔有不一致的情况（要求不严格的情况下）最好不要做这个方案，即：<strong>读请求和写请求串行化</strong>，串到一个<strong>内存队列</strong>里去。</p><p>串行化可以保证一定不会出现不一致的情况，但是它也会导致系统的吞吐量大幅度降低，<strong>用比正常情况下多几倍的机器去支撑线上的一个请求</strong>。</p><h4 id="cache-aside-pattern"><a class="markdownIt-Anchor" href="#cache-aside-pattern"></a> Cache Aside Pattern</h4><p>最经典的缓存+数据库读写的模式，就是 Cache Aside Pattern。</p><ul><li>读的时候，先读缓存，缓存没有的话，就读数据库，然后取出数据后放入缓存，同时返回响应。</li><li>更新的时候，<strong>先更新数据库，然后再删除缓存</strong>。</li></ul><h4 id="为什么是删除缓存而不是更新缓存"><a class="markdownIt-Anchor" href="#为什么是删除缓存而不是更新缓存"></a> <strong>为什么是删除缓存，而不是更新缓存？</strong></h4><ol><li>缓存的数据不是直接从数据库取出，而是经过复杂的计算</li><li>更新缓存的代价（频繁的数据库修改，频繁的缓存更新，但是却很少访问）只有用到的时候再重新计算放在缓存。</li></ol><p>原因很简单，很多时候，在复杂点的缓存场景，缓存不单单是数据库中直接取出来的值。</p><p>比如可能更新了某个表的一个字段，然后其对应的缓存，是需要查询另外两个表的数据并进行运算，才能计算出缓存最新的值的。</p><p>另外更新缓存的代价有时候是很高的。是不是说，每次修改数据库的时候，都一定要将其对应的缓存更新一份？也许有的场景是这样，但是对于<strong>比较复杂的缓存数据计算的场景</strong>，就不是这样了。如果你频繁修改一个缓存涉及的多个表，缓存也频繁更新。但是问题在于，<strong>这个缓存到底会不会被频繁访问到？</strong></p><p>举个栗子，一个缓存涉及的表的字段，在 1 分钟内就修改了 20 次，或者是 100 次，那么缓存更新 20 次、100 次；但是这个缓存在 1 分钟内只被读取了 1 次，有<strong>大量的冷数据</strong>。实际上，如果你只是删除缓存的话，那么在 1 分钟内，这个缓存不过就重新计算一次而已，开销大幅度降低。<strong>用到缓存才去算缓存。</strong></p><p>其实删除缓存，而不是更新缓存，就是一个 lazy 计算的思想，不要每次都重新做复杂的计算，不管它会不会用到，而是让它到需要被使用的时候再重新计算。像 mybatis，hibernate，都有懒加载思想。查询一个部门，部门带了一个员工的 list，没有必要说每次查询部门，都把里面的 1000 个员工的数据也同时查出来啊。80% 的情况，查这个部门，就只是要访问这个部门的信息就可以了。先查部门，同时要访问里面的员工，那么这个时候只有在你要访问里面的员工的时候，才会去数据库里面查询 1000 个员工。</p><h4 id="不一致问题解决方法"><a class="markdownIt-Anchor" href="#不一致问题解决方法"></a> 不一致问题解决方法</h4><p>1.先更新数据库，再删除缓存。如果删除缓存失败了，那么会导致数据库中是新数据，缓存中是旧数据，数据就出现了不一致。</p><blockquote><p>解决思路：先删除缓存，再更新数据库。如果数据库更新失败了，那么数据库中是旧数据，缓存中是空的，那么数据不会不一致。因为读的时候缓存没有，所以去读了数据库中的旧数据，然后更新到缓存中。</p></blockquote><p>2.数据发生了变更，先删除了缓存，然后要去修改数据库，此时还没修改。一个请求过来，去读缓存，发现缓存空了，去查询数据库，<strong>查到了修改前的旧数据</strong>，放到了缓存中。随后数据变更的程序完成了数据库的修改。完了，数据库和缓存中的数据不一样了…</p><p>在高并发下缓存出现这个问题：</p><blockquote><p>更新数据的时候，根据<strong>数据的唯一标识</strong>，将操作路由之后，发送到一个 jvm 内部队列中。读取数据的时候，如果发现数据不在缓存中，那么将重新执行“读取数据+更新缓存”的操作，根据唯一标识路由之后，也发送到同一个 <code>jvm</code> 内部队列中。</p><p>一个队列对应一个工作线程，每个工作线程<strong>串行</strong>拿到对应的操作，然后一条一条的执行。这样的话，一个数据变更的操作，先删除缓存，然后再去更新数据库，但是还没完成更新。此时如果一个读请求过来，没有读到缓存，那么可以先将缓存更新的请求发送到队列中，此时会在队列中积压，然后同步等待缓存更新完成。</p></blockquote><h4 id="了解什么是-redis-的雪崩-穿透和击穿redis-崩溃之后会怎么样系统该如何应对这种情况如何处理-redis-的穿透"><a class="markdownIt-Anchor" href="#了解什么是-redis-的雪崩-穿透和击穿redis-崩溃之后会怎么样系统该如何应对这种情况如何处理-redis-的穿透"></a> 了解什么是 redis 的雪崩、穿透和击穿？redis 崩溃之后会怎么样？系统该如何应对这种情况？如何处理 redis 的穿透？</h4><h5 id="缓存雪崩"><a class="markdownIt-Anchor" href="#缓存雪崩"></a> 缓存雪崩</h5><p>对于系统 A，假设每天高峰期每秒 5000 个请求，本来缓存在高峰期可以扛住每秒 4000 个请求，但是缓存机器意外发生了全盘宕机。缓存挂了，此时 1 秒 5000 个请求全部落数据库，数据库必然扛不住，它会报一下警，然后就挂了。此时，如果没有采用什么特别的方案来处理这个故障，DBA 很着急，重启数据库，但是数据库立马又被新的流量给打死了。</p><blockquote><ul><li>事前：redis 高可用，主从+哨兵，redis cluster，避免全盘崩溃。</li><li>事中：本地 ehcache 缓存 + hystrix 限流&amp;降级，避免 MySQL 被打死。</li><li>事后：redis 持久化，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。</li></ul></blockquote><p>用户发送一个请求，系统 A 收到请求后，先查本地 ehcache 缓存，如果没查到再查 redis。如果 ehcache 和 redis 都没有，再查数据库，将数据库中的结果，写入 ehcache 和 redis 中。</p><p>限流组件，可以设置每秒的请求，有多少能通过组件，剩余的未通过的请求，怎么办？<strong>走降级</strong>！可以返回一些默认的值，或者友情提示，或者空白的值。</p><p>好处：</p><ul><li>数据库绝对不会死，限流组件确保了每秒只有多少个请求能通过。</li><li>只要数据库不死，就是说，对用户来说，2/5 的请求都是可以被处理的。</li><li>只要有 2/5 的请求可以被处理，就意味着你的系统没死，对用户来说，可能就是点击几次刷不出来页面，但是多点几次，就可以刷出来一次。</li></ul><h5 id="缓存穿透"><a class="markdownIt-Anchor" href="#缓存穿透"></a> 缓存穿透</h5><p>对于系统A，假设一秒 5000 个请求，结果其中 4000 个请求是<strong>黑客发出的恶意攻击</strong>。</p><p>黑客发出的那 4000 个攻击，缓存中查不到，每次你去数据库里查，也查不到。</p><p>举个例子：数据库 id 是从 1 开始的，结果黑客发过来的请求 id 全部都是负数。这样的话，缓存中不会有，请求每次都“<strong>视缓存于无物</strong>”，直接查询数据库。这种恶意攻击场景的缓存穿透就会直接把数据库给打死。</p><p>解决方式：</p><blockquote><p>每次系统 A 从数据库中只要没查到，就写一个<strong>空值</strong>到缓存里去，比如 <code>set -999 UNKNOWN</code>。然后设置一个过期时间，这样的话，下次有相同的 key 来访问的时候，在缓存失效之前，都可以直接从缓存中取数据</p></blockquote><h5 id="缓存击穿"><a class="markdownIt-Anchor" href="#缓存击穿"></a> 缓存击穿</h5><p>缓存击穿，就是说某个 key 非常热点，访问非常频繁，处于集中式高并发访问的情况，当这个 key 在失效的瞬间，大量的请求就击穿了缓存，直接请求数据库，就像是在一道屏障上凿开了一个洞。</p><p>解决方式：</p><blockquote><p>可以将热点数据设置为永远不过期；</p><p>基于 redis or zookeeper 实现互斥锁，等待第一个请求构建完缓存之后，再释放锁，进而其它请求才能通过该 key 访问数据。</p></blockquote><h3 id="4redis-和-memcached-有啥区别"><a class="markdownIt-Anchor" href="#4redis-和-memcached-有啥区别"></a> 4.redis 和 memcached 有啥区别？</h3><h4 id="redis-支持复杂的数据结构"><a class="markdownIt-Anchor" href="#redis-支持复杂的数据结构"></a> redis 支持复杂的数据结构</h4><p>redis 相比 memcached 来说，拥有<a href="https://github.com/javazhiyin/advanced-java/blob/master/docs/high-concurrency/redis-data-types.md">更多的数据结构</a>，能支持更丰富的数据操作。如果需要缓存能够支持更复杂的结构和操作， redis 会是不错的选择。</p><h4 id="redis-原生支持集群模式"><a class="markdownIt-Anchor" href="#redis-原生支持集群模式"></a> redis 原生支持集群模式</h4><p>在 redis3.x 版本中，便能支持 cluster 模式，而 memcached 没有原生的集群模式，需要依靠客户端来实现往集群中分片写入数据。</p><h4 id="性能对比"><a class="markdownIt-Anchor" href="#性能对比"></a> 性能对比</h4><p>由于 redis 只使用<strong>单核</strong>，而 memcached 可以使用<strong>多核</strong>，所以平均每一个核上 redis 在存储小数据时比 memcached 性能更高。而在 100k 以上的数据中，memcached 性能要高于 redis。虽然 redis 最近也在存储大数据的性能上进行优化，但是比起 memcached，还是稍有逊色。</p><h3 id="5redis-都有哪些数据类型分别在哪些场景下使用比较合适"><a class="markdownIt-Anchor" href="#5redis-都有哪些数据类型分别在哪些场景下使用比较合适"></a> 5.redis 都有哪些数据类型？分别在哪些场景下使用比较合适？</h3><p>除非是面试官感觉看你简历，是工作 3 年以内的比较初级的同学，可能对技术没有很深入的研究，面试官才会问这类问题。否则，在宝贵的面试时间里，面试官实在不想多问。</p><p>其实问这个问题，主要有两个原因：</p><ul><li>看看你到底有没有全面的了解 redis 有哪些功能，一般怎么来用，啥场景用什么，就怕你别就会最简单的 KV 操作；</li><li>看看你在实际项目里都怎么玩儿过 redis。</li></ul><p>要是你回答的不好，没说出几种数据类型，也没说什么场景，你完了，面试官对你印象肯定不好，觉得你平时就是做个简单的 set 和 get。</p><h4 id="面试题剖析"><a class="markdownIt-Anchor" href="#面试题剖析"></a> 面试题剖析</h4><p>redis 主要有以下几种数据类型：</p><ul><li>string</li><li>hash</li><li>list</li><li>set</li><li>sorted set</li></ul><h5 id="string"><a class="markdownIt-Anchor" href="#string"></a> string</h5><p>这是最简单的类型，就是普通的 set 和 get，做简单的 KV 缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set college szu</span><br></pre></td></tr></table></figure><h5 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> hash</h5><p>这个是类似 map 的一种结构，这个一般就是可以将结构化的数据，比如一个对象（前提是<strong>这个对象没嵌套其他的对象</strong>）给缓存在 redis 里，然后每次读写缓存的时候，可以就操作 hash 里的<strong>某个字段</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hset person name bingo</span><br><span class="line">hset person age 20</span><br><span class="line">hset person id 1</span><br><span class="line">hget person name</span><br><span class="line">person &#x3D; &#123;</span><br><span class="line">    &quot;name&quot;: &quot;bingo&quot;,</span><br><span class="line">    &quot;age&quot;: 20,</span><br><span class="line">    &quot;id&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="list"><a class="markdownIt-Anchor" href="#list"></a> list</h5><p>list 是有序列表</p><p><strong>比如可以通过 list 存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的东西。</strong></p><p><strong>比如可以通过 lrange 命令，读取某个闭区间内的元素，可以基于 list 实现分页查询，这个是很棒的一个功能，基于 redis 实现简单的高性能分页，可以做类似微博那种下拉不断分页的东西，性能高，就一页一页走。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 0开始位置，-1结束位置，结束位置为-1时，表示列表的最后一个位置，即查看所有。</span><br><span class="line">lrange mylist 0 -1</span><br></pre></td></tr></table></figure><p>比如可以搞个简单的消息队列，从 list 头怼进去，从 list 尾巴那里弄出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lpush mylist 1</span><br><span class="line">lpush mylist 2</span><br><span class="line">lpush mylist 3 4 5</span><br><span class="line"></span><br><span class="line"># 1</span><br><span class="line">rpop mylist</span><br></pre></td></tr></table></figure><h5 id="set"><a class="markdownIt-Anchor" href="#set"></a> set</h5><p>set 是无序集合，自动去重。</p><p>直接基于 set 将系统里需要去重的数据扔进去，自动就给去重了，如果你需要对一些数据进行快速的全局去重，你当然也可以基于 jvm 内存里的 HashSet 进行去重，但是如果你的某个系统部署在多台机器上呢？得基于 redis 进行全局的 set 去重。</p><p><strong>可以基于 set 玩儿交集、并集、差集的操作，比如交集吧，可以把两个人的粉丝列表整一个交集，看看俩人的共同好友是谁？</strong></p><p>把两个大 V 的粉丝都放在两个 set 中，对两个 set 做交集。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#-------操作一个set-------</span><br><span class="line"># 添加元素</span><br><span class="line">sadd mySet 1</span><br><span class="line"></span><br><span class="line"># 查看全部元素</span><br><span class="line">smembers mySet</span><br><span class="line"></span><br><span class="line"># 判断是否包含某个值</span><br><span class="line">sismember mySet 3</span><br><span class="line"></span><br><span class="line"># 删除某个&#x2F;些元素</span><br><span class="line">srem mySet 1</span><br><span class="line">srem mySet 2 4</span><br><span class="line"></span><br><span class="line"># 查看元素个数</span><br><span class="line">scard mySet</span><br><span class="line"></span><br><span class="line"># 随机删除一个元素</span><br><span class="line">spop mySet</span><br><span class="line"></span><br><span class="line">#-------操作多个set-------</span><br><span class="line"># 将一个set的元素移动到另外一个set</span><br><span class="line">smove yourSet mySet 2</span><br><span class="line"></span><br><span class="line"># 求两set的交集</span><br><span class="line">sinter yourSet mySet</span><br><span class="line"></span><br><span class="line"># 求两set的并集</span><br><span class="line">sunion yourSet mySet</span><br><span class="line"></span><br><span class="line"># 求在yourSet中而不在mySet中的元素</span><br><span class="line">sdiff yourSet mySet</span><br></pre></td></tr></table></figure><h5 id="sorted-set"><a class="markdownIt-Anchor" href="#sorted-set"></a> sorted set</h5><p>sorted set 是排序的 set，<strong>去重但可以排序，写进去的时候给一个分数，自动根据分数排序。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zadd board 85 zhangsan</span><br><span class="line">zadd board 72 lisi</span><br><span class="line">zadd board 96 wangwu</span><br><span class="line">zadd board 63 zhaoliu</span><br><span class="line"></span><br><span class="line"># 获取排名前三的用户（默认是升序，所以需要 rev 改为降序）</span><br><span class="line">zrevrange board 0 3</span><br><span class="line"></span><br><span class="line"># 获取某用户的排名</span><br><span class="line">zrank board zhaoliu</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;redis设计与实现笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#redis设计与实现笔记&quot;&gt;&lt;/a&gt; redis设计与实现笔记&lt;/h1&gt;
&lt;h2 id=&quot;第一部分-数据结构与对象&quot;&gt;&lt;a class=&quot;markdownIt-An</summary>
      
    
    
    
    <category term="后端" scheme="https://duanjiaojiao316.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="redis" scheme="https://duanjiaojiao316.github.io/tags/redis/"/>
    
    <category term="阅读笔记" scheme="https://duanjiaojiao316.github.io/tags/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>mybatis基础</title>
    <link href="https://duanjiaojiao316.github.io/2020/02/21/mybatis%E5%9F%BA%E7%A1%80/"/>
    <id>https://duanjiaojiao316.github.io/2020/02/21/mybatis%E5%9F%BA%E7%A1%80/</id>
    <published>2020-02-21T11:45:55.000Z</published>
    <updated>2021-04-20T07:44:33.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mybatis基础"><a class="markdownIt-Anchor" href="#mybatis基础"></a> mybatis基础</h1><h2 id="orm"><a class="markdownIt-Anchor" href="#orm"></a> ORM</h2><p>对象关系映射（Object Relational Mapping，简称ORM）是通过使用描述对象和数据库之间映射的元数据，面向对象语言程序中的对象自动持久化到关系数据库中。本质上就是将数据从一种形式转换到另外一种形式。</p><blockquote><p>对象指的是变相对象</p><p>关系是指关系型数据库</p><p>Java到MySQL的映射，开发者可以以面向对象的思想来管理数据库</p></blockquote><h2 id="mybatis的优点"><a class="markdownIt-Anchor" href="#mybatis的优点"></a> MyBatis的优点</h2><blockquote><ul><li>对JDBC的封装，与JDBC相比减少了一定的代码量。</li><li>MyBatis是最简单的持久化框架，小巧简单易学。</li><li>MyBatis相对灵活，不会对应用程序或者数据库的现有设计强加任何影响。SQL语句写在xml文件中，从程序中彻底的分离，降低耦合度，便于统一管理，提高可重用性。</li><li>提供xml标签，支持动态sql语句编写</li><li>提供映射标签，支持对象与数据库的ORM字段关系映射</li></ul></blockquote><h2 id="mybatis的缺点"><a class="markdownIt-Anchor" href="#mybatis的缺点"></a> MyBatis的缺点</h2><blockquote><ul><li>每一个sql都需要开发者编写，不像其他hibernate可以自动生成一些。sql语句的编写工作量大，尤其是字段多，关联表多时，对开发人员编写sql语句的功底有一定的要求。</li><li>sql语句依赖于数据库，导致数据库的移植性差，不能随意更改数据库。更换数据库就需要修改sql语句（mysql更换为Oracle）。</li></ul></blockquote><h2 id="mybatis的开发方式"><a class="markdownIt-Anchor" href="#mybatis的开发方式"></a> MyBatis的开发方式</h2><h3 id="1-使用原生接口"><a class="markdownIt-Anchor" href="#1-使用原生接口"></a> 1、使用原生接口</h3><h3 id="2-mapper代理实现自定义接口"><a class="markdownIt-Anchor" href="#2-mapper代理实现自定义接口"></a> 2、Mapper代理实现自定义接口</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;mybatis基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mybatis基础&quot;&gt;&lt;/a&gt; mybatis基础&lt;/h1&gt;
&lt;h2 id=&quot;orm&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#orm&quot;&gt;</summary>
      
    
    
    
    <category term="后端" scheme="https://duanjiaojiao316.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="mybatis" scheme="https://duanjiaojiao316.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机</title>
    <link href="https://duanjiaojiao316.github.io/2020/02/21/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <id>https://duanjiaojiao316.github.io/2020/02/21/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/</id>
    <published>2020-02-21T11:45:55.000Z</published>
    <updated>2021-04-20T07:44:33.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java虚拟机"><a class="markdownIt-Anchor" href="#java虚拟机"></a> Java虚拟机</h1><h2 id="第一部分-jvm基础"><a class="markdownIt-Anchor" href="#第一部分-jvm基础"></a> 第一部分 JVM基础</h2><h3 id="第一章-java内存区域与内存溢出异常"><a class="markdownIt-Anchor" href="#第一章-java内存区域与内存溢出异常"></a> 第一章 Java内存区域与内存溢出异常</h3><h3 id="运行时数据区域"><a class="markdownIt-Anchor" href="#运行时数据区域"></a> 运行时数据区域</h3><h4 id="1程序计数器线程私有"><a class="markdownIt-Anchor" href="#1程序计数器线程私有"></a> 1.程序计数器(线程私有)</h4><p>当前线程执行的字节码的行号指示器。</p><p>Java虚拟机的多线程通过线程轮流切换并分配处理器执行时间的方式来实现，一个处理器或者多核处理器的一个内核只会执行一条线程，<strong>每条线程需要一个独立的程序计数器</strong></p><ol><li>如果线程在执行一个普通的Java方法，计数器记录正在执行的虚拟机字节码指令的地址；</li><li>如果线程正在执行一个Native方法，计数器的值为空；</li><li>此内存区域是唯一一个在Java虚拟机规范中没有规定任何<code>OutOfMemoryError</code>情况的区域。</li></ol><h4 id="2java虚拟机栈线程私有"><a class="markdownIt-Anchor" href="#2java虚拟机栈线程私有"></a> 2.Java虚拟机栈（线程私有）</h4><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时会创建一个栈帧用于存储<strong>局部变量表，操作数栈，动态链接、方法出口等信息</strong>。每个方法的执行过程，就对应一个栈帧在虚拟机栈中的入栈和出栈。</p><h5 id="1局部变量表"><a class="markdownIt-Anchor" href="#1局部变量表"></a> 1）局部变量表</h5><ol><li>基本数据类型（<code>boolean</code>、<code>byte</code>、<code>char</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>double</code>）</li><li>对象引用（reference类型）对象本身、对象起始地址的引用指针、指向一个对象的句柄、其他与此对象相关的位置</li><li><code>returnAddress</code>类型   指向一条字节码指令的地址</li></ol><h5 id="2两种异常状态"><a class="markdownIt-Anchor" href="#2两种异常状态"></a> 2）两种异常状态</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;OutOfMemoryError&#96;&#96;&#96;异常：虚拟机栈可以动态扩展，如果扩展的时无法申请到足够的内存</span><br><span class="line"></span><br><span class="line">#### 3.本地方法栈</span><br><span class="line"></span><br><span class="line">作用与Java虚拟机栈相似：Java虚拟机栈为Java方法服务，**抛出异常同虚拟机栈**。</span><br><span class="line"></span><br><span class="line">被动方法栈为Native方法服务</span><br><span class="line"></span><br><span class="line">#### 4.Java堆</span><br><span class="line"></span><br><span class="line">被所有的线程共享的一块内存区域，算是虚拟机所管理的内存中最大的一块，带区域主要存储对象实例，是主要垃圾收集器管理的区域。</span><br><span class="line"></span><br><span class="line">如果堆中没有内存完成实例分配，就会抛出OutOfMemoryError异常。</span><br><span class="line"></span><br><span class="line">#### 5.方法区</span><br><span class="line"></span><br><span class="line">各个线程共享区域，用于存储已被虚拟机加载的类信息、常量、静态常量、即时编译器编译后的代码等数据。</span><br><span class="line"></span><br><span class="line">#### 6.运行时常量池</span><br><span class="line"></span><br><span class="line">运行时常量池方法区的一部分</span><br><span class="line"></span><br><span class="line">1. Class文件存放类的版本、字段、方法、接口等描述信息外，还有常量池，常量池存放编译器生成的各种字面量和符号引用，这部分内容在类加载后进入方法区的**运行时常量池**存放。</span><br><span class="line">2. Java虚拟机对Class文件的每一部分的格式要求都有严格的规定。</span><br><span class="line"></span><br><span class="line">- 运行常量池Java虚拟机规范没有任何细节的要求。</span><br><span class="line">- 运行常量池中保存Class文件中描述的符号引用，翻译出来的直接引用也会存储在运行时常量池。</span><br><span class="line">- 运行时常量池具有动态性，不要求常量一定要在编译器产生，并非置入Class文件中常量池的内容才能进入方法区运行时常量区，运行期间也可以将常量放在运行常量池中</span><br><span class="line"></span><br><span class="line">##### **程序的执行方式有**：</span><br><span class="line"></span><br><span class="line">1. 静态编译执行：事前（编译时）编译，编译成机器码，直接由CPU执行</span><br><span class="line"></span><br><span class="line">2. 动态编译执行：运行时编译，JIT编译</span><br><span class="line"></span><br><span class="line">   动态编译通常指运行时将所有代码都编译</span><br><span class="line"></span><br><span class="line">   JIT编译将部分代码进行编译（热点代码）</span><br><span class="line"></span><br><span class="line">3. 动态解释执行：JVM有解析器，按照字节码指令逐行解析逐行执行，每次执行都需要解析。</span><br><span class="line"></span><br><span class="line">JIT编译比解释器快，说的是执行编译后的代码比解释器解释执行要快，而不是编译这个动作比解释快。对于只执行一次的代码而言，解释执行可能比编译执行要快。</span><br><span class="line"></span><br><span class="line">### &#96;&#96;&#96;HotSpot&#96;&#96;&#96;虚拟机对象</span><br><span class="line"></span><br><span class="line">#### 对象创建</span><br><span class="line"></span><br><span class="line">1. 遇到new现在常量池定位这个类的符号引用，没有进行类加载过程。</span><br><span class="line"></span><br><span class="line">2. 对象分配内存</span><br><span class="line"></span><br><span class="line">   1. 指针碰撞</span><br><span class="line"></span><br><span class="line">      java堆中内存绝对规整，所有用过的内存放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点指示器。&lt;font color&#x3D;&quot;red&quot;&gt;分配内存就是把指针向空闲部分挪动一段与对象大小相同的距离&lt;&#x2F;font&gt;。</span><br><span class="line"></span><br><span class="line">   2. 空闲列表</span><br><span class="line"></span><br><span class="line">      Java堆中内存不规整，虚拟机**维护一个列表**记录可以内存，分配之时从列表中查找足够大的内存即可。</span><br><span class="line"></span><br><span class="line">   多线程下对象内存分配</span><br><span class="line"></span><br><span class="line">   1. 对分配内存空间动作进行同步处理，采用CAS配上失败重方式保证更新操作的原子性。</span><br><span class="line">   2. 把内存分配动作按照线程划分为不同的空间之上运行，每个线程预先分得一块内存，本地线程分配缓冲（TLAB).那个线程的TLAB用完，分配新的TLAB才进行同步锁定。</span><br><span class="line"></span><br><span class="line">3. 对象内存布局</span><br><span class="line"></span><br><span class="line">   3个区域：对象头，实际数据，对齐填充</span><br><span class="line"></span><br><span class="line">   &lt;font color&#x3D;&quot;yellow&quot;&gt;hashcode，GC分代年龄，等等&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">   &lt;font color&#x3D;&quot;red&quot;&gt;相同宽度的字段分配在一起，短的字段可以分配到之前字段的空缺位置，子类中的变量也可以分配在父类的字段部分&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">   &lt;font color&#x3D;&quot;blue&quot;&gt;确保对象起始地址为8字节的整数倍。&lt;&#x2F;font&gt;</span><br><span class="line"></span><br><span class="line">4. 对象访问定位</span><br><span class="line"></span><br><span class="line">   1.通过句柄方式访问，</span><br><span class="line"></span><br><span class="line">   　　在Java堆中分出一块内存进行存储句柄池，这样的话，在栈中存储的是句柄的地址</span><br><span class="line"></span><br><span class="line">   [![img](https:&#x2F;&#x2F;images2017.cnblogs.com&#x2F;blog&#x2F;917948&#x2F;201709&#x2F;917948-20170912201713938-1421262172.png)](https:&#x2F;&#x2F;images2017.cnblogs.com&#x2F;blog&#x2F;917948&#x2F;201709&#x2F;917948-20170912201713938-1421262172.png)</span><br><span class="line"></span><br><span class="line">   优点：</span><br><span class="line"></span><br><span class="line">   　　当对象移动的时候（垃圾回收的时候移动很普遍），这样值需要改变句柄中的指针，但是栈中的指针不需要变化，因为栈中存储的是句柄的地址</span><br><span class="line"></span><br><span class="line">   缺点：</span><br><span class="line"></span><br><span class="line">   　　需要进行二次定位，寻找两次指针，开销相对于更大一些</span><br><span class="line"></span><br><span class="line">   2.直接指针访问方式</span><br><span class="line"></span><br><span class="line">   　　Java栈直接与对象进行访问，在Java堆中对象帆布中必须考虑存储访问类型的数据的相关信息，因为没有了句柄了</span><br><span class="line"></span><br><span class="line">   [![img](https:&#x2F;&#x2F;images2017.cnblogs.com&#x2F;blog&#x2F;917948&#x2F;201709&#x2F;917948-20170912202343719-636641418.png)](https:&#x2F;&#x2F;images2017.cnblogs.com&#x2F;blog&#x2F;917948&#x2F;201709&#x2F;917948-20170912202343719-636641418.png)</span><br><span class="line"></span><br><span class="line">   优点：</span><br><span class="line"></span><br><span class="line">   　　速度快，不需要和句柄一样指针定位的开销</span><br><span class="line"></span><br><span class="line">### 第二章垃圾收集器与内存分配策略</span><br><span class="line"></span><br><span class="line">#### 哪些区域的内存是垃圾收集器关注的？</span><br><span class="line"></span><br><span class="line">Java 内存中程序计数器，虚拟机栈和本地方法栈3个区域都是线程私有的，其中内存都会随着方法结束，线程结束自动回收。而堆内存和方法区的内存分配回收时垃圾收集器关注的部分。</span><br><span class="line"></span><br><span class="line">#### 对象死亡判断</span><br><span class="line"></span><br><span class="line">##### 1.引用计数算法</span><br><span class="line"></span><br><span class="line">对象添加一个计数器，每一次引用它就在计数器加一，每次引用失效，就在计数器减一。计数器为0的对象不能被使用，是垃圾回收的对象。</span><br><span class="line"></span><br><span class="line">缺点：很难解决对象之间相互引用问题</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class Test&#123;</span><br><span class="line">    public Object instance &#x3D; null;</span><br><span class="line">    public static void testGC()&#123;</span><br><span class="line">        Test a &#x3D; new Test();</span><br><span class="line">        Test b &#x3D; new Test();</span><br><span class="line">        a.instance &#x3D; b;</span><br><span class="line">        b.instance &#x3D; a;</span><br><span class="line">        a &#x3D; null;</span><br><span class="line">        b &#x3D; null;</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2可直达分析算法"><a class="markdownIt-Anchor" href="#2可直达分析算法"></a> 2.可直达分析算法</h5><p>通过一系列的<code>GC Roots</code> 的对象作为起始点，从这些结点开始向下搜索，搜索走过的路径成为引用链，当一个对象到<code>GC Roots</code>没有任何引用链，也就是从<code>GC Roots</code>到这个对象不可达，证明对象不可用。不可用对象将是可回收对象。</p><p><font color="#5f98a6">主流程序语言都是使用可直达算法作为判定对象是否存活的。</font></p><h6 id="java语言中可作为gc-roots的对象包括"><a class="markdownIt-Anchor" href="#java语言中可作为gc-roots的对象包括"></a> Java语言中可作为GC Roots的对象包括</h6><ol><li>虚拟机栈中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象</li></ol><h6 id="引用"><a class="markdownIt-Anchor" href="#引用"></a> 引用</h6><p>强引用</p><p>代码之中普遍存在类似 <code>Object a = new Object();</code>的引用，只要强引用还存在，垃圾收集器就不会回收被引用的对象</p><p>软引用</p><p>描述一些有用但是并非必须的对象，对于软引用对象，在系统发生内存溢出异常之前，把软引用对象列入回收范围之内进行第二次回收。如果第二次回收之后还是没有足够的内存才会抛出内存溢出的异常。</p><p>弱引用</p><p>描述非必要对象，强度比软引用弱，被弱引用引用的对象只能存活到下一次垃圾回收之前。当垃圾收集器工作时，无论内存是否足够，都会回收只被弱引用引用的对象。</p><p>虚引用</p><p>幽灵引用或者幻影引用，最弱的引用。该引用的存在不会影响垃圾回收，也无法通过虚引用来获取对象实例，唯一目的：<font color="green">能在垃圾回收时收到一个系统通知</font>。</p><p><code>jdk</code>中直接内存的回收就用到虚引用，由于<code>jvm</code>自动内存管理的范围是堆内存，而直接内存是在堆内存之外（其实是内存映射文件，自行去理解虚拟内存空间的相关概念），所以直接内存的分配和回收都是有<code>Unsafe</code>类去操作，<code>java</code>在申请一块直接内存之后，会在堆内存分配一个对象保存这个堆外内存的引用，这个对象被垃圾收集器管理，一旦这个对象被回收，相应的用户线程会收到通知并对直接内存进行清理工作。</p><h6 id="finalize方法"><a class="markdownIt-Anchor" href="#finalize方法"></a> finalize()方法</h6><p>如果对象在可直达分析后发现没有与GC Roots相连接的引用链，它会进行第一次标记，进行进一步的筛选。</p><p>进一步的筛选条件是对象是否有必要执行finalize()方法，对象没有覆盖该方法或者该方法已经被虚拟机调用过，这两种情况都是没有必要执行。</p><p>如果这个对象有必要执行finalize()方法，这个对象就会放置在一个F-Queue队列中，稍后虚拟机建立Finalizer线程去执行。但是不等待它结束。</p><p>finalize方法是对象逃脱死亡的最后机会，只要在finalize中重新与引用链上任何对象建立关联，这个对象就会免死亡。没有逃脱，该对象就被回收了。</p><p>注意：finalize方法在面临第二次回收的时候不会在执行。</p><h4 id="垃圾收集算法"><a class="markdownIt-Anchor" href="#垃圾收集算法"></a> 垃圾收集算法</h4><h5 id="1标记清除算法"><a class="markdownIt-Anchor" href="#1标记清除算法"></a> 1.标记清除算法</h5><p>标记所有需要回收的对象，标记完成后统一回收被标记对象。</p><p>不足：</p><ol><li>效率问题，标记和清除过程的效率都不高</li><li>空间问题，标记清除后产生大量不连续内存碎片，空间碎片太多导致分配较大对象时找不到足够的连续空间而不得不提前出发再一次垃圾收集。</li></ol><h5 id="2复制算法"><a class="markdownIt-Anchor" href="#2复制算法"></a> 2.复制算法</h5><p>将内存划分为大小相同的两块，每次只使用一块，一块用完，就将存活的对象复制在另一块，并把原来的块的内存清空，对整个半区进行垃圾回收。</p><p>缺点：将内存区域缩小为原来的一半。</p><p>优化不按照1:1的比例划分而是划分为Eden和两个Survivor空间。每次使用Eden和其中一个Survivor，将存活的对象复制到两一个Survivor清理之前用过的Survivor和Eden空间。默认Eden空间和Survivor比例是8：1，由于新生代垃圾回收有98%对象需要回收。当回收的对象大于10%的时候借助其他内存如老年代。</p><h5 id="3标记整理算法"><a class="markdownIt-Anchor" href="#3标记整理算法"></a> 3.标记整理算法</h5><p>复制算法在存活率较高的情况下，进行较多的复制操作，效率降低。</p><p>针对老年代对象存活率较高，提出标记整理算法。</p><p>标记整理算法的标记过程与标记清除相同，清除过程将对象向一端移动然后清除边界以外的内存。</p><h5 id="4分代收集算法"><a class="markdownIt-Anchor" href="#4分代收集算法"></a> 4.分代收集算法</h5><p>把内存分成新生代和老年代，根据各个年代的特点采用适当的收集算法</p><h4 id="hotspot算法实现"><a class="markdownIt-Anchor" href="#hotspot算法实现"></a> HotSpot算法实现</h4><h5 id="1枚举根结点"><a class="markdownIt-Anchor" href="#1枚举根结点"></a> 1.枚举根结点</h5><p>由于GC Roots的结点主要在全局性引用与执行上下文（栈帧中的本地变量表）中，光方法区就有数百兆，逐个检查这里的引用会消耗大量时间。</p><p>可达性分析对于执行时间的敏感性还体现在GC停顿上。分析性工作必须在一个确保一致的快照中进行。不可以出现对象引用关系的改变。需要停止Java执行线程（Stop The World）</p><p>主流Java使用准确式GC，在执行系统停顿下来，不需要一个不漏的检查所有执行上下文和全局的引用位置，虚拟机有办法知道哪些地方存放对象引用。在HotSpot的实现中，用OopMap数据结构达到这个目的，在类加载完成的时候，HotSpot就把对象内什么偏移上什么类型的数据计算出来，在JIT编译的过程中，会在特定的位置记录栈和寄存器中哪些地方是引用。</p><h5 id="2安全点"><a class="markdownIt-Anchor" href="#2安全点"></a> 2.安全点</h5><p>可能导致引用关系变化或者说OopMap的内容变化的指令很多，如果为每条指令都生成对应的OopMap，会消耗大量的额外空间。</p><p>HotSpot没有为每条可能改变引用关系的指令生成OopMap，而是在特定的位置记录，这些位置称为<strong>安全点</strong>。</p><p>到达安全点后，执行系统停顿开始GC，只有到达安全点之后才能停止。</p><p>在方法调用，循环跳转，异常跳转等功能指令下会产生Safepoint。</p><p><font color="gree">如何让所有的线程都跑到最近的安全点并停顿下来？</font></p><ol><li><p>抢占式中断</p><p>不需要线程主动配合，GC发生后所有线程中断，如果有的线程中断的地方不在安全点，就恢复线程让它执行到安全点。（几乎没有虚拟机使用抢占式中断）</p></li><li><p>主动式中断</p><p>当GC需要中断线程时，不直接对线程操作，而是设置一个标志，各个线程执行时主动去轮询这个标志，发现中断标志为真，就自己中断线挂起，轮询标志的地方和安全点重合，再加上创建对象分配内存的地方。</p></li></ol><h5 id="3安全区域"><a class="markdownIt-Anchor" href="#3安全区域"></a> 3.安全区域</h5><p>程序不执行，在下次sleep和blocked状态下，这些线程无法响应JVM中断将线程执行到安全点的地方挂起。</p><p>安全区域是指在一段代码片段中引用关系不会发生变化。在线程执行到安全区域，就不用管表示自己在安全区域状态的线程。在线程离开安全区域时，检查系统是否完成根结点枚举，完成后线程继续执行，否则必须等到收到可以安全离开安全区域的信号为止。</p><h4 id="垃圾收集器"><a class="markdownIt-Anchor" href="#垃圾收集器"></a> 垃圾收集器</h4><p><img src="/2020/02/21/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/D:%5C%E9%9D%A2%E8%AF%95%5Cspringbootimages%5C20160505170035450" alt="img"></p><p>两个收集器之间存在连线说明可以搭配使用，所在区域表示它属于新生代收集器还是老年代收集器。</p><p>（红色部分为新生代）</p><h5 id="1serial收集器"><a class="markdownIt-Anchor" href="#1serial收集器"></a> 1.Serial收集器</h5><p>单线程收集器，使用一个CPU一条收集线程完成垃圾收集工作，在垃圾收集时必须停掉其他的所有工作线程，直到收集结束。<strong>Stop The World</strong></p><p>在垃圾收集器不断改进中，停顿时间不短缩小，但是还是没有办法消除。</p><p>Serial收集器是虚拟机Client模式下默认的新生代收集器，简单高效，在限定单CPU的情况下，没有线程交互开销。在用户桌面应用场景下，分配给虚拟机管理的内存不大，停顿时间完全在可控范围内。</p><h5 id="2parnew收集器"><a class="markdownIt-Anchor" href="#2parnew收集器"></a> 2.ParNew收集器</h5><p>Serial的多线程版本，运行在Server模式下虚拟机新生代首选的新生代收集器。</p><ul><li>并发：多个线程同时执行（但是在微观上是交替进行的）</li><li>并行：多个线程同一时刻都在运行</li></ul><h5 id="3parallel-scavenge收集器"><a class="markdownIt-Anchor" href="#3parallel-scavenge收集器"></a> 3.Parallel Scavenge收集器</h5><p>新生代收集器，使用复制算法，并行的多线程收集器。</p><ul><li><strong>特别之处：</strong></li></ul><p>Parallel Scavenge收集器关注目的是达到一个可以控制的吞吐量。</p><p>​吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）</p><p>高吞吐量可以高效利用CPU时间，尽快完成程序的运算任务。</p><p>相比之下：</p><p>CMS等收集器关注尽可能地缩短垃圾收集用户线程停顿时间</p><p>停顿时间越短越适合需要与用户交互的程序，良好的相应速度提升用户体验。</p><ul><li>Parallel Scavenge收集器两个参数用于精确控制吞吐量。</li></ul><p>-XX:MaxGCPauseMillis控制最大的停顿时间</p><p>-XX:GCTimeRatio直接设置吞吐量大小</p><h6 id="自适应调节策略"><a class="markdownIt-Anchor" href="#自适应调节策略"></a> 自适应调节策略</h6><p>Parallel Scavenge收集器被称为吞吐量优先的收集器</p><p>-XX:UseAdaptiveSizePolicy参数是一个开关参数，该参数打开，不需要手动指定新生代的大小，Eden与Survivor区的比例，晋升老年代对象的大小等细节参数了，虚拟机会根据当前系统运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间和最大的吞吐量。这种调节方式叫做GC自适应的调节策略。</p><p>自适应调节是Parallel Scavenge收集器与ParNew收集器的一个重要区别。</p><h5 id="4serial-old收集器"><a class="markdownIt-Anchor" href="#4serial-old收集器"></a> 4.Serial Old收集器</h5><p>使用标记整理算法，单线程老年代收集器，Client模式下虚拟机使用。如果在Server模式下两个用途：</p><ol><li>在JDK1.5之前的版本中与Parallel Scavenge收集器搭配使用</li><li>作为CMS收集器的后备预案，在并发收集中发生Concurrent Mode Failure时使用</li></ol><h5 id="5parallel-old收集器"><a class="markdownIt-Anchor" href="#5parallel-old收集器"></a> 5.Parallel Old收集器</h5><p>Parallel Old收集器是Parallel Scavenge收集器的老年版本，多线程，标记整理算法。</p><p>由于Parallel Scavenge收集器在Parallel Old收集器出现之前，Parallel Scavenge收集器只能与Serial Old配合，Serial在服务器端应用性能拖累，Parallel Scavenge收集器的最大吞吐量不能获得最大化效果。</p><h5 id="6cms收集器"><a class="markdownIt-Anchor" href="#6cms收集器"></a> 6.CMS收集器</h5><p>以获取最短回收停顿时间为目标的收集器，目前大部分Java应用集中在互联网网站或者B/S系统的服务器端上，这类应用重视服务器响应速度，希望停顿时间最短，带来较好的用户体验。</p><p>标记清除算法</p><p><strong>运行步骤：</strong></p><ol><li><p>初始标记</p></li><li><p>并发标记</p></li><li><p>重新标记</p></li><li><p>并发清除</p><p><strong>解释</strong>：</p></li></ol><ul><li>其中初始标记和重新标记需要Stop The World。</li><li>初始标记标记一下GC Roots能直接关联到的对象，速度快</li><li>并发标记阶段进行GC Roots Tracing 的过程</li><li>重新标记为了修正并发标记期间因用户程序继续运行而导致的标记产生变化的那一部分对象的标记，这阶段的停顿时间大于初始标记停顿时间。</li><li>并发标记和并发清除都可以和用户线程一起运行，从整体上可以看做CMS收集器的内存回收过程与用户线程一起并发执行。</li></ul><p><strong>缺点</strong>：</p><ol><li><p>CPU资源敏感</p></li><li><p>无法处理浮动垃圾：在CMS进行并发垃圾清除阶段，用户线程还在执行过程中产生的垃圾没有标记，此次GC无法处理这个阶段产生的垃圾，这些垃圾叫做浮动垃圾，只能遗留至下一次GC过程进行垃圾回收。</p><p>参数<code>-XX:CMSInitiatingOccupancyFraction</code>设置老年代使用空间达到多少时激活CMS收集器，一般设置为68%，设置阈值偏高会导致，Concurrent Mode Failure，虚拟机启用Serial Old收集器，提高停顿时间性能降低。</p></li><li><p>由于吃用标记清除算法导致产生大量的内存垃圾</p></li></ol><h5 id="7g1收集器"><a class="markdownIt-Anchor" href="#7g1收集器"></a> 7.G1收集器</h5><h4 id="内存分配策略"><a class="markdownIt-Anchor" href="#内存分配策略"></a> 内存分配策略</h4><h5 id="对象优先在eden分配"><a class="markdownIt-Anchor" href="#对象优先在eden分配"></a> 对象优先在Eden分配</h5><p>大多数情况下，对象会在新生代Eden区中分配，当Eden没有足够的空间，虚拟机发起一次Minor GC。</p><p>​Minor GC是新生代GC发生在新生代垃圾回收动作，新生代对象朝生夕死，所以Minor GC 频率高，速度快</p><p>​Major GC/Full GC发生在老年代的垃圾收集动作，速度比Minor GC 慢十倍以上。</p><h5 id="大对象直接进入老年代"><a class="markdownIt-Anchor" href="#大对象直接进入老年代"></a> 大对象直接进入老年代</h5><h5 id="长期存活的对象直接进入老年代"><a class="markdownIt-Anchor" href="#长期存活的对象直接进入老年代"></a> 长期存活的对象直接进入老年代</h5><p>虚拟机给对象定义年龄计时器，没熬过一次Minor GC，年龄计时器就加1，年龄增长到一定程度就直接晋升老年代。</p><h5 id="动态对象年龄判断"><a class="markdownIt-Anchor" href="#动态对象年龄判断"></a> 动态对象年龄判断</h5><p>在Survivor空间中相同年龄所有对象大小总和大于Survivor空间的一半，年龄大于等于代年龄的对象直接进入老年代。无须达到进入老年代的年龄。</p><h5 id="空间分配担保"><a class="markdownIt-Anchor" href="#空间分配担保"></a> 空间分配担保</h5><p>在发生Minor GC 之前虚拟机先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，这个条件成立，Minor GC可以确保是安全的。如果不成立，虚拟机查看<code>HandlePromotionFailure</code>设置的值是否允许担保失败，如果允许，那么虚拟机继续检查老年代最大可用连续空间是否大于历次晋升到老年代对象的平均大小，如果大于就尝试进行Minor GC，这次Minor GC 是有风险的。如果小于，或者<code>HandlePromotionFailure</code>设置不允许冒险，这时就要进行一次Full GC。</p><h5 id="为何hotspot虚拟机要实现两个不同的即时编译器"><a class="markdownIt-Anchor" href="#为何hotspot虚拟机要实现两个不同的即时编译器"></a> 为何HotSpot虚拟机要实现两个不同的即时编译器？</h5><h2 id="第二部分-虚拟机执行子系统"><a class="markdownIt-Anchor" href="#第二部分-虚拟机执行子系统"></a> 第二部分 虚拟机执行子系统</h2><h3 id="类文件结构"><a class="markdownIt-Anchor" href="#类文件结构"></a> 类文件结构</h3><p>class文件的头四个字节为魔数，确定这个文件是否为一个被虚拟机接收的class文件，魔数用做身份识别。</p><p>接下来的四个字节为class版本号：第五第六个字节为次版本号，第七第八字节为主版本号。高版本JDK可以兼容低版本，但是低版本不能运行高版本class文件。</p><p>紧接着为常量池入口，class文件资源仓库，最大数据项目之一，常量池数量不固定需要一个u2类型的数据代表常量池计数值。计数值从1开始。</p><p>​常量池两大类常量：字面量和符号引用</p><p>​符号引用包括：类和接口的全限定名、字段的名称和描述、方法的名称和描述</p><p>访问标志：public final super interface abstract synthetic annotation enum</p><p>类索引 父类索引 接口索引集合</p><p>字段表集合描述接口或者类中声明的变量</p><p>方法表集合</p><p>属性表集合</p><h3 id="虚拟机类加载机制"><a class="markdownIt-Anchor" href="#虚拟机类加载机制"></a> 虚拟机类加载机制</h3><p>类的生命周期：加载、连接（验证、准备、解析）、初始化、使用、卸载。</p><p>详细见java高并发详解</p><h2 id="第三部分-程序编译代码优化"><a class="markdownIt-Anchor" href="#第三部分-程序编译代码优化"></a> 第三部分 程序编译代码优化</h2><h3 id="javac编译器"><a class="markdownIt-Anchor" href="#javac编译器"></a> Javac编译器</h3><p>HotSpot虚拟机使用c++语言实现，Javac编译器由Java语言编写。</p><h4 id="编译的过程"><a class="markdownIt-Anchor" href="#编译的过程"></a> 编译的过程：</h4><p>解析与填充符号表过程：词法分析和语法分析，填充符号表</p><p>插入式注解器的注解过程</p><p>语义分析字节码生成过程</p><h3 id="hotspot的即时编译器"><a class="markdownIt-Anchor" href="#hotspot的即时编译器"></a> HotSpot的即时编译器</h3><p>HotSpot虚拟机是解释器和编译器并存架构，当程序需要迅速启动和执行使用解释器，程序运行后随之时间推移编译器之间发挥作用。</p><p>HotSpot虚拟机内部有两个即时编译器Client Compiler和Server Compiler，简化为c1、c2编译器。</p><p>主流的HotSpot虚拟机默认采用解释器和其中一个编译器配合使用的工作方式，程序使用哪种编译器主要取决于虚拟机的运行模式。HotSpot虚拟机会根据自身的版本于宿主机器的硬件性能自动选择运行的模式，用户也可通过使用<code>-client</code>或者<code>-server</code>参数强制指定虚拟机运行在哪个模块下。</p><h5 id="什么是热点代码"><a class="markdownIt-Anchor" href="#什么是热点代码"></a> 什么是热点代码？</h5><ul><li>被多次调用的方法</li><li>被多次调用的循环体</li></ul><p>这两种情况，编译器是以对象为编译对象。栈上替换，即方法栈帧还在栈上，方法就被替换。</p><p>方法计数器：统计方法调用的次数</p><p>回边计数器：统计一个方法中循环体代码执行的次数，在字节码中遇到控制流向后跳转的指令称为回边。</p><h3 id="代码优化技术"><a class="markdownIt-Anchor" href="#代码优化技术"></a> 代码优化技术</h3><h4 id="语言无关的公共子表达式消除"><a class="markdownIt-Anchor" href="#语言无关的公共子表达式消除"></a> 语言无关的公共子表达式消除</h4><p>一个表达式已经计算过，并且没有发生变化，那该表达式就是公共子表达式。对于这个表达式直接使用之前的计算结果代替该表达式即可。</p><p>如果这种优化仅限于程序基本块内就成为局部公共子表达式消除，如果优化范围覆盖多个基本块就称为全局公共子表达式消除。</p><h4 id="语言相关的数组边界检查消除"><a class="markdownIt-Anchor" href="#语言相关的数组边界检查消除"></a> 语言相关的数组边界检查消除</h4><p>把运行期检查提到编译期完成。</p><p>其他类似优化技术：自动装箱消除，安全点消除、消除反射等等。</p><h4 id="方法内联"><a class="markdownIt-Anchor" href="#方法内联"></a> 方法内联</h4><h4 id="逃逸分析"><a class="markdownIt-Anchor" href="#逃逸分析"></a> 逃逸分析</h4><p>逃逸分析的基本行为：分析对象的动态作用域，一个对象被定义后，可能被外部方法引用，例如通过调用参数传递到其他的方法就是方法逃逸。有可能被外部线程访问，例如赋值给类变量或者可以在其他线程中访问该实例对象，叫做线程逃逸。</p><p>别的方法或者线程无法通过任何渠道访问这个对象实例，也就是对象不会逃逸到方法或者线程之外。对这个变量进行优化：</p><ul><li><p>栈上分配</p><p>Java堆中的对象对于各个线程都是共享和可见的，只要持有该对象的引用就可以访问该对象的数据。如果想要避免这个对象不会逃逸出方法之外，就将其在栈上分配内存，对象所占空间会随着方法调用返回出栈而销毁。一般应用中不会逃逸的局部对象所占的比例较大，如果栈上分配，垃圾回收系统的压力会减小。</p></li><li><p>同步消除</p><p>对这个变量实施同步措施就可以消除其逃逸到别的线程</p></li><li><p>标量替换</p><p>标量是指一个数据已经无法再分解成更小的数据来表示了，Java中的原始数据类型（int，long等数据类型，reference类型）都是不能进一步分解的。如果一个数据可以被分解称为聚合量。</p><p>把一个Java对象拆散，根据程序访问情况将其使用到的成员变量恢复原始数据类型来访问叫做标量替换。</p><p>如果逃逸分析证明一个对象不会被外部访问，并且这个对象可以被拆散，程序真正执行的时候可能不创建这个对象改为直接创建它的若干个被这个方法使用的成员变量来替换。对象拆分后不仅可以在栈上分配和读写之外，还可以为后续优化创造条件。</p></li></ul><h3 id="java编译器和c编译器的对比"><a class="markdownIt-Anchor" href="#java编译器和c编译器的对比"></a> Java编译器和C++编译器的对比</h3><p>代表即时编译器与静态编译器的对比</p><ol><li>即时编译器编译过程占用用户线程的运行时间，具有时间压力，如果编译的速度不能达到要求用户程序将会察觉到重大的延迟。严重受制于编译成本，而静态编译器不考虑编译成本。</li><li>Java语言是动态类型的编译语言，虚拟机必须频繁的动态检查，对于程序没有明确的检查行为，尽管努力优化但是也会消耗运行时间</li><li>Java中没有virtual关键字，但虚方法使用频率远远大于C++语言，所以运行时对方法接收者进行动态选择频率较高。</li><li>Java是动态可扩展语言，运行时加载新的类可能改变程序类型的继承关系，使得全局优化难以进行，因为编译器无法看到程序全貌。许多的优化措施只能以激进优化的方式进行。</li><li>Java对象大多分配在堆内存，很少分配在栈上。垃圾回收上，C<ins>使用代码进行回收，Java中存在无用对象筛选，所以Java在垃圾回收上效率较C</ins>低。</li></ol><p>Java语言在性能上的劣势为了换取开发上的效率，比如动态安全，动态扩展，垃圾回收机制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java虚拟机&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java虚拟机&quot;&gt;&lt;/a&gt; Java虚拟机&lt;/h1&gt;
&lt;h2 id=&quot;第一部分-jvm基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一部分</summary>
      
    
    
    
    <category term="Java" scheme="https://duanjiaojiao316.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java 基础</title>
    <link href="https://duanjiaojiao316.github.io/2019/12/15/Java%E5%9F%BA%E7%A1%80/"/>
    <id>https://duanjiaojiao316.github.io/2019/12/15/Java%E5%9F%BA%E7%A1%80/</id>
    <published>2019-12-15T12:25:17.000Z</published>
    <updated>2021-04-20T07:44:33.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-基础"><a class="markdownIt-Anchor" href="#java-基础"></a> Java 基础</h1><h2 id="1-java特性"><a class="markdownIt-Anchor" href="#1-java特性"></a> 1、Java特性</h2><h3 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h3><h4 id="super关键字的使用"><a class="markdownIt-Anchor" href="#super关键字的使用"></a> super关键字的使用</h4><p>super关键字的两种用法：</p><ol><li>调用超类的构造函数</li><li>访问超类中被子类的某个成员隐藏的成员（同名隐藏）</li></ol><p>注意：</p><p>调用超类构造函数<code>super()</code>必须是子类构造函数中的第一条语句。</p><p><code>必须在构造器的第一行放置super或者this构造器，否则编译器会自动地放一个空参数的super构造器的，其他的构造器也可以调用super或者this，调用成一个递归构造链，最后的结果是父类的构造器（可能有多级父类构造器）始终在子类的构造器之前执行，递归的调用父类构造器。无法执行当前的类的构造器。也就不能实例化任何对象，这个类就成为一个无为类。 从另外一面说，子类是从父类继承而来，继承了父类的属性和方法，如果在子类中先不完成父类的成员的初始化，则子类无法使用，因为在java中不允许调用没初始化的成员。在构造器中是顺序执行的，也就是说必须在第一行进行父类的初始化。而super能直接完成这个功能。this()通过调用本类中的其他构造器也能完成这个功能。 因此，this()或者super()必须放在第一行。</code></p><h4 id="向上转型"><a class="markdownIt-Anchor" href="#向上转型"></a> 向上转型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person s = <span class="keyword">new</span> Student(<span class="number">15</span>,<span class="string">&quot;djj&quot;</span>,<span class="number">96</span>);</span><br></pre></td></tr></table></figure><p>但是用过s引用不能查找子类中的变量实现等。</p><p>如果子类覆写父类的一个方法，s调用这个方法，实现是student的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;the Person&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> age, String name, <span class="keyword">int</span> score)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(age, name);</span><br><span class="line">        <span class="keyword">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;the Student&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person s = <span class="keyword">new</span> Student(<span class="number">15</span>,<span class="string">&quot;djj&quot;</span>,<span class="number">96</span>);</span><br><span class="line">        s.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">    the Student</span><br></pre></td></tr></table></figure><h4 id="向下转型"><a class="markdownIt-Anchor" href="#向下转型"></a> 向下转型</h4><p>向下转型可能会失败，抛出 <code>ClassCastException</code>异常。</p><h4 id="区分继承和组合"><a class="markdownIt-Anchor" href="#区分继承和组合"></a> 区分继承和组合</h4><p>is关系采用继承，但是has关系使用组合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Book book;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态"><a class="markdownIt-Anchor" href="#多态"></a> 多态</h3><p>多态是指，针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</p><p>利用多态，<code>totalTax()</code>方法只需要和<code>Income</code>打交道，它完全不需要知道<code>Salary</code>和<code>StateCouncilSpecialAllowance</code>的存在，就可以正确计算出总的税。如果我们要新增一种稿费收入，只需要从<code>Income</code>派生，然后正确覆写<code>getTax()</code>方法就可以。把新的类型传入<code>totalTax()</code>，不需要修改任何代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">double</span> income;</span><br><span class="line">    <span class="comment">//计算税</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> income * <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工资</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Salary</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (income &lt;= <span class="number">5000</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (income - <span class="number">5000</span>) * <span class="number">0.2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//国家津贴</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateCouncilSpecialAllowance</span> <span class="keyword">extends</span> <span class="title">Income</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getTax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Income income = <span class="keyword">new</span> Income();</span><br><span class="line">        income.income = <span class="number">1000</span>;</span><br><span class="line">        Salary salary = <span class="keyword">new</span> Salary();</span><br><span class="line">        salary.income = <span class="number">6000</span>;</span><br><span class="line">        StateCouncilSpecialAllowance state = <span class="keyword">new</span> StateCouncilSpecialAllowance();</span><br><span class="line">        state.income = <span class="number">5000</span>;</span><br><span class="line">        System.out.println(totalTax(salary, state));</span><br><span class="line">        System.out.println(totalTax(state));</span><br><span class="line">        System.out.println(totalTax(salary));</span><br><span class="line">        System.out.println(totalTax(income, salary));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">totalTax</span><span class="params">(Income... incomes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Income income: incomes) &#123;</span><br><span class="line">            total = total + income.getTax();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>：<span class="title">public</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">A *pa = <span class="keyword">new</span> B();</span><br><span class="line">pa-&gt;foo();</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line"><span class="number">200.0</span></span><br><span class="line"><span class="number">0.0</span></span><br><span class="line"><span class="number">200.0</span></span><br><span class="line"><span class="number">300.0</span></span><br></pre></td></tr></table></figure><h2 id="2-包"><a class="markdownIt-Anchor" href="#2-包"></a> 2、包</h2><h3 id="21包和成员访问"><a class="markdownIt-Anchor" href="#21包和成员访问"></a> 2.1包和成员访问</h3><table><thead><tr><th></th><th>private</th><th>无访问修饰符</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>在同一个类中是否可见</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>相同的包中的子类</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>相同的包中的非子类</td><td>否</td><td>是</td><td>是</td><td>是</td></tr><tr><td>不同包中的子类</td><td>否</td><td>否</td><td>是</td><td>是</td></tr><tr><td>不同包中的非子类</td><td>否</td><td>否</td><td>否</td><td>是</td></tr></tbody></table><ul><li>public 可以在任何位置访问</li><li>默认访问级别 子类或者相同包的下的其他类可以访问</li><li>protected 可以在包外访问，但是仅限子类可以访问</li><li>private只能在自己的类中访问</li></ul><h2 id="3-接口"><a class="markdownIt-Anchor" href="#3-接口"></a> 3、接口</h2><h3 id="31接口中的变量"><a class="markdownIt-Anchor" href="#31接口中的变量"></a> 3.1接口中的变量</h3><p>可以使用接口将共享的变量导入到多个类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SharedConstants</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> NO = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> Yes = <span class="number">1</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">这些变量在作用域内会被作为常量。</font></p><h3 id="32默认接口方法"><a class="markdownIt-Anchor" href="#32默认接口方法"></a> 3.2默认接口方法</h3><p>在JDK1.8之前没有默认接口方法，默认方法之前使用关键字default。</p><p>动机：</p><ol><li>给接口添加新的方法，不会破坏之前实现该接口的代码。由于必须实现接口中的所有方法，如果接口加入新的方法，那么实现它的类就必须实现该方法，这样就会破坏现有的代码。</li><li>让新方法的实现具有可选性。有些类可以选择不使用。</li></ol><h3 id="33多级继承问题"><a class="markdownIt-Anchor" href="#33多级继承问题"></a> 3.3多级继承问题</h3><p>一个类实现两个接口，这两个接口提供了相同的方法，这个方法会产生冲突。</p><p>类的实现的优先级高于接口默认方法的优先级。所以可以通过类的实现解决冲突。</p><h3 id="34接口的静态方法"><a class="markdownIt-Anchor" href="#34接口的静态方法"></a> 3.4接口的静态方法</h3><p>同类的静态方法，无须实现接口，也无须接口的实例，只需要接口名就可以使用接口的默认静态方法。</p><h3 id="35私有的接口方法"><a class="markdownIt-Anchor" href="#35私有的接口方法"></a> 3.5私有的接口方法</h3><h2 id="4-异常"><a class="markdownIt-Anchor" href="#4-异常"></a> 4、异常</h2><h3 id="41链式异常"><a class="markdownIt-Anchor" href="#41链式异常"></a> 4.1链式异常</h3><p>链式异常可以为异常关联另一个异常，为了描述造成以第一个异常的原因。</p><p>构造函数关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Throwable</span><span class="params">(String message, Throwable cause)</span> </span>&#123;</span><br><span class="line">       fillInStackTrace();</span><br><span class="line">       detailMessage = message;</span><br><span class="line">       <span class="keyword">this</span>.cause = cause;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Throwable</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">       fillInStackTrace();</span><br><span class="line">       detailMessage = (cause==<span class="keyword">null</span> ? <span class="keyword">null</span> : cause.toString());</span><br><span class="line">       <span class="keyword">this</span>.cause = cause;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>支持链式异常的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Throwable <span class="title">getCause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (cause==<span class="keyword">this</span> ? <span class="keyword">null</span> : cause);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Throwable <span class="title">initCause</span><span class="params">(Throwable cause)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.cause != <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Can&#x27;t overwrite cause with &quot;</span> +</span><br><span class="line">                                        Objects.toString(cause, <span class="string">&quot;a null&quot;</span>), <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (cause == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Self-causation not permitted&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.cause = cause;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getCause方法返回引起当前异常的异常，没有就返回null。</p><p>对于每个异常对象只能进行一次initCause，如果使用构造函数关联就不能再使用initCause进行设置。通常initCause方法是为了解决之前不支持链式异常的异常类（不包含支持链式异常的构造方法）不能关联异常设置的。</p><h2 id="5-io-bio-nio-aio"><a class="markdownIt-Anchor" href="#5-io-bio-nio-aio"></a> 5、IO (BIO) NIO AIO</h2><h3 id="51-bio-nio-aio的区别"><a class="markdownIt-Anchor" href="#51-bio-nio-aio的区别"></a> 5.1 BIO、NIO、AIO的区别</h3><ol><li>BIO 就是传统的 <a href="http://java.io/">java.io</a> 包，它是基于流模型实现的，交互的方式是<strong>同步、阻塞</strong>方式，也就是说在读入输入流或者输出流时，在读写动作完成之前，线程会一直阻塞在那里，它们之间的调用时可靠的线性顺序。它的有点就是代码比较简单、直观；缺点就是 IO 的效率和扩展性很低，容易成为应用性能瓶颈。</li><li>NIO 是 Java 1.4 引入的 java.nio 包，提供了 Channel、Selector、Buffer 等新的抽象，可以构建<strong>多路复用</strong>的、<strong>同步非阻塞</strong> IO 程序，同时提供了更接近操作系统底层高性能的数据操作方式。</li><li>AIO 是 Java 1.7 之后引入的包，是 NIO 的升级版本，提供了<strong>异步非堵塞</strong>的 IO 操作方式，所以人们叫它 AIO（Asynchronous IO），异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。</li></ol><h3 id="52-io"><a class="markdownIt-Anchor" href="#52-io"></a> 5.2 IO</h3><h4 id="传统的-io-大致可以分为4种类型"><a class="markdownIt-Anchor" href="#传统的-io-大致可以分为4种类型"></a> 传统的 IO 大致可以分为4种类型：</h4><ul><li>InputStream、OutputStream 基于字节操作的 IO</li><li>Writer、Reader 基于字符操作的 IO</li><li>File 基于磁盘操作的 IO</li><li>Socket 基于网络操作的 IO</li></ul><h4 id="inputstream-outputstream-writer-reader"><a class="markdownIt-Anchor" href="#inputstream-outputstream-writer-reader"></a> <strong>InputStream OutputStream Writer Reader</strong></h4><p><img src="/2019/12/15/Java%E5%9F%BA%E7%A1%80/D:%5C%E9%9D%A2%E8%AF%95%5Cspringbootimages%5Cjavacore-io-001.png" alt="img">  <img src="http://icdn.apigo.cn/blog/javacore-io-002.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:\\log.txt&quot;</span>);</span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[inputStream.available()];</span><br><span class="line">inputStream.read(bytes);</span><br><span class="line">String str = <span class="keyword">new</span> String(bytes, <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">System.out.println(str);</span><br><span class="line">inputStream.close();</span><br><span class="line"></span><br><span class="line">OutputStream outputStream = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:\\log.txt&quot;</span>,<span class="keyword">true</span>); <span class="comment">// 参数二，表示是否追加，true=追加</span></span><br><span class="line">outputStream.write(<span class="string">&quot;你好，老王&quot;</span>.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">outputStream.close();</span><br></pre></td></tr></table></figure><p><img src="http://icdn.apigo.cn/blog/javacore-io-004.png" alt="img"></p><p><img src="http://icdn.apigo.cn/blog/javacore-io-003.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Writer writer = <span class="keyword">new</span> FileWriter(<span class="string">&quot;D:\\log.txt&quot;</span>,<span class="keyword">true</span>); <span class="comment">// 参数二，是否追加文件，true=追加</span></span><br><span class="line">writer.append(<span class="string">&quot;老王，你好&quot;</span>);</span><br><span class="line">writer.close();</span><br><span class="line"></span><br><span class="line">Reader reader = <span class="keyword">new</span> FileReader(<span class="string">&quot;D:\\log.txt&quot;</span>);</span><br><span class="line">BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">StringBuffer bf = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">String str;</span><br><span class="line"><span class="keyword">while</span> ((str = bufferedReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    bf.append(str + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">bufferedReader.close();</span><br><span class="line">reader.close();</span><br><span class="line">System.out.println(bf.toString());</span><br></pre></td></tr></table></figure><h4 id="java-7-引入了filesjavanio包下的大大简化了文件的读写如下"><a class="markdownIt-Anchor" href="#java-7-引入了filesjavanio包下的大大简化了文件的读写如下"></a> Java 7 引入了Files（java.nio包下）的，大大简化了文件的读写，如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入文件（追加方式：StandardOpenOption.APPEND）</span></span><br><span class="line">Files.write(Paths.get(filePath), Content.getBytes(StandardCharsets.UTF_8), StandardOpenOption.APPEND);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件</span></span><br><span class="line"><span class="keyword">byte</span>[] data = Files.readAllBytes(Paths.get(filePath));</span><br><span class="line">System.out.println(<span class="keyword">new</span> String(data, StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建多（单）层目录（如果不存在创建，存在不会报错）</span></span><br><span class="line"><span class="keyword">new</span> File(<span class="string">&quot;D://a//b&quot;</span>).mkdirs();</span><br></pre></td></tr></table></figure><p>一个简单的 Socket，服务器端只发给客户端信息，再由客户端打印出来的例子，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> port = <span class="number">4343</span>; <span class="comment">//端口号</span></span><br><span class="line"><span class="comment">// Socket 服务器端（简单的发送信息）</span></span><br><span class="line">Thread sThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 等待连接</span></span><br><span class="line">                Socket socket = serverSocket.accept();</span><br><span class="line">                Thread sHandlerThread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">try</span> (PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(socket.getOutputStream())) &#123;</span><br><span class="line">                            printWriter.println(<span class="string">&quot;hello world！&quot;</span>);</span><br><span class="line">                            printWriter.flush();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            e.printStackTrace();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                sHandlerThread.start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">sThread.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket 客户端（接收信息并打印）</span></span><br><span class="line"><span class="keyword">try</span> (Socket cSocket = <span class="keyword">new</span> Socket(InetAddress.getLocalHost(), port)) &#123;</span><br><span class="line">    BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(cSocket.getInputStream()));</span><br><span class="line">    bufferedReader.lines().forEach(s -&gt; System.out.println(<span class="string">&quot;客户端：&quot;</span> + s));</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用 accept 方法，阻塞等待客户端连接；</li><li>利用 Socket 模拟了一个简单的客户端，只进行连接、读取和打印；</li></ul><p>在 Java 中，线程的实现是比较重量级的，所以线程的启动或者销毁是很消耗服务器的资源的，即使使用线程池来实现，使用上述传统的 Socket 方式，当连接数极具上升也会带来性能瓶颈，原因是线程的上线文切换开销会在高并发的时候体现的很明显，并且以上操作方式还是同步阻塞式的编程，性能问题在高并发的时候就会体现的尤为明显。</p><p><img src="http://icdn.apigo.cn/blog/javacore-io-005.png" alt="img"></p><p>Writer、Reader 基于字符操作的 IO</p><p>File 基于磁盘操作的 IO</p><p>Socket 基于网络操作的 IO</p><h2 id="6"><a class="markdownIt-Anchor" href="#6"></a> 6、</h2><h3 id="hashmap是怎么实现的底层原理"><a class="markdownIt-Anchor" href="#hashmap是怎么实现的底层原理"></a> Hashmap是怎么实现的，底层原理？</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The maximum capacity, used if a higher value is implicitly specified</span></span><br><span class="line"><span class="comment">     * by either of the constructors with arguments.</span></span><br><span class="line"><span class="comment">     * MUST be a power of two &lt;= 1&lt;&lt;30.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment">     * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment">     * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment">     * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment">     * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment">     * shrinkage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bin count threshold for untreeifying a (split) bin during a</span></span><br><span class="line"><span class="comment">     * resize operation. Should be less than TREEIFY_THRESHOLD, and at</span></span><br><span class="line"><span class="comment">     * most 6 to mesh with shrinkage detection under removal.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 当resize操作时候发现链表长度小于6时，从红黑树退化为链表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The smallest table capacity for which bins may be treeified.</span></span><br><span class="line"><span class="comment">     * (Otherwise the table is resized if too many nodes in a bin.)</span></span><br><span class="line"><span class="comment">     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts</span></span><br><span class="line"><span class="comment">     * between resizing and treeification thresholds.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment">     * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment">     * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment">     * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用于存储map中key和value的结构体</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Holds cached entrySet(). Note that AbstractMap fields are used</span></span><br><span class="line"><span class="comment">     * for keySet() and values().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of key-value mappings contained in this map.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of times this HashMap has been structurally modified</span></span><br><span class="line"><span class="comment">     * Structural modifications are those that change the number of mappings in</span></span><br><span class="line"><span class="comment">     * the HashMap or otherwise modify its internal structure (e.g.,</span></span><br><span class="line"><span class="comment">     * rehash).  This field is used to make iterators on Collection-views of</span></span><br><span class="line"><span class="comment">     * the HashMap fail-fast.  (See ConcurrentModificationException).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The next size value at which to resize (capacity * load factor).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// (The javadoc description is true upon serialization.</span></span><br><span class="line">    <span class="comment">// Additionally, if the table array has not been allocated, this</span></span><br><span class="line">    <span class="comment">// field holds the initial array capacity, or zero signifying</span></span><br><span class="line">    <span class="comment">// DEFAULT_INITIAL_CAPACITY.)</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The load factor for the hash table.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure><p><code>transient Node&lt;K,V&gt;[] table;</code>这表示HashMap是Node数组构成，其中Node类的实现如下，为HashMap的内部类，可以看出这其实就是个链表，链表的每个结点是一个&lt;K,V&gt;映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">&quot;=&quot;</span> + value; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</span><br><span class="line">            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</span><br><span class="line">            <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</span><br><span class="line">                Objects.equals(value, e.getValue()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>transient int modCount;``modCount</code>在<code>HashMap</code>，<code>ArrayList</code>和<code>LinkedList</code>中都有，不同之处ArrayList和LinkedList中的modCount继承自<code>AbstractList</code>的<code>protected transient int modCount = 0；</code></p><blockquote><p>在一个迭代器初始的时候会赋予它调用这个迭代器的对象的modCount，如果在迭代器遍历的过程中，<strong>一旦发现这个对象的modCount和迭代器中存储的modCount不一样那就抛异常。</strong></p><p><strong>Fail-Fast机制</strong>：java.util.HashMap不是线程安全的，因此如果在使用迭代器的过程中有其他线程修改了map，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。这一策略在源码中的实现是通过modCount域，modCount顾名思义就是修改次数，**对HashMap内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的expectedModCount。**在迭代过程中，判断modCount跟expectedModCount是否相等，如果不相等就表示已经有其他线程修改了Map。</p></blockquote><p><strong>注意初始容量和扩容后的容量都必须是2的次幂</strong>，为什么呢?</p><p><strong>hash方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HashMap的散列方法如上，其实就是将hash值的高16位和低16位异或，我们将马上看到hash在与n - 1相与的时候，高位的信息也被考虑了，能使碰撞的概率减小，散列得更均匀。</p><p>在JDK 8中，HashMap的putVal方法中有这么一句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">    tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>关键就是这句<code>(n - 1) &amp; hash</code>，<strong>这行代码是把待插入的结点散列到数组中某个下标中</strong>。</p><p>为什么HashMap的容量要始终保持2的次幂？</p><ul><li><strong>使散列值分布均匀</strong></li><li><strong>位运算的效率比取余的效率高</strong></li></ul><p>注意table.length是数组的容量，而<code>transient int size</code>表示存入Map中的键值对数。</p><p><code>int threshold</code>表示临界值，当键值对的个数大于临界值，就会扩容。threshold的更新是由下面的方法完成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = cap - <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>该方法返回大于等于cap的最小的二次幂数值。比如cap为16，就返回16，cap为17就返回32。</p><p><strong>put方法</strong></p><p>put方法主要由putVal方法实现：</p><ul><li>如果没有产生hash冲突，直接在数组<code>tab[i = (n - 1) &amp; hash]</code>处新建一个结点；</li><li>否则，发生了hash冲突，此时key如果和头结点的key相同，找到要更新的结点，直接跳到最后去更新值</li><li>否则，如果数组下标中的类型是TreeNode，就插入到红黑树中</li><li>如果只是普通的链表，就在链表中查找，找到key相同的结点就跳出，到最后去更新值；到链表尾也没有找到就在尾部插入一个新结点。接着判断此时链表长度若大于8的话，还需要将链表转为红黑树（注意在要将链表转为红黑树之前，再进行一次判断，若数组容量小于64，则用resize扩容，放弃转为红黑树）</li></ul><p><strong>get方法</strong></p><p>get方法由getNode方法实现：</p><ul><li>如果在数组下标的链表头就找到key相同的，那么返回链表头的值</li><li>否则如果数组下标处的类型是TreeNode，就在红黑树中查找</li><li>否则就是在普通链表中查找了</li><li>都找不到就返回null</li></ul><p>remove方法的流程大致和get方法类似。</p><p><strong>HashMap的扩容，resize()过程？</strong></p><p>newCap = oldCap &lt;&lt; 1;</p><p>resize方法中有这么一句，说明是扩容后数组大小是原数组的两倍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">        table = newTab;</span><br><span class="line">        <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e;</span><br><span class="line">                <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// 如果数组中只有一个元素，即只有一个头结点，重新哈希到新数组的某个下标</span></span><br><span class="line">                    <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                        newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                        ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                    <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                        <span class="comment">// 数组下标处的链表长度大于1，非红黑树的情况</span></span><br><span class="line">                        Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        Node&lt;K,V&gt; next;</span><br><span class="line">                        <span class="keyword">do</span> &#123;</span><br><span class="line">                            next = e.next;</span><br><span class="line">                            <span class="comment">// oldCap是2的次幂，最高位是1，其余为是0，哈希值和其相与，根据哈希值的最高位是1还是0，链表被拆分成两条，哈希值最高位是0分到loHead。</span></span><br><span class="line">                            <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                    loHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = e;</span><br><span class="line">                                loTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">// 哈希值最高位是1分到hiHead</span></span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                    hiHead = e;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = e;</span><br><span class="line">                                hiTail = e;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="comment">// loHead挂到新数组[原下标]处；</span></span><br><span class="line">                            newTab[j] = loHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="comment">// hiHead挂到新数组中[原下标+oldCap]处</span></span><br><span class="line">                            newTab[j + oldCap] = hiHead;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newTab;</span><br></pre></td></tr></table></figure><p>举个例子，比如oldCap是16，二进制表示是10000，hash值的后五位和oldCap相与，因为oldCap的最高位（从右往左数的第5位）是1其余位是0，因此hash值的该位是0的所有元素被分到一条链表，挂到新数组中原下标处，hash值该位为1的被分到另外一条链表，挂到新数组中原下标+oldCap处。举个例子：桶0中的元素其hash值后五位是0XXXX的就被分到桶0种，其hash值后五位是1XXXX就被分到桶4中。</p><h3 id="hashtable通过synchronized实现线程安全"><a class="markdownIt-Anchor" href="#hashtable通过synchronized实现线程安全"></a> <code>HashTable</code>通过synchronized实现线程安全</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="concurrenthashmap"><a class="markdownIt-Anchor" href="#concurrenthashmap"></a> <code>ConcurrentHashMap</code></h3><p>ConcurrentHashMap采用了非常精妙的&quot;分段锁&quot;策略，ConcurrentHashMap的主干是个Segment数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br></pre></td></tr></table></figure><p>Segment继承了<code>ReentrantLock</code>，所以它就是一种可重入锁。在<code>ConcurrentHashMap</code>，一个Segment就是一个子哈希表，Segment里维护了一个<code>HashEntry</code>数组，并发环境下，对于不同Segment的数据进行操作是不用考虑锁竞争的。（就按默认的<code>ConcurrentLevel</code>为16来讲，理论上就允许16个线程并发执行）</p><p><strong>所以，对于同一个Segment的操作才需考虑线程同步，不同的Segment则无需考虑。</strong></p><h2 id="7-transient关键词使用"><a class="markdownIt-Anchor" href="#7-transient关键词使用"></a> 7、transient关键词使用</h2><p>Java语言的关键字，变量修饰符，如果用<strong>transient</strong>声明一个实例变量，当对象存储时，它的值不需要维持。换句话来说就是，用<strong>transient</strong>关键字标记的成员变量不参与序列化过程。</p><p>Java的<strong>serialization提供了一种持久化对象实例的机制</strong>。当持久化对象时，有一个特殊的对象数据成员，不想用serialization机制来保存它。为了在一个特定对象的一个域上关闭serialization，可以在这个域前加上关键字transient。当一个对象被序列化的时候，transient型变量的值不包括在序列化的表示中，然而非transient型的变量是被包括进去的。</p><h2 id="8-java中的错误和异常"><a class="markdownIt-Anchor" href="#8-java中的错误和异常"></a> 8、Java中的错误和异常？</h2><p>Java中的所有异常都是Throwable的子类对象，Error类和Exception类是Throwable类的两个直接子类。</p><p>Error：包括一些严重的、程序不能处理的系统错误类。这些错误一般不是程序造成的，比如StackOverflowError和OutOfMemoryError。</p><p>Exception：异常分为运行时异常和检查型异常。</p><ul><li>检查型异常要求必须对异常进行处理，要么往上抛，要么try-catch捕获，不然不能通过编译。这类异常比较常见的是IOException。</li><li>运行时异常，可处理可不处理，在编译时可以通过，异常在运行时才暴露。比如数组下标越界，除0异常等。</li></ul><h2 id="9-java的集合类框架介绍一下"><a class="markdownIt-Anchor" href="#9-java的集合类框架介绍一下"></a> 9、Java的集合类框架介绍一下？</h2><p>首先接口Collection和Map是平级的，Map没有实现Collection。</p><p>Map的实现类常见有HashMap、TreeMap、LinkedHashMap和HashTable等。其中HashMap使用散列法实现，低层是数组，采用链地址法解决哈希冲突，每个数组的下标都是一条链表，当长度超过8时，转换成红黑树。TreeMap使用红黑树实现，可以按照键进行排序。LinkedHashMap的实现综合了HashMap和双向链表，可保证以插入时的顺序（或访问顺序，LRU的实现）进行迭代。HashTable和HashMap比，前者是线程安全的，后者不是线程安全的。HashTable的键或者值不允许null，HashMap允许。</p><p>Collection的实现类常见的有List、Set和Queue。List的实现类有ArrayList和LinkedList以及Vector等，ArrayList就是一个可扩容的对象数组，LinkedList是一个双向链表。Vector是线程安全的（ArrayList不是线程安全的）。Set里的元素不可重复，实现类常见的有HashSet、TreeSet、LinkedHashSet等，HashSet的实现基于HashMap，实际上就是HashMap中的Key，同样TreeSet低层由TreeMap实现，LinkedHashSet低层由LinkedHashMap实现。Queue的实现类有LinkedList，可以用作栈、队列和双向队列，另外还有PriorityQueue是基于堆的优先队列。</p><h2 id="10-java反射是什么为什么要用反射有什么好处哪些地方用到了反射"><a class="markdownIt-Anchor" href="#10-java反射是什么为什么要用反射有什么好处哪些地方用到了反射"></a> 10、Java反射是什么？为什么要用反射，有什么好处，哪些地方用到了反射？</h2><p>反射：允许任意一个类在运行时获取自身的类信息，并且可以操作这个类的方法和属性。这种动态获取类信息和动态调用对象方法的功能称为Java的反射机制。</p><p>反射的核心是JVM在运行时才动态加载类或调用方法/访问属性。它不需要事先（写代码的时候或编译期）知道运行对象是谁，如<code>Class.ForName()</code>根本就没有指定某个特定的类，完全由你传入的类全限定名决定，而通过new的方式你是知道运行时对象是哪个类的。 反射避免了将程序“写死”。</p><p>反射可以降低程序耦合性，提高程序的灵活性。new是造成紧耦合的一大原因。比如下面的工厂方法中，根据水果类型决定返回哪一个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Fruit fruit = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Apple&quot;</span>.equals(type)) &#123;</span><br><span class="line">            fruit = <span class="keyword">new</span> Apple();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Banana&quot;</span>.equals(type)) &#123;</span><br><span class="line">            fruit = <span class="keyword">new</span> Banana();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Orange&quot;</span>.equals(type)) &#123;</span><br><span class="line">            fruit = <span class="keyword">new</span> Orange();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fruit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>但是我们事先并不知道之后会有哪些类，比如新增了Mango，就需要在if-else中新增；如果以后不需要Banana了就需要从if-else中删除。这就是说只要子类变动了，我们必须在工厂类进行修改，然后再编译。如果用反射呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fruit <span class="title">getFruit</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Fruit fruit = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fruit = (Fruit) Class.forName(type).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fruit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Banana</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Orange</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">extends</span> <span class="title">Fruit</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>如果再将子类的全限定名存放在配置文件中。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">class-type</span>=<span class="string">com.fruit.Apple</span></span><br></pre></td></tr></table></figure><p>那么不管新增多少子类，根据不同的场景只需修改文件就好了，上面的代码无需修改代码、重新编译，就能正确运行。</p><p>哪些地方用到了反射？举几个例子</p><ul><li>加载数据库驱动时</li><li>Spring的IOC容器，根据XML配置文件中的类全限定名动态加载类</li><li>工厂方法模式中（如上）</li></ul><h3 id="反射的使用"><a class="markdownIt-Anchor" href="#反射的使用"></a> 反射的使用</h3><h5 id="获取class实例的方式"><a class="markdownIt-Anchor" href="#获取class实例的方式"></a> 获取class实例的方式</h5><ol><li><p>直接通过一个<code>class</code>的静态变量<code>class</code>获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = String.class;</span><br></pre></td></tr></table></figure></li><li><p>如果我们有一个实例变量，可以通过该实例变量提供的<code>getClass()</code>方法获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Class cls = s.getClass();</span><br></pre></td></tr></table></figure></li><li><p>如果知道一个<code>class</code>的完整类名，可以通过静态方法<code>Class.forName()</code>获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><p>因为<code>Class</code>实例在JVM中是唯一的。所以获取的String实例是相同的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class a = String.class;</span><br><span class="line">Class b = <span class="string">&quot;Hello&quot;</span>.getClass();</span><br><span class="line">a == b; <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="和instanceof的区别"><a class="markdownIt-Anchor" href="#和instanceof的区别"></a> == 和instanceof的区别</h5><p>用<code>instanceof</code>不但匹配当前类型，还匹配当前类型的子类。而用<code>==</code>判断<code>class</code>实例可以精确地判断数据类型，但不能作子类型比较。 也就是如果该类是子类<code>instanceof</code>也返回true，但是==返回false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer n = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b3 = n <span class="keyword">instanceof</span> Integer; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">boolean</span> b4 = n <span class="keyword">instanceof</span> Number; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> b1 = n.getClass() == Integer.class; <span class="comment">// true</span></span><br><span class="line"><span class="keyword">boolean</span> b2 = n.getClass() == Number.class; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>注意到数组（例如<code>String[]</code>）也是一种<code>Class</code>，而且不同于<code>String.class</code>，它的类名是<code>[Ljava.lang.String</code>。此外，JVM为每一种基本类型如int也创建了<code>Class</code>，通过<code>int.class</code>访问。</p><p>获取到了一个<code>Class</code>实例，我们就可以通过该<code>Class</code>实例来创建对应类型的实例。</p><h5 id="jvm动态加载"><a class="markdownIt-Anchor" href="#jvm动态加载"></a> JVM动态加载</h5><p>JVM在执行Java程序的时候，并不是一次性把所有用到的class全部加载到内存，而是第一次需要用到class时才加载。</p><h5 id="访问字段"><a class="markdownIt-Anchor" href="#访问字段"></a> 访问字段</h5><p>通过<code>Class</code>实例获取字段信息。<code>Class</code>类提供了以下几个方法来获取字段：</p><ul><li>Field getField(name)：根据字段名获取某个public的field（包括父类）</li><li>Field getDeclaredField(name)：根据字段名获取当前类的某个field（不包括父类）</li><li>Field[] getFields()：获取所有public的field（包括父类）</li><li>Field[] getDeclaredFields()：获取当前类的所有field（不包括父类</li></ul><p>一个<code>Field</code>对象包含了一个字段的所有信息：</p><ul><li><code>getName()</code>：返回字段名称，例如，<code>&quot;name&quot;</code>；</li><li><code>getType()</code>：返回字段类型，也是一个<code>Class</code>实例，例如，<code>String.class</code>；</li><li><code>getModifiers()</code>：返回字段的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。</li></ul><p>先获取<code>Class</code>实例，再获取<code>Field</code>实例，然后，用<code>Field.get(Object)</code>获取指定实例的指定字段的值。</p><p>通过<code>Field.set(Object, Object)</code>实现修改字段的值，其中第一个<code>Object</code>参数是指定的实例，第二个<code>Object</code>参数是待修改的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Student s = <span class="keyword">new</span> Student(<span class="number">15</span>,<span class="string">&quot;djj&quot;</span>,<span class="number">96</span>);</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student(<span class="number">16</span>,<span class="string">&quot;why&quot;</span>,<span class="number">97</span>);</span><br><span class="line">    Class cls = s.getClass();</span><br><span class="line">    Field f = cls.getDeclaredField(<span class="string">&quot;score&quot;</span>);</span><br><span class="line">    System.out.println(f.get(s)); <span class="comment">//96</span></span><br><span class="line">    System.out.println(f.get(s1)); <span class="comment">//97</span></span><br><span class="line">    f.set(s, <span class="number">56</span>);</span><br><span class="line">    System.out.println(s.getScore());<span class="comment">//56</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="调用方法"><a class="markdownIt-Anchor" href="#调用方法"></a> 调用方法</h5><p>通过<code>Class</code>实例获取所有<code>Method</code>信息。<code>Class</code>类提供了以下几个方法来获取<code>Method</code>：</p><ul><li><code>Method getMethod(name, Class...)</code>：获取某个<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method getDeclaredMethod(name, Class...)</code>：获取当前类的某个<code>Method</code>（不包括父类）</li><li><code>Method[] getMethods()</code>：获取所有<code>public</code>的<code>Method</code>（包括父类）</li><li><code>Method[] getDeclaredMethods()</code>：获取当前类的所有<code>Method</code>（不包括父类）</li></ul><p>一个<code>Method</code>对象包含一个方法的所有信息：</p><ul><li><code>getName()</code>：返回方法名称，例如：<code>&quot;getScore&quot;</code>；</li><li><code>getReturnType()</code>：返回方法返回值类型，也是一个Class实例，例如：<code>String.class</code>；</li><li><code>getParameterTypes()</code>：返回方法的参数类型，是一个Class数组，例如：<code>&#123;String.class, int.class&#125;</code>；</li><li><code>getModifiers()</code>：返回方法的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。调用非public方法</li></ul><h6 id="调用静态方法"><a class="markdownIt-Anchor" href="#调用静态方法"></a> 调用静态方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取Integer.parseInt(String)方法，参数为String:</span></span><br><span class="line">        Method m = Integer.class.getMethod(<span class="string">&quot;parseInt&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">// 调用该静态方法并获取结果:</span></span><br><span class="line">        Integer n = (Integer) m.invoke(<span class="keyword">null</span>, <span class="string">&quot;12345&quot;</span>);</span><br><span class="line">        <span class="comment">// 打印调用结果:</span></span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *a;</span><br><span class="line"></span><br><span class="line">a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">45</span>];</span><br><span class="line"></span><br><span class="line">delete a;</span><br></pre></td></tr></table></figure><h6 id="调用非静态方法"><a class="markdownIt-Anchor" href="#调用非静态方法"></a> 调用非静态方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// String对象:</span></span><br><span class="line">        String s = <span class="string">&quot;Hello world&quot;</span>;</span><br><span class="line">        <span class="comment">// 获取String substring(int)方法，参数为int:</span></span><br><span class="line">        Method m = String.class.getMethod(<span class="string">&quot;substring&quot;</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">// 在s对象上调用该方法并获取结果:</span></span><br><span class="line">        String r = (String) m.invoke(s, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 打印调用结果:</span></span><br><span class="line">        System.out.println(r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="调用非public方法"><a class="markdownIt-Anchor" href="#调用非public方法"></a> 调用非public方法</h6><p>和Field类似，对于非public方法，我们虽然可以通过<code>Class.getDeclaredMethod()</code>获取该方法实例，但直接对其调用将得到一个<code>IllegalAccessException</code>。为了调用非public方法，我们通过<code>Method.setAccessible(true)</code>允许其调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        Method m = p.getClass().getDeclaredMethod(<span class="string">&quot;setName&quot;</span>, String.class);</span><br><span class="line">        m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        m.invoke(p, <span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        System.out.println(p.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造实例"><a class="markdownIt-Anchor" href="#构造实例"></a> 构造实例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person p = Person.class.newInstance();</span><br></pre></td></tr></table></figure><p>局限：它只能调用该类的public无参数构造方法。如果构造方法带有参数，或者不是public，就无法直接通过<code>Class.newInstance()</code>来调用。</p><p>Java的反射API提供了Constructor对象，它包含一个构造方法的所有信息，可以创建一个实例。Constructor对象和Method非常类似，不同之处仅在于它是一个构造方法，并且，调用结果总是返回实例</p><p>通过Class实例获取Constructor的方法如下：</p><ul><li><code>getConstructor(Class...)</code>：获取某个<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructor(Class...)</code>：获取某个<code>Constructor</code>；</li><li><code>getConstructors()</code>：获取所有<code>public</code>的<code>Constructor</code>；</li><li><code>getDeclaredConstructors()</code>：获取所有<code>Constructor</code>。</li></ul><p><code>Constructor</code>总是当前类定义的构造方法，和父类无关，因此不存在多态的问题。</p><p>调用非<code>public</code>的<code>Constructor</code>时，必须首先通过<code>setAccessible(true)</code>设置允许访问。<code>setAccessible(true)</code>可能会失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取构造方法Integer(int):</span></span><br><span class="line">        Constructor cons1 = Integer.class.getConstructor(<span class="keyword">int</span>.class);</span><br><span class="line">        <span class="comment">// 调用构造方法:</span></span><br><span class="line">        Integer n1 = (Integer) cons1.newInstance(<span class="number">123</span>);</span><br><span class="line">        System.out.println(n1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取构造方法Integer(String)</span></span><br><span class="line">        Constructor cons2 = Integer.class.getConstructor(String.class);</span><br><span class="line">        Integer n2 = (Integer) cons2.newInstance(<span class="string">&quot;456&quot;</span>);</span><br><span class="line">        System.out.println(n2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取父类实现接口"><a class="markdownIt-Anchor" href="#获取父类实现接口"></a> 获取父类，实现接口</h5><p>通过<code>Class</code>对象可以获取继承关系：</p><ul><li><code>Class getSuperclass()</code>：获取父类类型；</li><li><code>Class[] getInterfaces()</code>：获取当前类实现的所有接口。</li></ul><p>通过<code>Class</code>对象的<code>isAssignableFrom()</code>方法可以判断一个向上转型是否可以实现。</p><h2 id="11-说说你对面向对象-封装-继承-多态的理解"><a class="markdownIt-Anchor" href="#11-说说你对面向对象-封装-继承-多态的理解"></a> 11、说说你对面向对象、封装、继承、多态的理解？</h2><ul><li>封装：隐藏实现细节，明确标识出允许外部使用的所有成员函数和数据项。 防止代码或数据被破坏。</li><li>继承：子类继承父类，拥有父类的所有功能，并且可以在父类基础上进行扩展。实现了代码重用。子类和父类是兼容的，外部调用者无需关注两者的区别。</li><li>多态：一个接口有多个子类或实现类，在运行期间（而非编译期间）才决定所引用的对象的实际类型，再根据其实际的类型调用其对应的方法，也就是“动态绑定”。</li></ul><p>Java实现多态有三个必要条件**：继承、重写、向上转型。**</p><ul><li>继承：子类继承或者实行父类</li><li>重写：在子类里面重写从父类继承下来的方法</li><li>向上转型：父类引用指向子类对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OOP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 1. Cat继承了Animal</span></span><br><span class="line"><span class="comment">         * 2. Cat重写了Animal的eat方法</span></span><br><span class="line"><span class="comment">         * 3. 父类Animal的引用指向了子类Cat。</span></span><br><span class="line"><span class="comment">         * 在编译期间其静态类型为Animal;在运行期间其实际类型为Cat，因此animal.eat()将选择Cat的eat方法而不是其他子类的eat方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Animal animal = <span class="keyword">new</span> Cat();</span><br><span class="line">        printEating(animal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printEating</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog eating...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-实现不可变对象的策略比如jdk中的string类"><a class="markdownIt-Anchor" href="#12-实现不可变对象的策略比如jdk中的string类"></a> 12、实现不可变对象的策略？比如JDK中的String类。</h2><ul><li>不提供setter方法（包括修改字段、字段引用到的的对象等方法）</li><li>将所有字段设置为final、private</li><li>将类修饰为final，不允许子类继承、重写方法。可以将构造函数设为private，通过工厂方法创建。</li><li>如果类的字段是对可变对象的引用，不允许修改被引用对象。 1）不提供修改可变对象的方法；2）不共享对可变对象的引用。对于外部传入的可变对象，不保存该引用。如要保存可以保存其复制后的副本；对于内部可变对象，不要返回对象本身，而是返回其复制后的副本。</li></ul><h2 id="13-java序列话中如果有些字段不想进行序列化怎么办"><a class="markdownIt-Anchor" href="#13-java序列话中如果有些字段不想进行序列化怎么办"></a> 13、Java序列话中如果有些字段不想进行序列化，怎么办？</h2><p>对于不想进行序列化的变量，使用<strong>transient</strong>关键字修饰。功能是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被transient修饰的变量值不会被持久化和恢复。transient只能修饰变量，不能修饰类和方法。</p><h2 id="14-和equals的区别"><a class="markdownIt-Anchor" href="#14-和equals的区别"></a> 14、==和equals的区别？</h2><p>== 对于基本类型，比较值是否相等，对于对象，比较的是两个对象的地址是否相同，即是否是指相同一个对象。</p><p>equals的默认实现实际上使用了==来比较两个对象是否相等，但是像Integer、String这些类对equals方法进行了重写，比较的是两个对象的内容是否相等。</p><p>对于Integer，如果依然坚持使用==来比较，有一些要注意的地方。对于[-128,127]区间里的数，有一个缓存。因此</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">127</span>;</span><br><span class="line">Integer b = <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Integer a = <span class="number">128</span>;</span><br><span class="line">Integer b = <span class="number">128</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不过采用new的方式，a在堆中，这里打印false</span></span><br><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">127</span>);</span><br><span class="line">Integer b = <span class="number">127</span>;</span><br><span class="line">System.out.println(a == b);</span><br></pre></td></tr></table></figure><p>对于String，因为它有一个常量池。所以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String a = <span class="string">&quot;gg&quot;</span> + <span class="string">&quot;rr&quot;</span>;</span><br><span class="line">String b = <span class="string">&quot;ggrr&quot;</span>;</span><br><span class="line">System.out.println(a == b); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然牵涉到new的话，该对象就在堆上创建了，所以这里打印false</span></span><br><span class="line">String a = <span class="string">&quot;gg&quot;</span> + <span class="string">&quot;rr&quot;</span>;</span><br><span class="line">String b = <span class="keyword">new</span> String(<span class="string">&quot;ggrr&quot;</span>);</span><br><span class="line">System.out.println(a == b);</span><br></pre></td></tr></table></figure><h2 id="15-接口和抽象类的区别"><a class="markdownIt-Anchor" href="#15-接口和抽象类的区别"></a> 15、接口和抽象类的区别？</h2><ul><li>Java不能多继承，一个类只能继承一个抽象类；但是可以实现多个接口。</li><li>继承抽象类是一种IS-A的关系，实现接口是一种LIKE-A的关系。</li><li>继承抽象类可以实现对父类代码的复用，也可以重写抽象方法实现子类特有的功能。实现接口可以为类新增额外的功能。</li><li>抽象类定义基本的共性内容，接口是定义额外的功能。</li><li>调用者使用动机不同, 实现接口是为了使用他规范的某一个行为；继承抽象类是为了使用这个类属性和行为.</li></ul><h2 id="16-给你一个person对象p如何将该对象变成json表示"><a class="markdownIt-Anchor" href="#16-给你一个person对象p如何将该对象变成json表示"></a> 16、给你一个Person对象p，如何将该对象变成JSON表示？</h2><p>本质是考察Java反射，因为要实现一个通用的程序。实现可能根本不知道该类有哪些字段，所以不能通过get和set等方法来获取键-值。使用反射的getDeclaredFields()可以获得其声明的字段。如果字段是private的，需要调用该字段的<code>f.setAccessible(true);</code>，才能读取和修改该字段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object2Json</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="number">18</span>, <span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; classPerson = p.getClass();</span><br><span class="line">        Field[] fields = classPerson.getDeclaredFields();</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Field f: fields) &#123;</span><br><span class="line">            <span class="comment">// 对于private字段要先设置accessible为true</span></span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            map.put(String.valueOf(f.getName()), String.valueOf(f.get(p)));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到了map，再弄成JSON标准格式就好了。</p><h2 id="17-jdbc中sql查询的完整过程操作事务呢"><a class="markdownIt-Anchor" href="#17-jdbc中sql查询的完整过程操作事务呢"></a> 17、JDBC中sql查询的完整过程？操作事务呢？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, ClassNotFoundException </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 注册驱动</span></span><br><span class="line">    Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">    String url = <span class="string">&quot;jdbc:mysql://localhost:3306/xxx?useUnicode=true&amp;characterEncoding=utf-8&quot;</span>;</span><br><span class="line">    <span class="comment">// 2.建立连接</span></span><br><span class="line">    Connection connection = DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    <span class="comment">// 3. 执行sql语句使用的Statement或者PreparedStatment</span></span><br><span class="line">    Statement statement = connection.createStatement();</span><br><span class="line">    String sql = <span class="string">&quot;select * from stu;&quot;</span>;</span><br><span class="line">    ResultSet resultSet = statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">        <span class="comment">// 第一列是id，所以从第二行开始</span></span><br><span class="line">        String name = resultSet.getString(<span class="number">2</span>); <span class="comment">// 可以传入列的索引，1代表第一行，索引不是从0开始</span></span><br><span class="line">        <span class="keyword">int</span> age = resultSet.getInt(<span class="number">3</span>);</span><br><span class="line">        String gender = resultSet.getString(<span class="number">4</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;学生姓名：&quot;</span> + name + <span class="string">&quot; | 年龄：&quot;</span> + age + <span class="string">&quot; | 性别：&quot;</span> + gender);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭结果集</span></span><br><span class="line">    resultSet.close();</span><br><span class="line">    <span class="comment">// 关闭statemenet</span></span><br><span class="line">    statement.close();</span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ResultSet维持一个指向当前行记录的cursor（游标）指针</strong></p><ul><li>注册驱动</li><li>建立连接</li><li>准备sql语句</li><li>执行sql语句得到结果集</li><li>对结果集进行遍历</li><li>关闭结果集（ResultSet）</li><li>关闭statement</li><li>关闭连接（connection）</li></ul><p>由于JDBC默认自动提交事务，每执行一个update ,delete或者insert的时候都会自动提交到数据库，无法回滚事务。所以若需要实现事务的回滚，要指定<code>setAutoCommit(false)</code>。</p><ul><li><code>true</code>：sql命令的提交（commit）由驱动程序负责</li><li><code>false</code>：sql命令的提交由应用程序负责，程序必须调用commit或者rollback方法</li></ul><p>JDBC操作事务的格式如下，在捕获异常中进行事务的回滚。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  con.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//开启事务…</span></span><br><span class="line">  ….</span><br><span class="line">  …</span><br><span class="line">  con.commit();<span class="comment">//try的最后提交事务</span></span><br><span class="line">&#125; <span class="keyword">catch</span>() &#123;</span><br><span class="line">  con.rollback();<span class="comment">//回滚事务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-实现单例有哪些要注意的地方"><a class="markdownIt-Anchor" href="#18-实现单例有哪些要注意的地方"></a> 18、实现单例，有哪些要注意的地方？</h2><p>就普通的实现方法来看。</p><ul><li>不允许在其他类中直接new出对象，故构造方法私有化</li><li>在本类中创建唯一一个static实例对象</li><li>定义一个public static方法，返回该实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonImp</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 饿汉模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonImp singletonImp = <span class="keyword">new</span> SingletonImp();</span><br><span class="line">    <span class="comment">// 私有化（private）该类的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonImp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonImp <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singletonImp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉模式：线程安全，不能延迟加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonImp4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonImp4 singletonImp4;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonImp4</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonImp4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (singletonImp4 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonImp4.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (singletonImp4 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singletonImp4 = <span class="keyword">new</span> SingletonImp4();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> singletonImp4;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检测锁+volatile禁止语义重排。因为<code>singletonImp4 = new SingletonImp4();</code>不是原子操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonImp6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonImp6</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 专门用于创建Singleton的静态类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingletonImp6 singletonImp6 = <span class="keyword">new</span> SingletonImp6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonImp6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Nested.singletonImp6;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态内部类，可以实现延迟加载。</p><p>最推荐的是单一元素枚举实现单例。</p><ul><li>写法简单</li><li>枚举实例的创建默认就是线程安全的</li><li>提供了自由的序列化机制。面对复杂的序列或反射攻击，也能保证是单例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">anyOtherMethod</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19-覆写object方法"><a class="markdownIt-Anchor" href="#19-覆写object方法"></a> 19、覆写Object方法</h2><ul><li><code>toString()</code>：把instance输出为<code>String</code>；</li><li><code>equals()</code>：判断两个instance是否逻辑相等；</li><li><code>hashCode()</code>：计算一个instance的哈希值。</li></ul><p>在子类的覆写方法中，如果要调用父类的被覆写的方法，可以通过<code>super</code>来调用 。</p><p>继承可以允许子类覆写父类的方法。如果一个父类不允许子类对它的某个方法进行覆写，可以把该方法标记为<code>final</code>。用<code>final</code>修饰的方法不能被<code>Override</code> 。<code>final</code>修饰符有多种作用：</p><h2 id="20-final关键词"><a class="markdownIt-Anchor" href="#20-final关键词"></a> 20、final关键词</h2><ul><li><code>final</code>修饰的方法可以阻止被覆写；</li><li><code>final</code>修饰的class可以阻止被继承；</li><li><code>final</code>修饰的field必须在创建对象时初始化，随后不可修改。</li></ul><h2 id="21-抽象类和接口"><a class="markdownIt-Anchor" href="#21-抽象类和接口"></a> 21、抽象类和接口</h2><h5 id="default方法"><a class="markdownIt-Anchor" href="#default方法"></a> default方法</h5><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">abstract class</th><th style="text-align:left">interface</th></tr></thead><tbody><tr><td style="text-align:left">继承</td><td style="text-align:left">只能extends一个class</td><td style="text-align:left">可以implements多个interface</td></tr><tr><td style="text-align:left">字段</td><td style="text-align:left">可以定义实例字段</td><td style="text-align:left">不能定义实例字段</td></tr><tr><td style="text-align:left">抽象方法</td><td style="text-align:left">可以定义抽象方法</td><td style="text-align:left">可以定义抽象方法</td></tr><tr><td style="text-align:left">非抽象方法</td><td style="text-align:left">可以定义非抽象方法</td><td style="text-align:left">可以定义default方法</td></tr></tbody></table><p>实现类可以不必覆写<code>default</code>方法。<code>default</code>方法的目的是，当我们需要给接口新增一个方法时，会涉及到修改全部子类。如果新增的是<code>default</code>方法，那么子类就不必全部修改，只需要在需要覆写的地方去覆写新增方法。</p><p><code>default</code>方法和抽象类的普通方法是有所不同的。因为<code>interface</code>没有字段，<code>default</code>方法无法访问字段，而抽象类的普通方法可以访问实例字段。</p><h5 id="interface字段"><a class="markdownIt-Anchor" href="#interface字段"></a> interface字段</h5><p>因为<code>interface</code>是一个纯抽象类，所以它不能定义实例字段。但是，<code>interface</code>是可以有静态字段的，并且静态字段必须为<code>final</code>类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MALE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FEMALE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//因为interface的字段只能是public static final类型，所以我们可以把这些修饰符都去掉，上述代码可以简写为：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 编译器会自动加上public statc final:</span></span><br><span class="line">    <span class="keyword">int</span> MALE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> FEMALE = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="22-作用域"><a class="markdownIt-Anchor" href="#22-作用域"></a> 22、作用域</h2><h5 id="package包作用域"><a class="markdownIt-Anchor" href="#package包作用域"></a> package包作用域</h5><p>最后，包作用域是指一个类允许访问同一个<code>package</code>的没有<code>public</code>、<code>private</code>修饰的<code>class</code>，以及没有<code>public</code>、<code>protected</code>、<code>private</code>修饰的字段和方法。</p><p><code>public</code>、<code>protected</code>、<code>private</code>略</p><h5 id="局部变量"><a class="markdownIt-Anchor" href="#局部变量"></a> 局部变量</h5><p>在方法内部定义的变量称为局部变量，局部变量作用域从变量声明处开始到对应的块结束。方法参数也是局部变量。</p><h2 id="23-异常和错误"><a class="markdownIt-Anchor" href="#23-异常和错误"></a> 23、异常和错误</h2><p>Error和RuntimeException是非受查异常，其他的异常为受查异常。</p><p>在程序中无须将非受查异常进行catch或者throws。</p><p>在测试阶段可以使用断言来进行。</p><h5 id="常见的runtimeexception异常"><a class="markdownIt-Anchor" href="#常见的runtimeexception异常"></a> 常见的RuntimeException异常</h5><p>NullPointerException - 空指针引用异常<br>ClassCastException - 类型强制转换异常。<br>IllegalArgumentException - 传递非法参数异常。<br>ArithmeticException - 算术运算异常<br>ArrayStoreException - 向数组中存放与声明类型不兼容对象异常<br>IndexOutOfBoundsException - 下标越界异常</p><h5 id="常见的checkedexception异常"><a class="markdownIt-Anchor" href="#常见的checkedexception异常"></a> 常见的CheckedException异常</h5><p>SQLException<br>OException<br>ClassNotFoundException<br>NamingException,<br>ServletException,</p><h2 id="24-迭代器"><a class="markdownIt-Anchor" href="#24-迭代器"></a> 24、迭代器</h2><p>迭代器就是提供一种方法对一个容器对象中的各个元素进行访问，而又不暴露该对象容器的内部细节。</p><h5 id="iterator接口的实现如下"><a class="markdownIt-Anchor" href="#iterator接口的实现如下"></a> <code>Iterator</code>接口的实现如下</h5><ol><li><p>迭代器在迭代期间可以从集合中移除元素。</p></li><li><p>方法名得到了改进，Enumeration的方法名称都比较长。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the next element in the iteration.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;remove&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="iterable"><a class="markdownIt-Anchor" href="#iterable"></a> <code>Iterable</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"><span class="keyword">import</span> java.util.Spliterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Spliterators;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//返回一个Iterator对象</span></span><br><span class="line">    <span class="function">Iterator&lt;T&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</span><br><span class="line">            action.accept(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">default</span> Spliterator&lt;T&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###### 两种遍历方式</span><br><span class="line"></span><br><span class="line">使用迭代器遍历和使用&#96;&#96;&#96;foreach&#96;&#96;&#96;遍历</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">LinkedList&lt;String&gt; linkedList &#x3D; new LinkedList&lt;&gt;();</span><br><span class="line">        linkedList.push(&quot;first&quot;);</span><br><span class="line">        linkedList.push(&quot;second&quot;);</span><br><span class="line">        linkedList.push(&quot;third&quot;);</span><br><span class="line">        linkedList.push(&quot;forth&quot;);</span><br><span class="line">        linkedList.push(&quot;fifth&quot;);</span><br><span class="line">        Iterator&lt;String&gt; linkedListIterable &#x3D; linkedList.iterator();</span><br><span class="line"></span><br><span class="line">        while(linkedListIterable.hasNext())&#123;</span><br><span class="line">            System.out.println(linkedListIterable.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (String string:linkedList) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在使用Iterator的时候禁止对所遍历的容器进行改变其大小结构的操作。例如: 在使用Iterator进行迭代时，如果对集合进行了add、remove操作就会出现<code>ConcurrentModificationException</code>异常。</p><h5 id="listiterator"><a class="markdownIt-Anchor" href="#listiterator"></a> <code>ListIterator</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">previous</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;java-基础&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-基础&quot;&gt;&lt;/a&gt; Java 基础&lt;/h1&gt;
&lt;h2 id=&quot;1-java特性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-java</summary>
      
    
    
    
    <category term="Java" scheme="https://duanjiaojiao316.github.io/categories/Java/"/>
    
    
    <category term="Java基础" scheme="https://duanjiaojiao316.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
